/*
Package srl_yang is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /Users/henderiw/CodeProjects/go/pkg/mod/github.com/openconfig/ygot@v0.8.3/genutil/names.go
using the following YANG input files:
	- ../yang/srl/srl_nokia-aaa-tacacs.yang
	- ../yang/srl/srl_nokia-aaa-types.yang
	- ../yang/srl/srl_nokia-aaa.yang
	- ../yang/srl/srl_nokia-acl.yang
	- ../yang/srl/srl_nokia-aft.yang
	- ../yang/srl/srl_nokia-aggregate-routes.yang
	- ../yang/srl/srl_nokia-app-mgmt.yang
	- ../yang/srl/srl_nokia-bfd.yang
	- ../yang/srl/srl_nokia-bgp.yang
	- ../yang/srl/srl_nokia-boot.yang
	- ../yang/srl/srl_nokia-common.yang
	- ../yang/srl/srl_nokia-configuration.yang
	- ../yang/srl/srl_nokia-dns.yang
	- ../yang/srl/srl_nokia-extensions.yang
	- ../yang/srl/srl_nokia-ftp.yang
	- ../yang/srl/srl_nokia-gnmi-server.yang
	- ../yang/srl/srl_nokia-icmp.yang
	- ../yang/srl/srl_nokia-if-ip.yang
	- ../yang/srl/srl_nokia-interfaces-ip-dhcp.yang
	- ../yang/srl/srl_nokia-interfaces-nbr.yang
	- ../yang/srl/srl_nokia-interfaces-vlans.yang
	- ../yang/srl/srl_nokia-interfaces.yang
	- ../yang/srl/srl_nokia-ip-route-tables.yang
	- ../yang/srl/srl_nokia-json-rpc.yang
	- ../yang/srl/srl_nokia-linux.yang
	- ../yang/srl/srl_nokia-lldp-types.yang
	- ../yang/srl/srl_nokia-lldp.yang
	- ../yang/srl/srl_nokia-load-balancing.yang
	- ../yang/srl/srl_nokia-logging.yang
	- ../yang/srl/srl_nokia-maintenance-mode.yang
	- ../yang/srl/srl_nokia-mpls-route-tables.yang
	- ../yang/srl/srl_nokia-mpls.yang
	- ../yang/srl/srl_nokia-mtu.yang
	- ../yang/srl/srl_nokia-network-instance-mtu.yang
	- ../yang/srl/srl_nokia-network-instance.yang
	- ../yang/srl/srl_nokia-next-hop-groups.yang
	- ../yang/srl/srl_nokia-ntp.yang
	- ../yang/srl/srl_nokia-packet-match-types.yang
	- ../yang/srl/srl_nokia-platform-acl.yang
	- ../yang/srl/srl_nokia-platform-chassis.yang
	- ../yang/srl/srl_nokia-platform-control.yang
	- ../yang/srl/srl_nokia-platform-cpu.yang
	- ../yang/srl/srl_nokia-platform-disk.yang
	- ../yang/srl/srl_nokia-platform-fabric.yang
	- ../yang/srl/srl_nokia-platform-fan.yang
	- ../yang/srl/srl_nokia-platform-ip-mpls-fwd-resources.yang
	- ../yang/srl/srl_nokia-platform-lc.yang
	- ../yang/srl/srl_nokia-platform-memory.yang
	- ../yang/srl/srl_nokia-platform-mtu.yang
	- ../yang/srl/srl_nokia-platform-psu.yang
	- ../yang/srl/srl_nokia-platform-qos.yang
	- ../yang/srl/srl_nokia-platform-redundancy.yang
	- ../yang/srl/srl_nokia-platform-resource-monitoring.yang
	- ../yang/srl/srl_nokia-platform.yang
	- ../yang/srl/srl_nokia-policy-types.yang
	- ../yang/srl/srl_nokia-qos.yang
	- ../yang/srl/srl_nokia-rib-bgp.yang
	- ../yang/srl/srl_nokia-routing-policy.yang
	- ../yang/srl/srl_nokia-sflow.yang
	- ../yang/srl/srl_nokia-snmp-trace.yang
	- ../yang/srl/srl_nokia-snmp.yang
	- ../yang/srl/srl_nokia-ssh.yang
	- ../yang/srl/srl_nokia-static-routes.yang
	- ../yang/srl/srl_nokia-system-banner.yang
	- ../yang/srl/srl_nokia-system-info.yang
	- ../yang/srl/srl_nokia-system-name.yang
	- ../yang/srl/srl_nokia-system.yang
	- ../yang/srl/srl_nokia-tcp-udp.yang
	- ../yang/srl/srl_nokia-tls.yang
Imported modules were sourced from:
	- ../yang/ietf/...
*/
package srl_yang

import (
	"encoding/json"
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/goyang/pkg/yang"
	"github.com/openconfig/ygot/ytypes"
)


// SrlNokiaAcl_Acl represents the /srl_nokia-acl/acl YANG schema element.
type SrlNokiaAcl_Acl struct {
	CaptureFilter	*SrlNokiaAcl_Acl_CaptureFilter	`path:"capture-filter" module:"srl_nokia-acl"`
	CpmFilter	*SrlNokiaAcl_Acl_CpmFilter	`path:"cpm-filter" module:"srl_nokia-acl"`
	Ipv4Filter	map[string]*SrlNokiaAcl_Acl_Ipv4Filter	`path:"ipv4-filter" module:"srl_nokia-acl"`
	Ipv6Filter	map[string]*SrlNokiaAcl_Acl_Ipv6Filter	`path:"ipv6-filter" module:"srl_nokia-acl"`
	Policers	*SrlNokiaAcl_Acl_Policers	`path:"policers" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl) IsYANGGoStruct() {}


// SrlNokiaAcl_Acl_CaptureFilter represents the /srl_nokia-acl/acl/capture-filter YANG schema element.
type SrlNokiaAcl_Acl_CaptureFilter struct {
	Ipv4Filter	*SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter	`path:"ipv4-filter" module:"srl_nokia-acl"`
	Ipv6Filter	*SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter	`path:"ipv6-filter" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_CaptureFilter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_CaptureFilter) IsYANGGoStruct() {}


// SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter represents the /srl_nokia-acl/acl/capture-filter/ipv4-filter YANG schema element.
type SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter struct {
	Entry	map[uint32]*SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry	`path:"entry" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter) IsYANGGoStruct() {}


// SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry represents the /srl_nokia-acl/acl/capture-filter/ipv4-filter/entry YANG schema element.
type SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry struct {
	Action	*SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Action	`path:"action" module:"srl_nokia-acl"`
	Description	*string	`path:"description" module:"srl_nokia-acl"`
	Match	*SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match	`path:"match" module:"srl_nokia-acl"`
	SequenceId	*uint32	`path:"sequence-id" module:"srl_nokia-acl"`
	TcamEntries	*uint16	`path:"tcam-entries" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry) IsYANGGoStruct() {}


// SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Action represents the /srl_nokia-acl/acl/capture-filter/ipv4-filter/entry/action YANG schema element.
type SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Action struct {
	Accept	*SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Action_Accept	`path:"accept" module:"srl_nokia-acl"`
	Copy	*SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Action_Copy	`path:"copy" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Action implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Action) IsYANGGoStruct() {}


// SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Action_Accept represents the /srl_nokia-acl/acl/capture-filter/ipv4-filter/entry/action/accept YANG schema element.
type SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Action_Accept struct {
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Action_Accept implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Action_Accept) IsYANGGoStruct() {}


// SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Action_Copy represents the /srl_nokia-acl/acl/capture-filter/ipv4-filter/entry/action/copy YANG schema element.
type SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Action_Copy struct {
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Action_Copy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Action_Copy) IsYANGGoStruct() {}


// SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match represents the /srl_nokia-acl/acl/capture-filter/ipv4-filter/entry/match YANG schema element.
type SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match struct {
	DestinationAddress	*string	`path:"destination-address" module:"srl_nokia-acl"`
	DestinationPort	*SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort	`path:"destination-port" module:"srl_nokia-acl"`
	FirstFragment	*bool	`path:"first-fragment" module:"srl_nokia-acl"`
	Fragment	*bool	`path:"fragment" module:"srl_nokia-acl"`
	Icmp	*SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Icmp	`path:"icmp" module:"srl_nokia-acl"`
	Protocol	SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Protocol_Union	`path:"protocol" module:"srl_nokia-acl"`
	SourceAddress	*string	`path:"source-address" module:"srl_nokia-acl"`
	SourcePort	*SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort	`path:"source-port" module:"srl_nokia-acl"`
	TcpFlags	*string	`path:"tcp-flags" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match) IsYANGGoStruct() {}


// SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort represents the /srl_nokia-acl/acl/capture-filter/ipv4-filter/entry/match/destination-port YANG schema element.
type SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort struct {
	Operator	E_SrlNokiaAcl_Operator	`path:"operator" module:"srl_nokia-acl"`
	Range	*SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range	`path:"range" module:"srl_nokia-acl"`
	Value	SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value_Union	`path:"value" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort) IsYANGGoStruct() {}


// SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range represents the /srl_nokia-acl/acl/capture-filter/ipv4-filter/entry/match/destination-port/range YANG schema element.
type SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range struct {
	End	SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union	`path:"end" module:"srl_nokia-acl"`
	Start	SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union	`path:"start" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range) IsYANGGoStruct() {}


// SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Icmp represents the /srl_nokia-acl/acl/capture-filter/ipv4-filter/entry/match/icmp YANG schema element.
type SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Icmp struct {
	Code	[]uint8	`path:"code" module:"srl_nokia-acl"`
	Type	SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Icmp_Type_Union	`path:"type" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Icmp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Icmp) IsYANGGoStruct() {}


// SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort represents the /srl_nokia-acl/acl/capture-filter/ipv4-filter/entry/match/source-port YANG schema element.
type SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort struct {
	Operator	E_SrlNokiaAcl_Operator	`path:"operator" module:"srl_nokia-acl"`
	Range	*SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range	`path:"range" module:"srl_nokia-acl"`
	Value	SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value_Union	`path:"value" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort) IsYANGGoStruct() {}


// SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range represents the /srl_nokia-acl/acl/capture-filter/ipv4-filter/entry/match/source-port/range YANG schema element.
type SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range struct {
	End	SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union	`path:"end" module:"srl_nokia-acl"`
	Start	SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union	`path:"start" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range) IsYANGGoStruct() {}


// SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter represents the /srl_nokia-acl/acl/capture-filter/ipv6-filter YANG schema element.
type SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter struct {
	Entry	map[uint32]*SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry	`path:"entry" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter) IsYANGGoStruct() {}


// SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry represents the /srl_nokia-acl/acl/capture-filter/ipv6-filter/entry YANG schema element.
type SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry struct {
	Action	*SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Action	`path:"action" module:"srl_nokia-acl"`
	Description	*string	`path:"description" module:"srl_nokia-acl"`
	Match	*SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match	`path:"match" module:"srl_nokia-acl"`
	SequenceId	*uint32	`path:"sequence-id" module:"srl_nokia-acl"`
	TcamEntries	*uint16	`path:"tcam-entries" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry) IsYANGGoStruct() {}


// SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Action represents the /srl_nokia-acl/acl/capture-filter/ipv6-filter/entry/action YANG schema element.
type SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Action struct {
	Accept	*SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Action_Accept	`path:"accept" module:"srl_nokia-acl"`
	Copy	*SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Action_Copy	`path:"copy" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Action implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Action) IsYANGGoStruct() {}


// SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Action_Accept represents the /srl_nokia-acl/acl/capture-filter/ipv6-filter/entry/action/accept YANG schema element.
type SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Action_Accept struct {
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Action_Accept implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Action_Accept) IsYANGGoStruct() {}


// SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Action_Copy represents the /srl_nokia-acl/acl/capture-filter/ipv6-filter/entry/action/copy YANG schema element.
type SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Action_Copy struct {
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Action_Copy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Action_Copy) IsYANGGoStruct() {}


// SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match represents the /srl_nokia-acl/acl/capture-filter/ipv6-filter/entry/match YANG schema element.
type SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match struct {
	DestinationAddress	*string	`path:"destination-address" module:"srl_nokia-acl"`
	DestinationPort	*SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort	`path:"destination-port" module:"srl_nokia-acl"`
	Icmp6	*SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_Icmp6	`path:"icmp6" module:"srl_nokia-acl"`
	NextHeader	SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_NextHeader_Union	`path:"next-header" module:"srl_nokia-acl"`
	SourceAddress	*string	`path:"source-address" module:"srl_nokia-acl"`
	SourcePort	*SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort	`path:"source-port" module:"srl_nokia-acl"`
	TcpFlags	*string	`path:"tcp-flags" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match) IsYANGGoStruct() {}


// SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort represents the /srl_nokia-acl/acl/capture-filter/ipv6-filter/entry/match/destination-port YANG schema element.
type SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort struct {
	Operator	E_SrlNokiaAcl_Operator	`path:"operator" module:"srl_nokia-acl"`
	Range	*SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Range	`path:"range" module:"srl_nokia-acl"`
	Value	SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Value_Union	`path:"value" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort) IsYANGGoStruct() {}


// SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Range represents the /srl_nokia-acl/acl/capture-filter/ipv6-filter/entry/match/destination-port/range YANG schema element.
type SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Range struct {
	End	SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union	`path:"end" module:"srl_nokia-acl"`
	Start	SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union	`path:"start" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Range) IsYANGGoStruct() {}


// SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_Icmp6 represents the /srl_nokia-acl/acl/capture-filter/ipv6-filter/entry/match/icmp6 YANG schema element.
type SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_Icmp6 struct {
	Code	[]uint8	`path:"code" module:"srl_nokia-acl"`
	Type	SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_Icmp6_Type_Union	`path:"type" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_Icmp6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_Icmp6) IsYANGGoStruct() {}


// SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort represents the /srl_nokia-acl/acl/capture-filter/ipv6-filter/entry/match/source-port YANG schema element.
type SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort struct {
	Operator	E_SrlNokiaAcl_Operator	`path:"operator" module:"srl_nokia-acl"`
	Range	*SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Range	`path:"range" module:"srl_nokia-acl"`
	Value	SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Value_Union	`path:"value" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort) IsYANGGoStruct() {}


// SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Range represents the /srl_nokia-acl/acl/capture-filter/ipv6-filter/entry/match/source-port/range YANG schema element.
type SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Range struct {
	End	SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union	`path:"end" module:"srl_nokia-acl"`
	Start	SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union	`path:"start" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Range) IsYANGGoStruct() {}


// SrlNokiaAcl_Acl_CpmFilter represents the /srl_nokia-acl/acl/cpm-filter YANG schema element.
type SrlNokiaAcl_Acl_CpmFilter struct {
	Ipv4Filter	*SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter	`path:"ipv4-filter" module:"srl_nokia-acl"`
	Ipv6Filter	*SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter	`path:"ipv6-filter" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_CpmFilter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_CpmFilter) IsYANGGoStruct() {}


// SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter represents the /srl_nokia-acl/acl/cpm-filter/ipv4-filter YANG schema element.
type SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter struct {
	Entry	map[uint32]*SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry	`path:"entry" module:"srl_nokia-acl"`
	LastClear	*string	`path:"last-clear" module:"srl_nokia-acl"`
	StatisticsPerEntry	*bool	`path:"statistics-per-entry" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter) IsYANGGoStruct() {}


// SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry represents the /srl_nokia-acl/acl/cpm-filter/ipv4-filter/entry YANG schema element.
type SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry struct {
	Action	*SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Action	`path:"action" module:"srl_nokia-acl"`
	Description	*string	`path:"description" module:"srl_nokia-acl"`
	Match	*SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match	`path:"match" module:"srl_nokia-acl"`
	SequenceId	*uint32	`path:"sequence-id" module:"srl_nokia-acl"`
	Statistics	*SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Statistics	`path:"statistics" module:"srl_nokia-acl"`
	TcamEntries	*uint16	`path:"tcam-entries" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry) IsYANGGoStruct() {}


// SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Action represents the /srl_nokia-acl/acl/cpm-filter/ipv4-filter/entry/action YANG schema element.
type SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Action struct {
	Accept	*SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Action_Accept	`path:"accept" module:"srl_nokia-acl"`
	Drop	*SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Action_Drop	`path:"drop" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Action implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Action) IsYANGGoStruct() {}


// SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Action_Accept represents the /srl_nokia-acl/acl/cpm-filter/ipv4-filter/entry/action/accept YANG schema element.
type SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Action_Accept struct {
	Log	*bool	`path:"log" module:"srl_nokia-acl"`
	RateLimit	*SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Action_Accept_RateLimit	`path:"rate-limit" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Action_Accept implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Action_Accept) IsYANGGoStruct() {}


// SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Action_Accept_RateLimit represents the /srl_nokia-acl/acl/cpm-filter/ipv4-filter/entry/action/accept/rate-limit YANG schema element.
type SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Action_Accept_RateLimit struct {
	DistributedPolicer	*string	`path:"distributed-policer" module:"srl_nokia-acl"`
	SystemCpuPolicer	*string	`path:"system-cpu-policer" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Action_Accept_RateLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Action_Accept_RateLimit) IsYANGGoStruct() {}


// SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Action_Drop represents the /srl_nokia-acl/acl/cpm-filter/ipv4-filter/entry/action/drop YANG schema element.
type SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Action_Drop struct {
	Log	*bool	`path:"log" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Action_Drop implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Action_Drop) IsYANGGoStruct() {}


// SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match represents the /srl_nokia-acl/acl/cpm-filter/ipv4-filter/entry/match YANG schema element.
type SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match struct {
	DestinationAddress	*string	`path:"destination-address" module:"srl_nokia-acl"`
	DestinationPort	*SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort	`path:"destination-port" module:"srl_nokia-acl"`
	FirstFragment	*bool	`path:"first-fragment" module:"srl_nokia-acl"`
	Fragment	*bool	`path:"fragment" module:"srl_nokia-acl"`
	Icmp	*SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_Icmp	`path:"icmp" module:"srl_nokia-acl"`
	Protocol	SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_Protocol_Union	`path:"protocol" module:"srl_nokia-acl"`
	SourceAddress	*string	`path:"source-address" module:"srl_nokia-acl"`
	SourcePort	*SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort	`path:"source-port" module:"srl_nokia-acl"`
	TcpFlags	*string	`path:"tcp-flags" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match) IsYANGGoStruct() {}


// SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort represents the /srl_nokia-acl/acl/cpm-filter/ipv4-filter/entry/match/destination-port YANG schema element.
type SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort struct {
	Operator	E_SrlNokiaAcl_Operator	`path:"operator" module:"srl_nokia-acl"`
	Range	*SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Range	`path:"range" module:"srl_nokia-acl"`
	Value	SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Value_Union	`path:"value" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort) IsYANGGoStruct() {}


// SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Range represents the /srl_nokia-acl/acl/cpm-filter/ipv4-filter/entry/match/destination-port/range YANG schema element.
type SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Range struct {
	End	SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union	`path:"end" module:"srl_nokia-acl"`
	Start	SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union	`path:"start" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Range) IsYANGGoStruct() {}


// SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_Icmp represents the /srl_nokia-acl/acl/cpm-filter/ipv4-filter/entry/match/icmp YANG schema element.
type SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_Icmp struct {
	Code	[]uint8	`path:"code" module:"srl_nokia-acl"`
	Type	SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_Icmp_Type_Union	`path:"type" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_Icmp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_Icmp) IsYANGGoStruct() {}


// SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort represents the /srl_nokia-acl/acl/cpm-filter/ipv4-filter/entry/match/source-port YANG schema element.
type SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort struct {
	Operator	E_SrlNokiaAcl_Operator	`path:"operator" module:"srl_nokia-acl"`
	Range	*SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Range	`path:"range" module:"srl_nokia-acl"`
	Value	SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Value_Union	`path:"value" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort) IsYANGGoStruct() {}


// SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Range represents the /srl_nokia-acl/acl/cpm-filter/ipv4-filter/entry/match/source-port/range YANG schema element.
type SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Range struct {
	End	SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union	`path:"end" module:"srl_nokia-acl"`
	Start	SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union	`path:"start" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Range) IsYANGGoStruct() {}


// SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Statistics represents the /srl_nokia-acl/acl/cpm-filter/ipv4-filter/entry/statistics YANG schema element.
type SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Statistics struct {
	LastClear	*string	`path:"last-clear" module:"srl_nokia-acl"`
	LastMatch	*string	`path:"last-match" module:"srl_nokia-acl"`
	MatchedPackets	*uint64	`path:"matched-packets" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Statistics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Statistics) IsYANGGoStruct() {}


// SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter represents the /srl_nokia-acl/acl/cpm-filter/ipv6-filter YANG schema element.
type SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter struct {
	Entry	map[uint32]*SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry	`path:"entry" module:"srl_nokia-acl"`
	StatisticsPerEntry	*bool	`path:"statistics-per-entry" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter) IsYANGGoStruct() {}


// SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry represents the /srl_nokia-acl/acl/cpm-filter/ipv6-filter/entry YANG schema element.
type SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry struct {
	Action	*SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Action	`path:"action" module:"srl_nokia-acl"`
	Description	*string	`path:"description" module:"srl_nokia-acl"`
	Match	*SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match	`path:"match" module:"srl_nokia-acl"`
	SequenceId	*uint32	`path:"sequence-id" module:"srl_nokia-acl"`
	Statistics	*SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Statistics	`path:"statistics" module:"srl_nokia-acl"`
	TcamEntries	*uint16	`path:"tcam-entries" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry) IsYANGGoStruct() {}


// SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Action represents the /srl_nokia-acl/acl/cpm-filter/ipv6-filter/entry/action YANG schema element.
type SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Action struct {
	Accept	*SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Action_Accept	`path:"accept" module:"srl_nokia-acl"`
	Drop	*SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Action_Drop	`path:"drop" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Action implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Action) IsYANGGoStruct() {}


// SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Action_Accept represents the /srl_nokia-acl/acl/cpm-filter/ipv6-filter/entry/action/accept YANG schema element.
type SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Action_Accept struct {
	Log	*bool	`path:"log" module:"srl_nokia-acl"`
	RateLimit	*SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Action_Accept_RateLimit	`path:"rate-limit" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Action_Accept implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Action_Accept) IsYANGGoStruct() {}


// SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Action_Accept_RateLimit represents the /srl_nokia-acl/acl/cpm-filter/ipv6-filter/entry/action/accept/rate-limit YANG schema element.
type SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Action_Accept_RateLimit struct {
	DistributedPolicer	*string	`path:"distributed-policer" module:"srl_nokia-acl"`
	SystemCpuPolicer	*string	`path:"system-cpu-policer" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Action_Accept_RateLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Action_Accept_RateLimit) IsYANGGoStruct() {}


// SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Action_Drop represents the /srl_nokia-acl/acl/cpm-filter/ipv6-filter/entry/action/drop YANG schema element.
type SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Action_Drop struct {
	Log	*bool	`path:"log" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Action_Drop implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Action_Drop) IsYANGGoStruct() {}


// SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match represents the /srl_nokia-acl/acl/cpm-filter/ipv6-filter/entry/match YANG schema element.
type SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match struct {
	DestinationAddress	*string	`path:"destination-address" module:"srl_nokia-acl"`
	DestinationPort	*SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort	`path:"destination-port" module:"srl_nokia-acl"`
	Icmp6	*SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_Icmp6	`path:"icmp6" module:"srl_nokia-acl"`
	NextHeader	SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_NextHeader_Union	`path:"next-header" module:"srl_nokia-acl"`
	SourceAddress	*string	`path:"source-address" module:"srl_nokia-acl"`
	SourcePort	*SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort	`path:"source-port" module:"srl_nokia-acl"`
	TcpFlags	*string	`path:"tcp-flags" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match) IsYANGGoStruct() {}


// SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort represents the /srl_nokia-acl/acl/cpm-filter/ipv6-filter/entry/match/destination-port YANG schema element.
type SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort struct {
	Operator	E_SrlNokiaAcl_Operator	`path:"operator" module:"srl_nokia-acl"`
	Range	*SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Range	`path:"range" module:"srl_nokia-acl"`
	Value	SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Value_Union	`path:"value" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort) IsYANGGoStruct() {}


// SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Range represents the /srl_nokia-acl/acl/cpm-filter/ipv6-filter/entry/match/destination-port/range YANG schema element.
type SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Range struct {
	End	SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union	`path:"end" module:"srl_nokia-acl"`
	Start	SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union	`path:"start" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Range) IsYANGGoStruct() {}


// SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_Icmp6 represents the /srl_nokia-acl/acl/cpm-filter/ipv6-filter/entry/match/icmp6 YANG schema element.
type SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_Icmp6 struct {
	Code	[]uint8	`path:"code" module:"srl_nokia-acl"`
	Type	SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_Icmp6_Type_Union	`path:"type" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_Icmp6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_Icmp6) IsYANGGoStruct() {}


// SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort represents the /srl_nokia-acl/acl/cpm-filter/ipv6-filter/entry/match/source-port YANG schema element.
type SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort struct {
	Operator	E_SrlNokiaAcl_Operator	`path:"operator" module:"srl_nokia-acl"`
	Range	*SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Range	`path:"range" module:"srl_nokia-acl"`
	Value	SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Value_Union	`path:"value" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort) IsYANGGoStruct() {}


// SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Range represents the /srl_nokia-acl/acl/cpm-filter/ipv6-filter/entry/match/source-port/range YANG schema element.
type SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Range struct {
	End	SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union	`path:"end" module:"srl_nokia-acl"`
	Start	SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union	`path:"start" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Range) IsYANGGoStruct() {}


// SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Statistics represents the /srl_nokia-acl/acl/cpm-filter/ipv6-filter/entry/statistics YANG schema element.
type SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Statistics struct {
	LastClear	*string	`path:"last-clear" module:"srl_nokia-acl"`
	LastMatch	*string	`path:"last-match" module:"srl_nokia-acl"`
	MatchedPackets	*uint64	`path:"matched-packets" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Statistics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Statistics) IsYANGGoStruct() {}


// SrlNokiaAcl_Acl_Ipv4Filter represents the /srl_nokia-acl/acl/ipv4-filter YANG schema element.
type SrlNokiaAcl_Acl_Ipv4Filter struct {
	Description	*string	`path:"description" module:"srl_nokia-acl"`
	Entry	map[uint32]*SrlNokiaAcl_Acl_Ipv4Filter_Entry	`path:"entry" module:"srl_nokia-acl"`
	LastClear	*string	`path:"last-clear" module:"srl_nokia-acl"`
	Name	*string	`path:"name" module:"srl_nokia-acl"`
	Statistics	*SrlNokiaAcl_Acl_Ipv4Filter_Statistics	`path:"statistics" module:"srl_nokia-acl"`
	StatisticsPerEntry	*bool	`path:"statistics-per-entry" module:"srl_nokia-acl"`
	SubinterfaceSpecific	E_SrlNokiaAcl_Acl_Ipv4Filter_SubinterfaceSpecific	`path:"subinterface-specific" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_Ipv4Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_Ipv4Filter) IsYANGGoStruct() {}


// SrlNokiaAcl_Acl_Ipv4Filter_Entry represents the /srl_nokia-acl/acl/ipv4-filter/entry YANG schema element.
type SrlNokiaAcl_Acl_Ipv4Filter_Entry struct {
	Action	*SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action	`path:"action" module:"srl_nokia-acl"`
	Description	*string	`path:"description" module:"srl_nokia-acl"`
	Match	*SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match	`path:"match" module:"srl_nokia-acl"`
	SequenceId	*uint32	`path:"sequence-id" module:"srl_nokia-acl"`
	Statistics	*SrlNokiaAcl_Acl_Ipv4Filter_Entry_Statistics	`path:"statistics" module:"srl_nokia-acl"`
	TcamEntries	*SrlNokiaAcl_Acl_Ipv4Filter_Entry_TcamEntries	`path:"tcam-entries" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_Ipv4Filter_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_Ipv4Filter_Entry) IsYANGGoStruct() {}


// SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action represents the /srl_nokia-acl/acl/ipv4-filter/entry/action YANG schema element.
type SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action struct {
	Accept	*SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept	`path:"accept" module:"srl_nokia-acl"`
	Drop	*SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Drop	`path:"drop" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action) IsYANGGoStruct() {}


// SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept represents the /srl_nokia-acl/acl/ipv4-filter/entry/action/accept YANG schema element.
type SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept struct {
	Log	*bool	`path:"log" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Accept) IsYANGGoStruct() {}


// SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Drop represents the /srl_nokia-acl/acl/ipv4-filter/entry/action/drop YANG schema element.
type SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Drop struct {
	Log	*bool	`path:"log" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Drop implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_Ipv4Filter_Entry_Action_Drop) IsYANGGoStruct() {}


// SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match represents the /srl_nokia-acl/acl/ipv4-filter/entry/match YANG schema element.
type SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match struct {
	DestinationAddress	*string	`path:"destination-address" module:"srl_nokia-acl"`
	DestinationPort	*SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort	`path:"destination-port" module:"srl_nokia-acl"`
	FirstFragment	*bool	`path:"first-fragment" module:"srl_nokia-acl"`
	Fragment	*bool	`path:"fragment" module:"srl_nokia-acl"`
	Icmp	*SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Icmp	`path:"icmp" module:"srl_nokia-acl"`
	Protocol	SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Protocol_Union	`path:"protocol" module:"srl_nokia-acl"`
	SourceAddress	*string	`path:"source-address" module:"srl_nokia-acl"`
	SourcePort	*SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort	`path:"source-port" module:"srl_nokia-acl"`
	TcpFlags	*string	`path:"tcp-flags" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match) IsYANGGoStruct() {}


// SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort represents the /srl_nokia-acl/acl/ipv4-filter/entry/match/destination-port YANG schema element.
type SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort struct {
	Operator	E_SrlNokiaAcl_Operator	`path:"operator" module:"srl_nokia-acl"`
	Range	*SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range	`path:"range" module:"srl_nokia-acl"`
	Value	SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Value_Union	`path:"value" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort) IsYANGGoStruct() {}


// SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range represents the /srl_nokia-acl/acl/ipv4-filter/entry/match/destination-port/range YANG schema element.
type SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range struct {
	End	SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union	`path:"end" module:"srl_nokia-acl"`
	Start	SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union	`path:"start" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range) IsYANGGoStruct() {}


// SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Icmp represents the /srl_nokia-acl/acl/ipv4-filter/entry/match/icmp YANG schema element.
type SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Icmp struct {
	Code	[]uint8	`path:"code" module:"srl_nokia-acl"`
	Type	SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Icmp_Type_Union	`path:"type" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Icmp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Icmp) IsYANGGoStruct() {}


// SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort represents the /srl_nokia-acl/acl/ipv4-filter/entry/match/source-port YANG schema element.
type SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort struct {
	Operator	E_SrlNokiaAcl_Operator	`path:"operator" module:"srl_nokia-acl"`
	Range	*SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range	`path:"range" module:"srl_nokia-acl"`
	Value	SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Value_Union	`path:"value" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort) IsYANGGoStruct() {}


// SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range represents the /srl_nokia-acl/acl/ipv4-filter/entry/match/source-port/range YANG schema element.
type SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range struct {
	End	SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union	`path:"end" module:"srl_nokia-acl"`
	Start	SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union	`path:"start" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range) IsYANGGoStruct() {}


// SrlNokiaAcl_Acl_Ipv4Filter_Entry_Statistics represents the /srl_nokia-acl/acl/ipv4-filter/entry/statistics YANG schema element.
type SrlNokiaAcl_Acl_Ipv4Filter_Entry_Statistics struct {
	Aggregate	*SrlNokiaAcl_Acl_Ipv4Filter_Entry_Statistics_Aggregate	`path:"aggregate" module:"srl_nokia-acl"`
	LastClear	*string	`path:"last-clear" module:"srl_nokia-acl"`
	PerInterface	*SrlNokiaAcl_Acl_Ipv4Filter_Entry_Statistics_PerInterface	`path:"per-interface" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_Ipv4Filter_Entry_Statistics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_Ipv4Filter_Entry_Statistics) IsYANGGoStruct() {}


// SrlNokiaAcl_Acl_Ipv4Filter_Entry_Statistics_Aggregate represents the /srl_nokia-acl/acl/ipv4-filter/entry/statistics/aggregate YANG schema element.
type SrlNokiaAcl_Acl_Ipv4Filter_Entry_Statistics_Aggregate struct {
	InLastMatch	*string	`path:"in-last-match" module:"srl_nokia-acl"`
	InMatchedPackets	*uint64	`path:"in-matched-packets" module:"srl_nokia-acl"`
	OutLastMatch	*string	`path:"out-last-match" module:"srl_nokia-acl"`
	OutMatchedPackets	*uint64	`path:"out-matched-packets" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_Ipv4Filter_Entry_Statistics_Aggregate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_Ipv4Filter_Entry_Statistics_Aggregate) IsYANGGoStruct() {}


// SrlNokiaAcl_Acl_Ipv4Filter_Entry_Statistics_PerInterface represents the /srl_nokia-acl/acl/ipv4-filter/entry/statistics/per-interface YANG schema element.
type SrlNokiaAcl_Acl_Ipv4Filter_Entry_Statistics_PerInterface struct {
	Subinterface	map[string]*SrlNokiaAcl_Acl_Ipv4Filter_Entry_Statistics_PerInterface_Subinterface	`path:"subinterface" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_Ipv4Filter_Entry_Statistics_PerInterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_Ipv4Filter_Entry_Statistics_PerInterface) IsYANGGoStruct() {}


// SrlNokiaAcl_Acl_Ipv4Filter_Entry_Statistics_PerInterface_Subinterface represents the /srl_nokia-acl/acl/ipv4-filter/entry/statistics/per-interface/subinterface YANG schema element.
type SrlNokiaAcl_Acl_Ipv4Filter_Entry_Statistics_PerInterface_Subinterface struct {
	InLastMatch	*string	`path:"in-last-match" module:"srl_nokia-acl"`
	InMatchedPackets	*uint64	`path:"in-matched-packets" module:"srl_nokia-acl"`
	LastClear	*string	`path:"last-clear" module:"srl_nokia-acl"`
	Name	*string	`path:"name" module:"srl_nokia-acl"`
	OutLastMatch	*string	`path:"out-last-match" module:"srl_nokia-acl"`
	OutMatchedPackets	*uint64	`path:"out-matched-packets" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_Ipv4Filter_Entry_Statistics_PerInterface_Subinterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_Ipv4Filter_Entry_Statistics_PerInterface_Subinterface) IsYANGGoStruct() {}


// SrlNokiaAcl_Acl_Ipv4Filter_Entry_TcamEntries represents the /srl_nokia-acl/acl/ipv4-filter/entry/tcam-entries YANG schema element.
type SrlNokiaAcl_Acl_Ipv4Filter_Entry_TcamEntries struct {
	Linecard	map[uint8]*SrlNokiaAcl_Acl_Ipv4Filter_Entry_TcamEntries_Linecard	`path:"linecard" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_Ipv4Filter_Entry_TcamEntries implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_Ipv4Filter_Entry_TcamEntries) IsYANGGoStruct() {}


// SrlNokiaAcl_Acl_Ipv4Filter_Entry_TcamEntries_Linecard represents the /srl_nokia-acl/acl/ipv4-filter/entry/tcam-entries/linecard YANG schema element.
type SrlNokiaAcl_Acl_Ipv4Filter_Entry_TcamEntries_Linecard struct {
	InputTotal	*uint16	`path:"input-total" module:"srl_nokia-acl"`
	OutputTotal	*uint16	`path:"output-total" module:"srl_nokia-acl"`
	SingleInstance	*uint16	`path:"single-instance" module:"srl_nokia-acl"`
	Slot	*uint8	`path:"slot" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_Ipv4Filter_Entry_TcamEntries_Linecard implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_Ipv4Filter_Entry_TcamEntries_Linecard) IsYANGGoStruct() {}


// SrlNokiaAcl_Acl_Ipv4Filter_Statistics represents the /srl_nokia-acl/acl/ipv4-filter/statistics YANG schema element.
type SrlNokiaAcl_Acl_Ipv4Filter_Statistics struct {
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_Ipv4Filter_Statistics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_Ipv4Filter_Statistics) IsYANGGoStruct() {}


// SrlNokiaAcl_Acl_Ipv6Filter represents the /srl_nokia-acl/acl/ipv6-filter YANG schema element.
type SrlNokiaAcl_Acl_Ipv6Filter struct {
	Description	*string	`path:"description" module:"srl_nokia-acl"`
	Entry	map[uint32]*SrlNokiaAcl_Acl_Ipv6Filter_Entry	`path:"entry" module:"srl_nokia-acl"`
	LastClear	*string	`path:"last-clear" module:"srl_nokia-acl"`
	Name	*string	`path:"name" module:"srl_nokia-acl"`
	Statistics	*SrlNokiaAcl_Acl_Ipv6Filter_Statistics	`path:"statistics" module:"srl_nokia-acl"`
	StatisticsPerEntry	*bool	`path:"statistics-per-entry" module:"srl_nokia-acl"`
	SubinterfaceSpecific	E_SrlNokiaAcl_Acl_Ipv6Filter_SubinterfaceSpecific	`path:"subinterface-specific" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_Ipv6Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_Ipv6Filter) IsYANGGoStruct() {}


// SrlNokiaAcl_Acl_Ipv6Filter_Entry represents the /srl_nokia-acl/acl/ipv6-filter/entry YANG schema element.
type SrlNokiaAcl_Acl_Ipv6Filter_Entry struct {
	Action	*SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action	`path:"action" module:"srl_nokia-acl"`
	Description	*string	`path:"description" module:"srl_nokia-acl"`
	Match	*SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match	`path:"match" module:"srl_nokia-acl"`
	SequenceId	*uint32	`path:"sequence-id" module:"srl_nokia-acl"`
	Statistics	*SrlNokiaAcl_Acl_Ipv6Filter_Entry_Statistics	`path:"statistics" module:"srl_nokia-acl"`
	TcamEntries	*SrlNokiaAcl_Acl_Ipv6Filter_Entry_TcamEntries	`path:"tcam-entries" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_Ipv6Filter_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_Ipv6Filter_Entry) IsYANGGoStruct() {}


// SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action represents the /srl_nokia-acl/acl/ipv6-filter/entry/action YANG schema element.
type SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action struct {
	Accept	*SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept	`path:"accept" module:"srl_nokia-acl"`
	Drop	*SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Drop	`path:"drop" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action) IsYANGGoStruct() {}


// SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept represents the /srl_nokia-acl/acl/ipv6-filter/entry/action/accept YANG schema element.
type SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept struct {
	Log	*bool	`path:"log" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Accept) IsYANGGoStruct() {}


// SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Drop represents the /srl_nokia-acl/acl/ipv6-filter/entry/action/drop YANG schema element.
type SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Drop struct {
	Log	*bool	`path:"log" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Drop implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_Ipv6Filter_Entry_Action_Drop) IsYANGGoStruct() {}


// SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match represents the /srl_nokia-acl/acl/ipv6-filter/entry/match YANG schema element.
type SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match struct {
	DestinationAddress	*string	`path:"destination-address" module:"srl_nokia-acl"`
	DestinationPort	*SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort	`path:"destination-port" module:"srl_nokia-acl"`
	Icmp6	*SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_Icmp6	`path:"icmp6" module:"srl_nokia-acl"`
	NextHeader	SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_NextHeader_Union	`path:"next-header" module:"srl_nokia-acl"`
	SourceAddress	*string	`path:"source-address" module:"srl_nokia-acl"`
	SourcePort	*SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort	`path:"source-port" module:"srl_nokia-acl"`
	TcpFlags	*string	`path:"tcp-flags" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match) IsYANGGoStruct() {}


// SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort represents the /srl_nokia-acl/acl/ipv6-filter/entry/match/destination-port YANG schema element.
type SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort struct {
	Operator	E_SrlNokiaAcl_Operator	`path:"operator" module:"srl_nokia-acl"`
	Range	*SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range	`path:"range" module:"srl_nokia-acl"`
	Value	SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Value_Union	`path:"value" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort) IsYANGGoStruct() {}


// SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range represents the /srl_nokia-acl/acl/ipv6-filter/entry/match/destination-port/range YANG schema element.
type SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range struct {
	End	SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union	`path:"end" module:"srl_nokia-acl"`
	Start	SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union	`path:"start" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range) IsYANGGoStruct() {}


// SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_Icmp6 represents the /srl_nokia-acl/acl/ipv6-filter/entry/match/icmp6 YANG schema element.
type SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_Icmp6 struct {
	Code	[]uint8	`path:"code" module:"srl_nokia-acl"`
	Type	SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_Icmp6_Type_Union	`path:"type" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_Icmp6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_Icmp6) IsYANGGoStruct() {}


// SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort represents the /srl_nokia-acl/acl/ipv6-filter/entry/match/source-port YANG schema element.
type SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort struct {
	Operator	E_SrlNokiaAcl_Operator	`path:"operator" module:"srl_nokia-acl"`
	Range	*SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range	`path:"range" module:"srl_nokia-acl"`
	Value	SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Value_Union	`path:"value" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort) IsYANGGoStruct() {}


// SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range represents the /srl_nokia-acl/acl/ipv6-filter/entry/match/source-port/range YANG schema element.
type SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range struct {
	End	SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union	`path:"end" module:"srl_nokia-acl"`
	Start	SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union	`path:"start" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range) IsYANGGoStruct() {}


// SrlNokiaAcl_Acl_Ipv6Filter_Entry_Statistics represents the /srl_nokia-acl/acl/ipv6-filter/entry/statistics YANG schema element.
type SrlNokiaAcl_Acl_Ipv6Filter_Entry_Statistics struct {
	Aggregate	*SrlNokiaAcl_Acl_Ipv6Filter_Entry_Statistics_Aggregate	`path:"aggregate" module:"srl_nokia-acl"`
	LastClear	*string	`path:"last-clear" module:"srl_nokia-acl"`
	PerInterface	*SrlNokiaAcl_Acl_Ipv6Filter_Entry_Statistics_PerInterface	`path:"per-interface" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_Ipv6Filter_Entry_Statistics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_Ipv6Filter_Entry_Statistics) IsYANGGoStruct() {}


// SrlNokiaAcl_Acl_Ipv6Filter_Entry_Statistics_Aggregate represents the /srl_nokia-acl/acl/ipv6-filter/entry/statistics/aggregate YANG schema element.
type SrlNokiaAcl_Acl_Ipv6Filter_Entry_Statistics_Aggregate struct {
	InLastMatch	*string	`path:"in-last-match" module:"srl_nokia-acl"`
	InMatchedPackets	*uint64	`path:"in-matched-packets" module:"srl_nokia-acl"`
	OutLastMatch	*string	`path:"out-last-match" module:"srl_nokia-acl"`
	OutMatchedPackets	*uint64	`path:"out-matched-packets" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_Ipv6Filter_Entry_Statistics_Aggregate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_Ipv6Filter_Entry_Statistics_Aggregate) IsYANGGoStruct() {}


// SrlNokiaAcl_Acl_Ipv6Filter_Entry_Statistics_PerInterface represents the /srl_nokia-acl/acl/ipv6-filter/entry/statistics/per-interface YANG schema element.
type SrlNokiaAcl_Acl_Ipv6Filter_Entry_Statistics_PerInterface struct {
	Subinterface	map[string]*SrlNokiaAcl_Acl_Ipv6Filter_Entry_Statistics_PerInterface_Subinterface	`path:"subinterface" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_Ipv6Filter_Entry_Statistics_PerInterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_Ipv6Filter_Entry_Statistics_PerInterface) IsYANGGoStruct() {}


// SrlNokiaAcl_Acl_Ipv6Filter_Entry_Statistics_PerInterface_Subinterface represents the /srl_nokia-acl/acl/ipv6-filter/entry/statistics/per-interface/subinterface YANG schema element.
type SrlNokiaAcl_Acl_Ipv6Filter_Entry_Statistics_PerInterface_Subinterface struct {
	InLastMatch	*string	`path:"in-last-match" module:"srl_nokia-acl"`
	InMatchedPackets	*uint64	`path:"in-matched-packets" module:"srl_nokia-acl"`
	LastClear	*string	`path:"last-clear" module:"srl_nokia-acl"`
	Name	*string	`path:"name" module:"srl_nokia-acl"`
	OutLastMatch	*string	`path:"out-last-match" module:"srl_nokia-acl"`
	OutMatchedPackets	*uint64	`path:"out-matched-packets" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_Ipv6Filter_Entry_Statistics_PerInterface_Subinterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_Ipv6Filter_Entry_Statistics_PerInterface_Subinterface) IsYANGGoStruct() {}


// SrlNokiaAcl_Acl_Ipv6Filter_Entry_TcamEntries represents the /srl_nokia-acl/acl/ipv6-filter/entry/tcam-entries YANG schema element.
type SrlNokiaAcl_Acl_Ipv6Filter_Entry_TcamEntries struct {
	Linecard	map[uint8]*SrlNokiaAcl_Acl_Ipv6Filter_Entry_TcamEntries_Linecard	`path:"linecard" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_Ipv6Filter_Entry_TcamEntries implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_Ipv6Filter_Entry_TcamEntries) IsYANGGoStruct() {}


// SrlNokiaAcl_Acl_Ipv6Filter_Entry_TcamEntries_Linecard represents the /srl_nokia-acl/acl/ipv6-filter/entry/tcam-entries/linecard YANG schema element.
type SrlNokiaAcl_Acl_Ipv6Filter_Entry_TcamEntries_Linecard struct {
	InputTotal	*uint16	`path:"input-total" module:"srl_nokia-acl"`
	OutputTotal	*uint16	`path:"output-total" module:"srl_nokia-acl"`
	SingleInstance	*uint16	`path:"single-instance" module:"srl_nokia-acl"`
	Slot	*uint8	`path:"slot" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_Ipv6Filter_Entry_TcamEntries_Linecard implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_Ipv6Filter_Entry_TcamEntries_Linecard) IsYANGGoStruct() {}


// SrlNokiaAcl_Acl_Ipv6Filter_Statistics represents the /srl_nokia-acl/acl/ipv6-filter/statistics YANG schema element.
type SrlNokiaAcl_Acl_Ipv6Filter_Statistics struct {
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_Ipv6Filter_Statistics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_Ipv6Filter_Statistics) IsYANGGoStruct() {}


// SrlNokiaAcl_Acl_Policers represents the /srl_nokia-acl/acl/policers YANG schema element.
type SrlNokiaAcl_Acl_Policers struct {
	Policer	map[string]*SrlNokiaAcl_Acl_Policers_Policer	`path:"policer" module:"srl_nokia-acl"`
	SystemCpuPolicer	map[string]*SrlNokiaAcl_Acl_Policers_SystemCpuPolicer	`path:"system-cpu-policer" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_Policers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_Policers) IsYANGGoStruct() {}


// SrlNokiaAcl_Acl_Policers_Policer represents the /srl_nokia-acl/acl/policers/policer YANG schema element.
type SrlNokiaAcl_Acl_Policers_Policer struct {
	EntrySpecific	*bool	`path:"entry-specific" module:"srl_nokia-acl"`
	MaxBurst	*uint32	`path:"max-burst" module:"srl_nokia-acl"`
	Name	*string	`path:"name" module:"srl_nokia-acl"`
	PeakRate	*uint32	`path:"peak-rate" module:"srl_nokia-acl"`
	Statistics	*SrlNokiaAcl_Acl_Policers_Policer_Statistics	`path:"statistics" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_Policers_Policer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_Policers_Policer) IsYANGGoStruct() {}


// SrlNokiaAcl_Acl_Policers_Policer_Statistics represents the /srl_nokia-acl/acl/policers/policer/statistics YANG schema element.
type SrlNokiaAcl_Acl_Policers_Policer_Statistics struct {
	ConformingOctets	*uint64	`path:"conforming-octets" module:"srl_nokia-acl"`
	ConformingPackets	*uint64	`path:"conforming-packets" module:"srl_nokia-acl"`
	ExceedingOctets	*uint64	`path:"exceeding-octets" module:"srl_nokia-acl"`
	ExceedingPackets	*uint64	`path:"exceeding-packets" module:"srl_nokia-acl"`
	LastClear	*string	`path:"last-clear" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_Policers_Policer_Statistics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_Policers_Policer_Statistics) IsYANGGoStruct() {}


// SrlNokiaAcl_Acl_Policers_SystemCpuPolicer represents the /srl_nokia-acl/acl/policers/system-cpu-policer YANG schema element.
type SrlNokiaAcl_Acl_Policers_SystemCpuPolicer struct {
	EntrySpecific	*bool	`path:"entry-specific" module:"srl_nokia-acl"`
	MaxPacketBurst	*uint32	`path:"max-packet-burst" module:"srl_nokia-acl"`
	Name	*string	`path:"name" module:"srl_nokia-acl"`
	PeakPacketRate	*uint32	`path:"peak-packet-rate" module:"srl_nokia-acl"`
	Statistics	*SrlNokiaAcl_Acl_Policers_SystemCpuPolicer_Statistics	`path:"statistics" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_Policers_SystemCpuPolicer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_Policers_SystemCpuPolicer) IsYANGGoStruct() {}


// SrlNokiaAcl_Acl_Policers_SystemCpuPolicer_Statistics represents the /srl_nokia-acl/acl/policers/system-cpu-policer/statistics YANG schema element.
type SrlNokiaAcl_Acl_Policers_SystemCpuPolicer_Statistics struct {
	ConformingOctets	*uint64	`path:"conforming-octets" module:"srl_nokia-acl"`
	ConformingPackets	*uint64	`path:"conforming-packets" module:"srl_nokia-acl"`
	ExceedingOctets	*uint64	`path:"exceeding-octets" module:"srl_nokia-acl"`
	ExceedingPackets	*uint64	`path:"exceeding-packets" module:"srl_nokia-acl"`
	LastClear	*string	`path:"last-clear" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaAcl_Acl_Policers_SystemCpuPolicer_Statistics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaAcl_Acl_Policers_SystemCpuPolicer_Statistics) IsYANGGoStruct() {}


// SrlNokiaBfd_Bfd represents the /srl_nokia-bfd/bfd YANG schema element.
type SrlNokiaBfd_Bfd struct {
	NetworkInstance	map[string]*SrlNokiaBfd_Bfd_NetworkInstance	`path:"network-instance" module:"srl_nokia-bfd"`
	Subinterface	map[string]*SrlNokiaBfd_Bfd_Subinterface	`path:"subinterface" module:"srl_nokia-bfd"`
	TotalBfdSessions	*uint32	`path:"total-bfd-sessions" module:"srl_nokia-bfd"`
	TotalUnmatchedBfdPackets	*uint64	`path:"total-unmatched-bfd-packets" module:"srl_nokia-bfd"`
}

// IsYANGGoStruct ensures that SrlNokiaBfd_Bfd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaBfd_Bfd) IsYANGGoStruct() {}


// SrlNokiaBfd_Bfd_NetworkInstance represents the /srl_nokia-bfd/bfd/network-instance YANG schema element.
type SrlNokiaBfd_Bfd_NetworkInstance struct {
	Name	*string	`path:"name" module:"srl_nokia-bfd"`
	Peer	map[uint32]*SrlNokiaBfd_Bfd_NetworkInstance_Peer	`path:"peer" module:"srl_nokia-bfd"`
}

// IsYANGGoStruct ensures that SrlNokiaBfd_Bfd_NetworkInstance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaBfd_Bfd_NetworkInstance) IsYANGGoStruct() {}


// SrlNokiaBfd_Bfd_NetworkInstance_Peer represents the /srl_nokia-bfd/bfd/network-instance/peer YANG schema element.
type SrlNokiaBfd_Bfd_NetworkInstance_Peer struct {
	ActiveReceiveInterval	*uint32	`path:"active-receive-interval" module:"srl_nokia-bfd"`
	ActiveTransmitInterval	*uint32	`path:"active-transmit-interval" module:"srl_nokia-bfd"`
	Async	*SrlNokiaBfd_Bfd_NetworkInstance_Peer_Async	`path:"async" module:"srl_nokia-bfd"`
	FailureTransitions	*uint64	`path:"failure-transitions" module:"srl_nokia-bfd"`
	LastFailureTime	*string	`path:"last-failure-time" module:"srl_nokia-bfd"`
	LastStateTransition	*string	`path:"last-state-transition" module:"srl_nokia-bfd"`
	LocalAddress	*string	`path:"local-address" module:"srl_nokia-bfd"`
	LocalDiagnosticCode	E_SrlNokiaBfd_BfdDiagnosticCode	`path:"local-diagnostic-code" module:"srl_nokia-bfd"`
	LocalDiscriminator	*uint32	`path:"local-discriminator" module:"srl_nokia-bfd"`
	OperState	E_SrlNokiaBfd_OperState	`path:"oper-state" module:"srl_nokia-bfd"`
	RemoteAddress	*string	`path:"remote-address" module:"srl_nokia-bfd"`
	RemoteControlPlaneIndependent	*bool	`path:"remote-control-plane-independent" module:"srl_nokia-bfd"`
	RemoteDiagnosticCode	E_SrlNokiaBfd_BfdDiagnosticCode	`path:"remote-diagnostic-code" module:"srl_nokia-bfd"`
	RemoteDiscriminator	*uint32	`path:"remote-discriminator" module:"srl_nokia-bfd"`
	RemoteMinimumReceiveInterval	*uint32	`path:"remote-minimum-receive-interval" module:"srl_nokia-bfd"`
	RemoteMultiplier	*uint8	`path:"remote-multiplier" module:"srl_nokia-bfd"`
	RemoteSessionState	E_SrlNokiaBfd_BfdSessionState	`path:"remote-session-state" module:"srl_nokia-bfd"`
	SessionState	E_SrlNokiaBfd_BfdSessionState	`path:"session-state" module:"srl_nokia-bfd"`
	SubscribedProtocols	*string	`path:"subscribed-protocols" module:"srl_nokia-bfd"`
}

// IsYANGGoStruct ensures that SrlNokiaBfd_Bfd_NetworkInstance_Peer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaBfd_Bfd_NetworkInstance_Peer) IsYANGGoStruct() {}


// SrlNokiaBfd_Bfd_NetworkInstance_Peer_Async represents the /srl_nokia-bfd/bfd/network-instance/peer/async YANG schema element.
type SrlNokiaBfd_Bfd_NetworkInstance_Peer_Async struct {
	LastClear	*string	`path:"last-clear" module:"srl_nokia-bfd"`
	LastPacketReceived	*string	`path:"last-packet-received" module:"srl_nokia-bfd"`
	LastPacketTransmitted	*string	`path:"last-packet-transmitted" module:"srl_nokia-bfd"`
	ReceivedErroredPackets	*uint64	`path:"received-errored-packets" module:"srl_nokia-bfd"`
	ReceivedPackets	*uint64	`path:"received-packets" module:"srl_nokia-bfd"`
	TransmittedPackets	*uint64	`path:"transmitted-packets" module:"srl_nokia-bfd"`
	UpTransitions	*uint64	`path:"up-transitions" module:"srl_nokia-bfd"`
}

// IsYANGGoStruct ensures that SrlNokiaBfd_Bfd_NetworkInstance_Peer_Async implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaBfd_Bfd_NetworkInstance_Peer_Async) IsYANGGoStruct() {}


// SrlNokiaBfd_Bfd_Subinterface represents the /srl_nokia-bfd/bfd/subinterface YANG schema element.
type SrlNokiaBfd_Bfd_Subinterface struct {
	AdminState	E_SrlNokiaBfd_AdminState	`path:"admin-state" module:"srl_nokia-bfd"`
	DesiredMinimumTransmitInterval	*uint32	`path:"desired-minimum-transmit-interval" module:"srl_nokia-bfd"`
	DetectionMultiplier	*uint8	`path:"detection-multiplier" module:"srl_nokia-bfd"`
	Id	*string	`path:"id" module:"srl_nokia-bfd"`
	MinimumEchoReceiveInterval	*uint32	`path:"minimum-echo-receive-interval" module:"srl_nokia-bfd"`
	RequiredMinimumReceive	*uint32	`path:"required-minimum-receive" module:"srl_nokia-bfd"`
}

// IsYANGGoStruct ensures that SrlNokiaBfd_Bfd_Subinterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaBfd_Bfd_Subinterface) IsYANGGoStruct() {}


// SrlNokiaInterfaces_Interface represents the /srl_nokia-interfaces/interface YANG schema element.
type SrlNokiaInterfaces_Interface struct {
	AdminState	E_SrlNokiaInterfaces_AdminState	`path:"admin-state" module:"srl_nokia-interfaces"`
	Description	*string	`path:"description" module:"srl_nokia-interfaces"`
	Ethernet	*SrlNokiaInterfaces_Interface_Ethernet	`path:"ethernet" module:"srl_nokia-interfaces"`
	Ifindex	*uint32	`path:"ifindex" module:"srl_nokia-interfaces"`
	LastChange	*string	`path:"last-change" module:"srl_nokia-interfaces"`
	Mtu	*uint16	`path:"mtu" module:"srl_nokia-interfaces"`
	Name	*string	`path:"name" module:"srl_nokia-interfaces"`
	OperDownReason	E_SrlNokiaInterfaces_PortOperDownReason	`path:"oper-down-reason" module:"srl_nokia-interfaces"`
	OperState	E_SrlNokiaInterfaces_Interface_OperState	`path:"oper-state" module:"srl_nokia-interfaces"`
	Qos	*SrlNokiaInterfaces_Interface_Qos	`path:"qos" module:"srl_nokia-qos"`
	QueueStatistics	*SrlNokiaInterfaces_Interface_QueueStatistics	`path:"queue-statistics" module:"srl_nokia-qos"`
	Sflow	*SrlNokiaInterfaces_Interface_Sflow	`path:"sflow" module:"srl_nokia-sflow"`
	Statistics	*SrlNokiaInterfaces_Interface_Statistics	`path:"statistics" module:"srl_nokia-interfaces"`
	Subinterface	map[uint32]*SrlNokiaInterfaces_Interface_Subinterface	`path:"subinterface" module:"srl_nokia-interfaces"`
	TrafficRate	*SrlNokiaInterfaces_Interface_TrafficRate	`path:"traffic-rate" module:"srl_nokia-interfaces"`
	Transceiver	*SrlNokiaInterfaces_Interface_Transceiver	`path:"transceiver" module:"srl_nokia-interfaces"`
	VlanTagging	*bool	`path:"vlan-tagging" module:"srl_nokia-interfaces-vlans"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface) IsYANGGoStruct() {}


// SrlNokiaInterfaces_Interface_Ethernet represents the /srl_nokia-interfaces/interface/ethernet YANG schema element.
type SrlNokiaInterfaces_Interface_Ethernet struct {
	FlowControl	*SrlNokiaInterfaces_Interface_Ethernet_FlowControl	`path:"flow-control" module:"srl_nokia-interfaces"`
	HwMacAddress	*string	`path:"hw-mac-address" module:"srl_nokia-interfaces"`
	PortSpeed	E_SrlNokiaInterfaces_Interface_Ethernet_PortSpeed	`path:"port-speed" module:"srl_nokia-interfaces"`
	Statistics	*SrlNokiaInterfaces_Interface_Ethernet_Statistics	`path:"statistics" module:"srl_nokia-interfaces"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Ethernet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Ethernet) IsYANGGoStruct() {}


// SrlNokiaInterfaces_Interface_Ethernet_FlowControl represents the /srl_nokia-interfaces/interface/ethernet/flow-control YANG schema element.
type SrlNokiaInterfaces_Interface_Ethernet_FlowControl struct {
	Receive	*bool	`path:"receive" module:"srl_nokia-interfaces"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Ethernet_FlowControl implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Ethernet_FlowControl) IsYANGGoStruct() {}


// SrlNokiaInterfaces_Interface_Ethernet_Statistics represents the /srl_nokia-interfaces/interface/ethernet/statistics YANG schema element.
type SrlNokiaInterfaces_Interface_Ethernet_Statistics struct {
	In_1024BTo_1518BFrames	*uint64	`path:"in-1024b-to-1518b-frames" module:"srl_nokia-interfaces"`
	In_128BTo_255BFrames	*uint64	`path:"in-128b-to-255b-frames" module:"srl_nokia-interfaces"`
	In_1519BOrLongerFrames	*uint64	`path:"in-1519b-or-longer-frames" module:"srl_nokia-interfaces"`
	In_256BTo_511BFrames	*uint64	`path:"in-256b-to-511b-frames" module:"srl_nokia-interfaces"`
	In_512BTo_1023BFrames	*uint64	`path:"in-512b-to-1023b-frames" module:"srl_nokia-interfaces"`
	In_64BFrames	*uint64	`path:"in-64b-frames" module:"srl_nokia-interfaces"`
	In_65BTo_127BFrames	*uint64	`path:"in-65b-to-127b-frames" module:"srl_nokia-interfaces"`
	InCrcErrorFrames	*uint64	`path:"in-crc-error-frames" module:"srl_nokia-interfaces"`
	InFragmentFrames	*uint64	`path:"in-fragment-frames" module:"srl_nokia-interfaces"`
	InJabberFrames	*uint64	`path:"in-jabber-frames" module:"srl_nokia-interfaces"`
	InMacPauseFrames	*uint64	`path:"in-mac-pause-frames" module:"srl_nokia-interfaces"`
	InOversizeFrames	*uint64	`path:"in-oversize-frames" module:"srl_nokia-interfaces"`
	LastClear	*string	`path:"last-clear" module:"srl_nokia-interfaces"`
	Out_1024BTo_1518BFrames	*uint64	`path:"out-1024b-to-1518b-frames" module:"srl_nokia-interfaces"`
	Out_128BTo_255BFrames	*uint64	`path:"out-128b-to-255b-frames" module:"srl_nokia-interfaces"`
	Out_1519BOrLongerFrames	*uint64	`path:"out-1519b-or-longer-frames" module:"srl_nokia-interfaces"`
	Out_256BTo_511BFrames	*uint64	`path:"out-256b-to-511b-frames" module:"srl_nokia-interfaces"`
	Out_512BTo_1023BFrames	*uint64	`path:"out-512b-to-1023b-frames" module:"srl_nokia-interfaces"`
	Out_64BFrames	*uint64	`path:"out-64b-frames" module:"srl_nokia-interfaces"`
	Out_65BTo_127BFrames	*uint64	`path:"out-65b-to-127b-frames" module:"srl_nokia-interfaces"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Ethernet_Statistics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Ethernet_Statistics) IsYANGGoStruct() {}


// SrlNokiaInterfaces_Interface_Qos represents the /srl_nokia-interfaces/interface/qos YANG schema element.
type SrlNokiaInterfaces_Interface_Qos struct {
	Output	*SrlNokiaInterfaces_Interface_Qos_Output	`path:"output" module:"srl_nokia-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Qos) IsYANGGoStruct() {}


// SrlNokiaInterfaces_Interface_Qos_Output represents the /srl_nokia-interfaces/interface/qos/output YANG schema element.
type SrlNokiaInterfaces_Interface_Qos_Output struct {
	Queue	map[uint8]*SrlNokiaInterfaces_Interface_Qos_Output_Queue	`path:"queue" module:"srl_nokia-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Qos_Output implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Qos_Output) IsYANGGoStruct() {}


// SrlNokiaInterfaces_Interface_Qos_Output_Queue represents the /srl_nokia-interfaces/interface/qos/output/queue YANG schema element.
type SrlNokiaInterfaces_Interface_Qos_Output_Queue struct {
	QueueId	*uint8	`path:"queue-id" module:"srl_nokia-qos"`
	QueueScheduler	*SrlNokiaInterfaces_Interface_Qos_Output_Queue_QueueScheduler	`path:"queue-scheduler" module:"srl_nokia-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Qos_Output_Queue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Qos_Output_Queue) IsYANGGoStruct() {}


// SrlNokiaInterfaces_Interface_Qos_Output_Queue_QueueScheduler represents the /srl_nokia-interfaces/interface/qos/output/queue/queue-scheduler YANG schema element.
type SrlNokiaInterfaces_Interface_Qos_Output_Queue_QueueScheduler struct {
	StrictPriority	*bool	`path:"strict-priority" module:"srl_nokia-qos"`
	Weight	*uint64	`path:"weight" module:"srl_nokia-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Qos_Output_Queue_QueueScheduler implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Qos_Output_Queue_QueueScheduler) IsYANGGoStruct() {}


// SrlNokiaInterfaces_Interface_QueueStatistics represents the /srl_nokia-interfaces/interface/queue-statistics YANG schema element.
type SrlNokiaInterfaces_Interface_QueueStatistics struct {
	Queue	map[uint8]*SrlNokiaInterfaces_Interface_QueueStatistics_Queue	`path:"queue" module:"srl_nokia-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_QueueStatistics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_QueueStatistics) IsYANGGoStruct() {}


// SrlNokiaInterfaces_Interface_QueueStatistics_Queue represents the /srl_nokia-interfaces/interface/queue-statistics/queue YANG schema element.
type SrlNokiaInterfaces_Interface_QueueStatistics_Queue struct {
	FinalDroppedOctets	*uint64	`path:"final-dropped-octets" module:"srl_nokia-qos"`
	FinalDroppedPackets	*uint64	`path:"final-dropped-packets" module:"srl_nokia-qos"`
	LastClear	*string	`path:"last-clear" module:"srl_nokia-qos"`
	QueueId	*uint8	`path:"queue-id" module:"srl_nokia-qos"`
	TransmittedOctets	*uint64	`path:"transmitted-octets" module:"srl_nokia-qos"`
	TransmittedPackets	*uint64	`path:"transmitted-packets" module:"srl_nokia-qos"`
	VirtualOutputQueue	map[uint8]*SrlNokiaInterfaces_Interface_QueueStatistics_Queue_VirtualOutputQueue	`path:"virtual-output-queue" module:"srl_nokia-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_QueueStatistics_Queue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_QueueStatistics_Queue) IsYANGGoStruct() {}


// SrlNokiaInterfaces_Interface_QueueStatistics_Queue_VirtualOutputQueue represents the /srl_nokia-interfaces/interface/queue-statistics/queue/virtual-output-queue YANG schema element.
type SrlNokiaInterfaces_Interface_QueueStatistics_Queue_VirtualOutputQueue struct {
	DroppedOctets	*uint64	`path:"dropped-octets" module:"srl_nokia-qos"`
	DroppedPackets	*uint64	`path:"dropped-packets" module:"srl_nokia-qos"`
	ForwardedOctets	*uint64	`path:"forwarded-octets" module:"srl_nokia-qos"`
	ForwardedPackets	*uint64	`path:"forwarded-packets" module:"srl_nokia-qos"`
	Slot	*uint8	`path:"slot" module:"srl_nokia-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_QueueStatistics_Queue_VirtualOutputQueue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_QueueStatistics_Queue_VirtualOutputQueue) IsYANGGoStruct() {}


// SrlNokiaInterfaces_Interface_Sflow represents the /srl_nokia-interfaces/interface/sflow YANG schema element.
type SrlNokiaInterfaces_Interface_Sflow struct {
	AdminState	E_SrlNokiaSflow_AdminState	`path:"admin-state" module:"srl_nokia-sflow"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Sflow implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Sflow) IsYANGGoStruct() {}


// SrlNokiaInterfaces_Interface_Statistics represents the /srl_nokia-interfaces/interface/statistics YANG schema element.
type SrlNokiaInterfaces_Interface_Statistics struct {
	CarrierTransitions	*uint64	`path:"carrier-transitions" module:"srl_nokia-interfaces"`
	InBroadcastPackets	*uint64	`path:"in-broadcast-packets" module:"srl_nokia-interfaces"`
	InErrorPackets	*uint64	`path:"in-error-packets" module:"srl_nokia-interfaces"`
	InFcsErrorPackets	*uint64	`path:"in-fcs-error-packets" module:"srl_nokia-interfaces"`
	InMulticastPackets	*uint64	`path:"in-multicast-packets" module:"srl_nokia-interfaces"`
	InOctets	*uint64	`path:"in-octets" module:"srl_nokia-interfaces"`
	InUnicastPackets	*uint64	`path:"in-unicast-packets" module:"srl_nokia-interfaces"`
	LastClear	*string	`path:"last-clear" module:"srl_nokia-interfaces"`
	OutBroadcastPackets	*uint64	`path:"out-broadcast-packets" module:"srl_nokia-interfaces"`
	OutErrorPackets	*uint64	`path:"out-error-packets" module:"srl_nokia-interfaces"`
	OutMulticastPackets	*uint64	`path:"out-multicast-packets" module:"srl_nokia-interfaces"`
	OutOctets	*uint64	`path:"out-octets" module:"srl_nokia-interfaces"`
	OutUnicastPackets	*uint64	`path:"out-unicast-packets" module:"srl_nokia-interfaces"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Statistics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Statistics) IsYANGGoStruct() {}


// SrlNokiaInterfaces_Interface_Subinterface represents the /srl_nokia-interfaces/interface/subinterface YANG schema element.
type SrlNokiaInterfaces_Interface_Subinterface struct {
	Acl	*SrlNokiaInterfaces_Interface_Subinterface_Acl	`path:"acl" module:"srl_nokia-acl"`
	AdminState	E_SrlNokiaInterfaces_AdminState	`path:"admin-state" module:"srl_nokia-interfaces"`
	Description	*string	`path:"description" module:"srl_nokia-interfaces"`
	Index	*uint32	`path:"index" module:"srl_nokia-interfaces"`
	IpMtu	*uint16	`path:"ip-mtu" module:"srl_nokia-interfaces"`
	Ipv4	*SrlNokiaInterfaces_Interface_Subinterface_Ipv4	`path:"ipv4" module:"srl_nokia-interfaces"`
	Ipv6	*SrlNokiaInterfaces_Interface_Subinterface_Ipv6	`path:"ipv6" module:"srl_nokia-interfaces"`
	LastChange	*string	`path:"last-change" module:"srl_nokia-interfaces"`
	Name	*string	`path:"name" module:"srl_nokia-interfaces"`
	OperDownReason	E_SrlNokiaInterfaces_SubifOperDownReason	`path:"oper-down-reason" module:"srl_nokia-interfaces"`
	OperState	E_SrlNokiaInterfaces_Interface_Subinterface_OperState	`path:"oper-state" module:"srl_nokia-interfaces"`
	Qos	*SrlNokiaInterfaces_Interface_Subinterface_Qos	`path:"qos" module:"srl_nokia-qos"`
	Statistics	*SrlNokiaInterfaces_Interface_Subinterface_Statistics	`path:"statistics" module:"srl_nokia-interfaces"`
	Vlan	*SrlNokiaInterfaces_Interface_Subinterface_Vlan	`path:"vlan" module:"srl_nokia-interfaces-vlans"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Subinterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Subinterface) IsYANGGoStruct() {}


// SrlNokiaInterfaces_Interface_Subinterface_Acl represents the /srl_nokia-interfaces/interface/subinterface/acl YANG schema element.
type SrlNokiaInterfaces_Interface_Subinterface_Acl struct {
	Input	*SrlNokiaInterfaces_Interface_Subinterface_Acl_Input	`path:"input" module:"srl_nokia-acl"`
	Output	*SrlNokiaInterfaces_Interface_Subinterface_Acl_Output	`path:"output" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Subinterface_Acl implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Subinterface_Acl) IsYANGGoStruct() {}


// SrlNokiaInterfaces_Interface_Subinterface_Acl_Input represents the /srl_nokia-interfaces/interface/subinterface/acl/input YANG schema element.
type SrlNokiaInterfaces_Interface_Subinterface_Acl_Input struct {
	Ipv4Filter	*string	`path:"ipv4-filter" module:"srl_nokia-acl"`
	Ipv6Filter	*string	`path:"ipv6-filter" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Subinterface_Acl_Input implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Subinterface_Acl_Input) IsYANGGoStruct() {}


// SrlNokiaInterfaces_Interface_Subinterface_Acl_Output represents the /srl_nokia-interfaces/interface/subinterface/acl/output YANG schema element.
type SrlNokiaInterfaces_Interface_Subinterface_Acl_Output struct {
	Ipv4Filter	*string	`path:"ipv4-filter" module:"srl_nokia-acl"`
	Ipv6Filter	*string	`path:"ipv6-filter" module:"srl_nokia-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Subinterface_Acl_Output implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Subinterface_Acl_Output) IsYANGGoStruct() {}


// SrlNokiaInterfaces_Interface_Subinterface_Ipv4 represents the /srl_nokia-interfaces/interface/subinterface/ipv4 YANG schema element.
type SrlNokiaInterfaces_Interface_Subinterface_Ipv4 struct {
	Address	map[string]*SrlNokiaInterfaces_Interface_Subinterface_Ipv4_Address	`path:"address" module:"srl_nokia-interfaces"`
	AllowDirectedBroadcast	*bool	`path:"allow-directed-broadcast" module:"srl_nokia-interfaces"`
	Arp	*SrlNokiaInterfaces_Interface_Subinterface_Ipv4_Arp	`path:"arp" module:"srl_nokia-interfaces-nbr"`
	DhcpClient	*SrlNokiaInterfaces_Interface_Subinterface_Ipv4_DhcpClient	`path:"dhcp-client" module:"srl_nokia-interfaces-ip-dhcp"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Subinterface_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Subinterface_Ipv4) IsYANGGoStruct() {}


// SrlNokiaInterfaces_Interface_Subinterface_Ipv4_Address represents the /srl_nokia-interfaces/interface/subinterface/ipv4/address YANG schema element.
type SrlNokiaInterfaces_Interface_Subinterface_Ipv4_Address struct {
	IpPrefix	*string	`path:"ip-prefix" module:"srl_nokia-interfaces"`
	Origin	E_SrlNokiaIfIp_AddressOrigin	`path:"origin" module:"srl_nokia-interfaces"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Subinterface_Ipv4_Address implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Subinterface_Ipv4_Address) IsYANGGoStruct() {}


// SrlNokiaInterfaces_Interface_Subinterface_Ipv4_Arp represents the /srl_nokia-interfaces/interface/subinterface/ipv4/arp YANG schema element.
type SrlNokiaInterfaces_Interface_Subinterface_Ipv4_Arp struct {
	Neighbor	map[string]*SrlNokiaInterfaces_Interface_Subinterface_Ipv4_Arp_Neighbor	`path:"neighbor" module:"srl_nokia-interfaces-nbr"`
	Timeout	*uint16	`path:"timeout" module:"srl_nokia-interfaces-nbr"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Subinterface_Ipv4_Arp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Subinterface_Ipv4_Arp) IsYANGGoStruct() {}


// SrlNokiaInterfaces_Interface_Subinterface_Ipv4_Arp_Neighbor represents the /srl_nokia-interfaces/interface/subinterface/ipv4/arp/neighbor YANG schema element.
type SrlNokiaInterfaces_Interface_Subinterface_Ipv4_Arp_Neighbor struct {
	ExpirationTime	*string	`path:"expiration-time" module:"srl_nokia-interfaces-nbr"`
	Ipv4Address	*string	`path:"ipv4-address" module:"srl_nokia-interfaces-nbr"`
	LinkLayerAddress	*string	`path:"link-layer-address" module:"srl_nokia-interfaces-nbr"`
	Origin	E_SrlNokiaInterfacesNbr_NeighborOrigin	`path:"origin" module:"srl_nokia-interfaces-nbr"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Subinterface_Ipv4_Arp_Neighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Subinterface_Ipv4_Arp_Neighbor) IsYANGGoStruct() {}


// SrlNokiaInterfaces_Interface_Subinterface_Ipv4_DhcpClient represents the /srl_nokia-interfaces/interface/subinterface/ipv4/dhcp-client YANG schema element.
type SrlNokiaInterfaces_Interface_Subinterface_Ipv4_DhcpClient struct {
	TraceOptions	*SrlNokiaInterfaces_Interface_Subinterface_Ipv4_DhcpClient_TraceOptions	`path:"trace-options" module:"srl_nokia-interfaces-ip-dhcp"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Subinterface_Ipv4_DhcpClient implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Subinterface_Ipv4_DhcpClient) IsYANGGoStruct() {}


// SrlNokiaInterfaces_Interface_Subinterface_Ipv4_DhcpClient_TraceOptions represents the /srl_nokia-interfaces/interface/subinterface/ipv4/dhcp-client/trace-options YANG schema element.
type SrlNokiaInterfaces_Interface_Subinterface_Ipv4_DhcpClient_TraceOptions struct {
	Trace	[]E_SrlNokiaInterfaces_Interface_Subinterface_Ipv4_DhcpClient_TraceOptions_Trace	`path:"trace" module:"srl_nokia-interfaces-ip-dhcp"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Subinterface_Ipv4_DhcpClient_TraceOptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Subinterface_Ipv4_DhcpClient_TraceOptions) IsYANGGoStruct() {}


// SrlNokiaInterfaces_Interface_Subinterface_Ipv6 represents the /srl_nokia-interfaces/interface/subinterface/ipv6 YANG schema element.
type SrlNokiaInterfaces_Interface_Subinterface_Ipv6 struct {
	Address	map[string]*SrlNokiaInterfaces_Interface_Subinterface_Ipv6_Address	`path:"address" module:"srl_nokia-interfaces"`
	DhcpClient	*SrlNokiaInterfaces_Interface_Subinterface_Ipv6_DhcpClient	`path:"dhcp-client" module:"srl_nokia-interfaces-ip-dhcp"`
	NeighborDiscovery	*SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery	`path:"neighbor-discovery" module:"srl_nokia-interfaces-nbr"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Subinterface_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Subinterface_Ipv6) IsYANGGoStruct() {}


// SrlNokiaInterfaces_Interface_Subinterface_Ipv6_Address represents the /srl_nokia-interfaces/interface/subinterface/ipv6/address YANG schema element.
type SrlNokiaInterfaces_Interface_Subinterface_Ipv6_Address struct {
	IpPrefix	*string	`path:"ip-prefix" module:"srl_nokia-interfaces"`
	Origin	E_SrlNokiaIfIp_AddressOrigin	`path:"origin" module:"srl_nokia-interfaces"`
	Status	E_SrlNokiaIfIp_AddressStatus	`path:"status" module:"srl_nokia-interfaces"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Subinterface_Ipv6_Address implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Subinterface_Ipv6_Address) IsYANGGoStruct() {}


// SrlNokiaInterfaces_Interface_Subinterface_Ipv6_DhcpClient represents the /srl_nokia-interfaces/interface/subinterface/ipv6/dhcp-client YANG schema element.
type SrlNokiaInterfaces_Interface_Subinterface_Ipv6_DhcpClient struct {
	TraceOptions	*SrlNokiaInterfaces_Interface_Subinterface_Ipv6_DhcpClient_TraceOptions	`path:"trace-options" module:"srl_nokia-interfaces-ip-dhcp"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Subinterface_Ipv6_DhcpClient implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Subinterface_Ipv6_DhcpClient) IsYANGGoStruct() {}


// SrlNokiaInterfaces_Interface_Subinterface_Ipv6_DhcpClient_TraceOptions represents the /srl_nokia-interfaces/interface/subinterface/ipv6/dhcp-client/trace-options YANG schema element.
type SrlNokiaInterfaces_Interface_Subinterface_Ipv6_DhcpClient_TraceOptions struct {
	Trace	[]E_SrlNokiaInterfaces_Interface_Subinterface_Ipv6_DhcpClient_TraceOptions_Trace	`path:"trace" module:"srl_nokia-interfaces-ip-dhcp"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Subinterface_Ipv6_DhcpClient_TraceOptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Subinterface_Ipv6_DhcpClient_TraceOptions) IsYANGGoStruct() {}


// SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery represents the /srl_nokia-interfaces/interface/subinterface/ipv6/neighbor-discovery YANG schema element.
type SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery struct {
	DuplicateAddressDetection	*bool	`path:"duplicate-address-detection" module:"srl_nokia-interfaces-nbr"`
	Neighbor	map[string]*SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_Neighbor	`path:"neighbor" module:"srl_nokia-interfaces-nbr"`
	ReachableTime	*uint32	`path:"reachable-time" module:"srl_nokia-interfaces-nbr"`
	StaleTime	*uint32	`path:"stale-time" module:"srl_nokia-interfaces-nbr"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery) IsYANGGoStruct() {}


// SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_Neighbor represents the /srl_nokia-interfaces/interface/subinterface/ipv6/neighbor-discovery/neighbor YANG schema element.
type SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_Neighbor struct {
	CurrentState	E_SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_Neighbor_CurrentState	`path:"current-state" module:"srl_nokia-interfaces-nbr"`
	Ipv6Address	*string	`path:"ipv6-address" module:"srl_nokia-interfaces-nbr"`
	IsRouter	*bool	`path:"is-router" module:"srl_nokia-interfaces-nbr"`
	LinkLayerAddress	*string	`path:"link-layer-address" module:"srl_nokia-interfaces-nbr"`
	NextStateTime	*string	`path:"next-state-time" module:"srl_nokia-interfaces-nbr"`
	Origin	E_SrlNokiaInterfacesNbr_NeighborOrigin	`path:"origin" module:"srl_nokia-interfaces-nbr"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_Neighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Subinterface_Ipv6_NeighborDiscovery_Neighbor) IsYANGGoStruct() {}


// SrlNokiaInterfaces_Interface_Subinterface_Qos represents the /srl_nokia-interfaces/interface/subinterface/qos YANG schema element.
type SrlNokiaInterfaces_Interface_Subinterface_Qos struct {
	Input	*SrlNokiaInterfaces_Interface_Subinterface_Qos_Input	`path:"input" module:"srl_nokia-qos"`
	Output	*SrlNokiaInterfaces_Interface_Subinterface_Qos_Output	`path:"output" module:"srl_nokia-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Subinterface_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Subinterface_Qos) IsYANGGoStruct() {}


// SrlNokiaInterfaces_Interface_Subinterface_Qos_Input represents the /srl_nokia-interfaces/interface/subinterface/qos/input YANG schema element.
type SrlNokiaInterfaces_Interface_Subinterface_Qos_Input struct {
	Classifiers	*SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Classifiers	`path:"classifiers" module:"srl_nokia-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Subinterface_Qos_Input implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Subinterface_Qos_Input) IsYANGGoStruct() {}


// SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Classifiers represents the /srl_nokia-interfaces/interface/subinterface/qos/input/classifiers YANG schema element.
type SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Classifiers struct {
	Ipv4Dscp	*string	`path:"ipv4-dscp" module:"srl_nokia-qos"`
	Ipv6Dscp	*string	`path:"ipv6-dscp" module:"srl_nokia-qos"`
	MplsTrafficClass	*string	`path:"mpls-traffic-class" module:"srl_nokia-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Classifiers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Subinterface_Qos_Input_Classifiers) IsYANGGoStruct() {}


// SrlNokiaInterfaces_Interface_Subinterface_Qos_Output represents the /srl_nokia-interfaces/interface/subinterface/qos/output YANG schema element.
type SrlNokiaInterfaces_Interface_Subinterface_Qos_Output struct {
	RewriteRules	*SrlNokiaInterfaces_Interface_Subinterface_Qos_Output_RewriteRules	`path:"rewrite-rules" module:"srl_nokia-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Subinterface_Qos_Output implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Subinterface_Qos_Output) IsYANGGoStruct() {}


// SrlNokiaInterfaces_Interface_Subinterface_Qos_Output_RewriteRules represents the /srl_nokia-interfaces/interface/subinterface/qos/output/rewrite-rules YANG schema element.
type SrlNokiaInterfaces_Interface_Subinterface_Qos_Output_RewriteRules struct {
	Ipv4Dscp	*string	`path:"ipv4-dscp" module:"srl_nokia-qos"`
	Ipv6Dscp	*string	`path:"ipv6-dscp" module:"srl_nokia-qos"`
	MplsTrafficClass	*string	`path:"mpls-traffic-class" module:"srl_nokia-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Subinterface_Qos_Output_RewriteRules implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Subinterface_Qos_Output_RewriteRules) IsYANGGoStruct() {}


// SrlNokiaInterfaces_Interface_Subinterface_Statistics represents the /srl_nokia-interfaces/interface/subinterface/statistics YANG schema element.
type SrlNokiaInterfaces_Interface_Subinterface_Statistics struct {
	InDiscardedPackets	*uint64	`path:"in-discarded-packets" module:"srl_nokia-interfaces"`
	InErrorPackets	*uint64	`path:"in-error-packets" module:"srl_nokia-interfaces"`
	InForwardedOctets	*uint64	`path:"in-forwarded-octets" module:"srl_nokia-interfaces"`
	InForwardedPackets	*uint64	`path:"in-forwarded-packets" module:"srl_nokia-interfaces"`
	InOctets	*uint64	`path:"in-octets" module:"srl_nokia-interfaces"`
	InPackets	*uint64	`path:"in-packets" module:"srl_nokia-interfaces"`
	InTerminatedOctets	*uint64	`path:"in-terminated-octets" module:"srl_nokia-interfaces"`
	InTerminatedPackets	*uint64	`path:"in-terminated-packets" module:"srl_nokia-interfaces"`
	LastClear	*string	`path:"last-clear" module:"srl_nokia-interfaces"`
	OutDiscardedPackets	*uint64	`path:"out-discarded-packets" module:"srl_nokia-interfaces"`
	OutErrorPackets	*uint64	`path:"out-error-packets" module:"srl_nokia-interfaces"`
	OutForwardedOctets	*uint64	`path:"out-forwarded-octets" module:"srl_nokia-interfaces"`
	OutForwardedPackets	*uint64	`path:"out-forwarded-packets" module:"srl_nokia-interfaces"`
	OutOctets	*uint64	`path:"out-octets" module:"srl_nokia-interfaces"`
	OutOriginatedOctets	*uint64	`path:"out-originated-octets" module:"srl_nokia-interfaces"`
	OutOriginatedPackets	*uint64	`path:"out-originated-packets" module:"srl_nokia-interfaces"`
	OutPackets	*uint64	`path:"out-packets" module:"srl_nokia-interfaces"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Subinterface_Statistics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Subinterface_Statistics) IsYANGGoStruct() {}


// SrlNokiaInterfaces_Interface_Subinterface_Vlan represents the /srl_nokia-interfaces/interface/subinterface/vlan YANG schema element.
type SrlNokiaInterfaces_Interface_Subinterface_Vlan struct {
	Encap	*SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap	`path:"encap" module:"srl_nokia-interfaces-vlans"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Subinterface_Vlan implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Subinterface_Vlan) IsYANGGoStruct() {}


// SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap represents the /srl_nokia-interfaces/interface/subinterface/vlan/encap YANG schema element.
type SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap struct {
	SingleTagged	*SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTagged	`path:"single-tagged" module:"srl_nokia-interfaces-vlans"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap) IsYANGGoStruct() {}


// SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTagged represents the /srl_nokia-interfaces/interface/subinterface/vlan/encap/single-tagged YANG schema element.
type SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTagged struct {
	VlanId	*uint16	`path:"vlan-id" module:"srl_nokia-interfaces-vlans"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTagged implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Subinterface_Vlan_Encap_SingleTagged) IsYANGGoStruct() {}


// SrlNokiaInterfaces_Interface_TrafficRate represents the /srl_nokia-interfaces/interface/traffic-rate YANG schema element.
type SrlNokiaInterfaces_Interface_TrafficRate struct {
	InBps	*uint64	`path:"in-bps" module:"srl_nokia-interfaces"`
	OutBps	*uint64	`path:"out-bps" module:"srl_nokia-interfaces"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_TrafficRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_TrafficRate) IsYANGGoStruct() {}


// SrlNokiaInterfaces_Interface_Transceiver represents the /srl_nokia-interfaces/interface/transceiver YANG schema element.
type SrlNokiaInterfaces_Interface_Transceiver struct {
	AdminState	E_SrlNokiaInterfaces_AdminState	`path:"admin-state" module:"srl_nokia-interfaces"`
	Channel	map[uint8]*SrlNokiaInterfaces_Interface_Transceiver_Channel	`path:"channel" module:"srl_nokia-interfaces"`
	ConnectorType	E_SrlNokiaInterfaces_Interface_Transceiver_ConnectorType	`path:"connector-type" module:"srl_nokia-interfaces"`
	DateCode	*string	`path:"date-code" module:"srl_nokia-interfaces"`
	DdmEvents	*bool	`path:"ddm-events" module:"srl_nokia-interfaces"`
	EthernetPmd	*string	`path:"ethernet-pmd" module:"srl_nokia-interfaces"`
	FaultCondition	*bool	`path:"fault-condition" module:"srl_nokia-interfaces"`
	FormFactor	E_SrlNokiaInterfaces_Interface_Transceiver_FormFactor	`path:"form-factor" module:"srl_nokia-interfaces"`
	ForwardErrorCorrection	E_SrlNokiaInterfaces_Interface_Transceiver_ForwardErrorCorrection	`path:"forward-error-correction" module:"srl_nokia-interfaces"`
	OperState	E_SrlNokiaInterfaces_TransceiverOperState	`path:"oper-state" module:"srl_nokia-interfaces"`
	SerialNumber	*string	`path:"serial-number" module:"srl_nokia-interfaces"`
	Temperature	*SrlNokiaInterfaces_Interface_Transceiver_Temperature	`path:"temperature" module:"srl_nokia-interfaces"`
	Vendor	*string	`path:"vendor" module:"srl_nokia-interfaces"`
	VendorPartNumber	*string	`path:"vendor-part-number" module:"srl_nokia-interfaces"`
	VendorRevision	*string	`path:"vendor-revision" module:"srl_nokia-interfaces"`
	Voltage	*SrlNokiaInterfaces_Interface_Transceiver_Voltage	`path:"voltage" module:"srl_nokia-interfaces"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Transceiver implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Transceiver) IsYANGGoStruct() {}


// SrlNokiaInterfaces_Interface_Transceiver_Channel represents the /srl_nokia-interfaces/interface/transceiver/channel YANG schema element.
type SrlNokiaInterfaces_Interface_Transceiver_Channel struct {
	Index	*uint8	`path:"index" module:"srl_nokia-interfaces"`
	InputPower	*SrlNokiaInterfaces_Interface_Transceiver_Channel_InputPower	`path:"input-power" module:"srl_nokia-interfaces"`
	LaserBiasCurrent	*SrlNokiaInterfaces_Interface_Transceiver_Channel_LaserBiasCurrent	`path:"laser-bias-current" module:"srl_nokia-interfaces"`
	OutputPower	*SrlNokiaInterfaces_Interface_Transceiver_Channel_OutputPower	`path:"output-power" module:"srl_nokia-interfaces"`
	Wavelength	*float64	`path:"wavelength" module:"srl_nokia-interfaces"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Transceiver_Channel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Transceiver_Channel) IsYANGGoStruct() {}


// SrlNokiaInterfaces_Interface_Transceiver_Channel_InputPower represents the /srl_nokia-interfaces/interface/transceiver/channel/input-power YANG schema element.
type SrlNokiaInterfaces_Interface_Transceiver_Channel_InputPower struct {
	HighAlarmCondition	*bool	`path:"high-alarm-condition" module:"srl_nokia-interfaces"`
	HighAlarmThreshold	*float64	`path:"high-alarm-threshold" module:"srl_nokia-interfaces"`
	HighWarningCondition	*bool	`path:"high-warning-condition" module:"srl_nokia-interfaces"`
	HighWarningThreshold	*float64	`path:"high-warning-threshold" module:"srl_nokia-interfaces"`
	LatestValue	*float64	`path:"latest-value" module:"srl_nokia-interfaces"`
	LowAlarmCondition	*bool	`path:"low-alarm-condition" module:"srl_nokia-interfaces"`
	LowAlarmThreshold	*float64	`path:"low-alarm-threshold" module:"srl_nokia-interfaces"`
	LowWarningCondition	*bool	`path:"low-warning-condition" module:"srl_nokia-interfaces"`
	LowWarningThreshold	*float64	`path:"low-warning-threshold" module:"srl_nokia-interfaces"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Transceiver_Channel_InputPower implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Transceiver_Channel_InputPower) IsYANGGoStruct() {}


// SrlNokiaInterfaces_Interface_Transceiver_Channel_LaserBiasCurrent represents the /srl_nokia-interfaces/interface/transceiver/channel/laser-bias-current YANG schema element.
type SrlNokiaInterfaces_Interface_Transceiver_Channel_LaserBiasCurrent struct {
	HighAlarmCondition	*bool	`path:"high-alarm-condition" module:"srl_nokia-interfaces"`
	HighAlarmThreshold	*float64	`path:"high-alarm-threshold" module:"srl_nokia-interfaces"`
	HighWarningCondition	*bool	`path:"high-warning-condition" module:"srl_nokia-interfaces"`
	HighWarningThreshold	*float64	`path:"high-warning-threshold" module:"srl_nokia-interfaces"`
	LatestValue	*float64	`path:"latest-value" module:"srl_nokia-interfaces"`
	LowAlarmCondition	*bool	`path:"low-alarm-condition" module:"srl_nokia-interfaces"`
	LowAlarmThreshold	*float64	`path:"low-alarm-threshold" module:"srl_nokia-interfaces"`
	LowWarningCondition	*bool	`path:"low-warning-condition" module:"srl_nokia-interfaces"`
	LowWarningThreshold	*float64	`path:"low-warning-threshold" module:"srl_nokia-interfaces"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Transceiver_Channel_LaserBiasCurrent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Transceiver_Channel_LaserBiasCurrent) IsYANGGoStruct() {}


// SrlNokiaInterfaces_Interface_Transceiver_Channel_OutputPower represents the /srl_nokia-interfaces/interface/transceiver/channel/output-power YANG schema element.
type SrlNokiaInterfaces_Interface_Transceiver_Channel_OutputPower struct {
	HighAlarmCondition	*bool	`path:"high-alarm-condition" module:"srl_nokia-interfaces"`
	HighAlarmThreshold	*float64	`path:"high-alarm-threshold" module:"srl_nokia-interfaces"`
	HighWarningCondition	*bool	`path:"high-warning-condition" module:"srl_nokia-interfaces"`
	HighWarningThreshold	*float64	`path:"high-warning-threshold" module:"srl_nokia-interfaces"`
	LatestValue	*float64	`path:"latest-value" module:"srl_nokia-interfaces"`
	LowAlarmCondition	*bool	`path:"low-alarm-condition" module:"srl_nokia-interfaces"`
	LowAlarmThreshold	*float64	`path:"low-alarm-threshold" module:"srl_nokia-interfaces"`
	LowWarningCondition	*bool	`path:"low-warning-condition" module:"srl_nokia-interfaces"`
	LowWarningThreshold	*float64	`path:"low-warning-threshold" module:"srl_nokia-interfaces"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Transceiver_Channel_OutputPower implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Transceiver_Channel_OutputPower) IsYANGGoStruct() {}


// SrlNokiaInterfaces_Interface_Transceiver_Temperature represents the /srl_nokia-interfaces/interface/transceiver/temperature YANG schema element.
type SrlNokiaInterfaces_Interface_Transceiver_Temperature struct {
	HighAlarmCondition	*bool	`path:"high-alarm-condition" module:"srl_nokia-interfaces"`
	HighAlarmThreshold	*int16	`path:"high-alarm-threshold" module:"srl_nokia-interfaces"`
	HighWarningCondition	*bool	`path:"high-warning-condition" module:"srl_nokia-interfaces"`
	HighWarningThreshold	*int16	`path:"high-warning-threshold" module:"srl_nokia-interfaces"`
	LatestValue	*int16	`path:"latest-value" module:"srl_nokia-interfaces"`
	LowAlarmCondition	*bool	`path:"low-alarm-condition" module:"srl_nokia-interfaces"`
	LowAlarmThreshold	*int16	`path:"low-alarm-threshold" module:"srl_nokia-interfaces"`
	LowWarningCondition	*bool	`path:"low-warning-condition" module:"srl_nokia-interfaces"`
	LowWarningThreshold	*int16	`path:"low-warning-threshold" module:"srl_nokia-interfaces"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Transceiver_Temperature implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Transceiver_Temperature) IsYANGGoStruct() {}


// SrlNokiaInterfaces_Interface_Transceiver_Voltage represents the /srl_nokia-interfaces/interface/transceiver/voltage YANG schema element.
type SrlNokiaInterfaces_Interface_Transceiver_Voltage struct {
	HighAlarmCondition	*bool	`path:"high-alarm-condition" module:"srl_nokia-interfaces"`
	HighAlarmThreshold	*float64	`path:"high-alarm-threshold" module:"srl_nokia-interfaces"`
	HighWarningCondition	*bool	`path:"high-warning-condition" module:"srl_nokia-interfaces"`
	HighWarningThreshold	*float64	`path:"high-warning-threshold" module:"srl_nokia-interfaces"`
	LatestValue	*float64	`path:"latest-value" module:"srl_nokia-interfaces"`
	LowAlarmCondition	*bool	`path:"low-alarm-condition" module:"srl_nokia-interfaces"`
	LowAlarmThreshold	*float64	`path:"low-alarm-threshold" module:"srl_nokia-interfaces"`
	LowWarningCondition	*bool	`path:"low-warning-condition" module:"srl_nokia-interfaces"`
	LowWarningThreshold	*float64	`path:"low-warning-threshold" module:"srl_nokia-interfaces"`
}

// IsYANGGoStruct ensures that SrlNokiaInterfaces_Interface_Transceiver_Voltage implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaInterfaces_Interface_Transceiver_Voltage) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance represents the /srl_nokia-network-instance/network-instance YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance struct {
	AdminState	E_SrlNokiaNetworkInstance_AdminState	`path:"admin-state" module:"srl_nokia-network-instance"`
	Aft	map[string]*SrlNokiaNetworkInstance_NetworkInstance_Aft	`path:"aft" module:"srl_nokia-aft"`
	AggregateRoutes	*SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes	`path:"aggregate-routes" module:"srl_nokia-aggregate-routes"`
	BgpRib	*SrlNokiaNetworkInstance_NetworkInstance_BgpRib	`path:"bgp-rib" module:"srl_nokia-rib-bgp"`
	Description	*string	`path:"description" module:"srl_nokia-network-instance"`
	Icmp	*SrlNokiaNetworkInstance_NetworkInstance_Icmp	`path:"icmp" module:"srl_nokia-network-instance"`
	Icmp6	*SrlNokiaNetworkInstance_NetworkInstance_Icmp6	`path:"icmp6" module:"srl_nokia-network-instance"`
	Interface	map[string]*SrlNokiaNetworkInstance_NetworkInstance_Interface	`path:"interface" module:"srl_nokia-network-instance"`
	IpForwarding	*SrlNokiaNetworkInstance_NetworkInstance_IpForwarding	`path:"ip-forwarding" module:"srl_nokia-network-instance"`
	IpLoadBalancing	*SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing	`path:"ip-load-balancing" module:"srl_nokia-network-instance"`
	Mpls	*SrlNokiaNetworkInstance_NetworkInstance_Mpls	`path:"mpls" module:"srl_nokia-mpls"`
	Mtu	*SrlNokiaNetworkInstance_NetworkInstance_Mtu	`path:"mtu" module:"srl_nokia-network-instance-mtu"`
	Name	*string	`path:"name" module:"srl_nokia-network-instance"`
	NextHopGroups	*SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups	`path:"next-hop-groups" module:"srl_nokia-next-hop-groups"`
	OperState	E_SrlNokiaNetworkInstance_OperState	`path:"oper-state" module:"srl_nokia-network-instance"`
	Protocols	*SrlNokiaNetworkInstance_NetworkInstance_Protocols	`path:"protocols" module:"srl_nokia-network-instance"`
	RouteTable	*SrlNokiaNetworkInstance_NetworkInstance_RouteTable	`path:"route-table" module:"srl_nokia-network-instance"`
	RouterId	*string	`path:"router-id" module:"srl_nokia-network-instance"`
	StaticRoutes	*SrlNokiaNetworkInstance_NetworkInstance_StaticRoutes	`path:"static-routes" module:"srl_nokia-static-routes"`
	Tcp	*SrlNokiaNetworkInstance_NetworkInstance_Tcp	`path:"tcp" module:"srl_nokia-tcp-udp"`
	Type	E_SrlNokiaNetworkInstance_NiType	`path:"type" module:"srl_nokia-network-instance"`
	Udp	*SrlNokiaNetworkInstance_NetworkInstance_Udp	`path:"udp" module:"srl_nokia-tcp-udp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_Aft represents the /srl_nokia-network-instance/network-instance/aft YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Aft struct {
	AddressFamily	*string	`path:"address-family" module:"srl_nokia-aft"`
	Entries	*SrlNokiaNetworkInstance_NetworkInstance_Aft_Entries	`path:"entries" module:"srl_nokia-aft"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Aft implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Aft) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_Aft_Entries represents the /srl_nokia-network-instance/network-instance/aft/entries YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Aft_Entries struct {
	Entry	map[uint64]*SrlNokiaNetworkInstance_NetworkInstance_Aft_Entries_Entry	`path:"entry" module:"srl_nokia-aft"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Aft_Entries implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Aft_Entries) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_Aft_Entries_Entry represents the /srl_nokia-network-instance/network-instance/aft/entries/entry YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Aft_Entries_Entry struct {
	Index	*uint64	`path:"index" module:"srl_nokia-aft"`
	Match	*SrlNokiaNetworkInstance_NetworkInstance_Aft_Entries_Entry_Match	`path:"match" module:"srl_nokia-aft"`
	NextHop	map[uint64]*SrlNokiaNetworkInstance_NetworkInstance_Aft_Entries_Entry_NextHop	`path:"next-hop" module:"srl_nokia-aft"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Aft_Entries_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Aft_Entries_Entry) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_Aft_Entries_Entry_Match represents the /srl_nokia-network-instance/network-instance/aft/entries/entry/match YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Aft_Entries_Entry_Match struct {
	State	*SrlNokiaNetworkInstance_NetworkInstance_Aft_Entries_Entry_Match_State	`path:"state" module:"srl_nokia-aft"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Aft_Entries_Entry_Match implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Aft_Entries_Entry_Match) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_Aft_Entries_Entry_Match_State represents the /srl_nokia-network-instance/network-instance/aft/entries/entry/match/state YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Aft_Entries_Entry_Match_State struct {
	IpPrefix	*string	`path:"ip-prefix" module:"srl_nokia-aft"`
	Preference	*uint32	`path:"preference" module:"srl_nokia-aft"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Aft_Entries_Entry_Match_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Aft_Entries_Entry_Match_State) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_Aft_Entries_Entry_NextHop represents the /srl_nokia-network-instance/network-instance/aft/entries/entry/next-hop YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Aft_Entries_Entry_NextHop struct {
	Index	*uint64	`path:"index" module:"srl_nokia-aft"`
	State	*SrlNokiaNetworkInstance_NetworkInstance_Aft_Entries_Entry_NextHop_State	`path:"state" module:"srl_nokia-aft"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Aft_Entries_Entry_NextHop implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Aft_Entries_Entry_NextHop) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_Aft_Entries_Entry_NextHop_State represents the /srl_nokia-network-instance/network-instance/aft/entries/entry/next-hop/state YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Aft_Entries_Entry_NextHop_State struct {
	IpAddress	*string	`path:"ip-address" module:"srl_nokia-aft"`
	OriginProtocol	SrlNokiaNetworkInstance_NetworkInstance_Aft_Entries_Entry_NextHop_State_OriginProtocol_Union	`path:"origin-protocol" module:"srl_nokia-aft"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Aft_Entries_Entry_NextHop_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Aft_Entries_Entry_NextHop_State) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes represents the /srl_nokia-network-instance/network-instance/aggregate-routes YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes struct {
	Route	map[string]*SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route	`path:"route" module:"srl_nokia-aggregate-routes"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route represents the /srl_nokia-network-instance/network-instance/aggregate-routes/route YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route struct {
	AdminState	E_SrlNokiaAggregateRoutes_AdminState	`path:"admin-state" module:"srl_nokia-aggregate-routes"`
	Aggregator	*SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route_Aggregator	`path:"aggregator" module:"srl_nokia-aggregate-routes"`
	Communities	*SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route_Communities	`path:"communities" module:"srl_nokia-aggregate-routes"`
	GenerateIcmp	*bool	`path:"generate-icmp" module:"srl_nokia-aggregate-routes"`
	Installed	*bool	`path:"installed" module:"srl_nokia-aggregate-routes"`
	Prefix	*string	`path:"prefix" module:"srl_nokia-aggregate-routes"`
	SummaryOnly	*bool	`path:"summary-only" module:"srl_nokia-aggregate-routes"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route_Aggregator represents the /srl_nokia-network-instance/network-instance/aggregate-routes/route/aggregator YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route_Aggregator struct {
	Address	*string	`path:"address" module:"srl_nokia-aggregate-routes"`
	AsNumber	*uint32	`path:"as-number" module:"srl_nokia-aggregate-routes"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route_Aggregator implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route_Aggregator) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route_Communities represents the /srl_nokia-network-instance/network-instance/aggregate-routes/route/communities YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route_Communities struct {
	Add	[]SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route_Communities_Add_Union	`path:"add" module:"srl_nokia-aggregate-routes"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route_Communities implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route_Communities) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_BgpRib represents the /srl_nokia-network-instance/network-instance/bgp-rib YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_BgpRib struct {
	AttrSets	*SrlNokiaNetworkInstance_NetworkInstance_BgpRib_AttrSets	`path:"attr-sets" module:"srl_nokia-rib-bgp"`
	Ipv4Unicast	*SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv4Unicast	`path:"ipv4-unicast" module:"srl_nokia-rib-bgp"`
	Ipv6Unicast	*SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv6Unicast	`path:"ipv6-unicast" module:"srl_nokia-rib-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_BgpRib implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_BgpRib) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_BgpRib_AttrSets represents the /srl_nokia-network-instance/network-instance/bgp-rib/attr-sets YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_BgpRib_AttrSets struct {
	AttrSet	map[SrlNokiaNetworkInstance_NetworkInstance_BgpRib_AttrSets_AttrSet_Key]*SrlNokiaNetworkInstance_NetworkInstance_BgpRib_AttrSets_AttrSet	`path:"attr-set" module:"srl_nokia-rib-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_BgpRib_AttrSets implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_BgpRib_AttrSets) IsYANGGoStruct() {}

// SrlNokiaNetworkInstance_NetworkInstance_BgpRib_AttrSets_AttrSet_Key represents the key for list AttrSet of element /srl_nokia-network-instance/network-instance/bgp-rib/attr-sets.
type SrlNokiaNetworkInstance_NetworkInstance_BgpRib_AttrSets_AttrSet_Key struct {
	AttrSetType	E_SrlNokiaNetworkInstance_NetworkInstance_BgpRib_AttrSets_AttrSet_AttrSetType	`path:"attr-set-type"`
	Index	uint64	`path:"index"`
}


// SrlNokiaNetworkInstance_NetworkInstance_BgpRib_AttrSets_AttrSet represents the /srl_nokia-network-instance/network-instance/bgp-rib/attr-sets/attr-set YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_BgpRib_AttrSets_AttrSet struct {
	Aggregator	*SrlNokiaNetworkInstance_NetworkInstance_BgpRib_AttrSets_AttrSet_Aggregator	`path:"aggregator" module:"srl_nokia-rib-bgp"`
	Aigp	*uint64	`path:"aigp" module:"srl_nokia-rib-bgp"`
	AsPath	*SrlNokiaNetworkInstance_NetworkInstance_BgpRib_AttrSets_AttrSet_AsPath	`path:"as-path" module:"srl_nokia-rib-bgp"`
	AtomicAggregate	*bool	`path:"atomic-aggregate" module:"srl_nokia-rib-bgp"`
	AttrSetType	E_SrlNokiaNetworkInstance_NetworkInstance_BgpRib_AttrSets_AttrSet_AttrSetType	`path:"attr-set-type" module:"srl_nokia-rib-bgp"`
	ClusterList	[]string	`path:"cluster-list" module:"srl_nokia-rib-bgp"`
	Communities	*SrlNokiaNetworkInstance_NetworkInstance_BgpRib_AttrSets_AttrSet_Communities	`path:"communities" module:"srl_nokia-rib-bgp"`
	Index	*uint64	`path:"index" module:"srl_nokia-rib-bgp"`
	LocalPref	*uint32	`path:"local-pref" module:"srl_nokia-rib-bgp"`
	Med	*uint32	`path:"med" module:"srl_nokia-rib-bgp"`
	NextHop	*string	`path:"next-hop" module:"srl_nokia-rib-bgp"`
	Origin	E_SrlNokiaNetworkInstance_NetworkInstance_BgpRib_AttrSets_AttrSet_Origin	`path:"origin" module:"srl_nokia-rib-bgp"`
	OriginatorId	*string	`path:"originator-id" module:"srl_nokia-rib-bgp"`
	UnknownAttributes	*SrlNokiaNetworkInstance_NetworkInstance_BgpRib_AttrSets_AttrSet_UnknownAttributes	`path:"unknown-attributes" module:"srl_nokia-rib-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_BgpRib_AttrSets_AttrSet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_BgpRib_AttrSets_AttrSet) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_BgpRib_AttrSets_AttrSet_Aggregator represents the /srl_nokia-network-instance/network-instance/bgp-rib/attr-sets/attr-set/aggregator YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_BgpRib_AttrSets_AttrSet_Aggregator struct {
	Address	*string	`path:"address" module:"srl_nokia-rib-bgp"`
	AsNumber	*uint32	`path:"as-number" module:"srl_nokia-rib-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_BgpRib_AttrSets_AttrSet_Aggregator implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_BgpRib_AttrSets_AttrSet_Aggregator) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_BgpRib_AttrSets_AttrSet_AsPath represents the /srl_nokia-network-instance/network-instance/bgp-rib/attr-sets/attr-set/as-path YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_BgpRib_AttrSets_AttrSet_AsPath struct {
	Segment	map[uint32]*SrlNokiaNetworkInstance_NetworkInstance_BgpRib_AttrSets_AttrSet_AsPath_Segment	`path:"segment" module:"srl_nokia-rib-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_BgpRib_AttrSets_AttrSet_AsPath implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_BgpRib_AttrSets_AttrSet_AsPath) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_BgpRib_AttrSets_AttrSet_AsPath_Segment represents the /srl_nokia-network-instance/network-instance/bgp-rib/attr-sets/attr-set/as-path/segment YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_BgpRib_AttrSets_AttrSet_AsPath_Segment struct {
	AsPathIndex	*uint32	`path:"as-path-index" module:"srl_nokia-rib-bgp"`
	Member	[]uint32	`path:"member" module:"srl_nokia-rib-bgp"`
	Type	E_SrlNokiaNetworkInstance_NetworkInstance_BgpRib_AttrSets_AttrSet_AsPath_Segment_Type	`path:"type" module:"srl_nokia-rib-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_BgpRib_AttrSets_AttrSet_AsPath_Segment implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_BgpRib_AttrSets_AttrSet_AsPath_Segment) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_BgpRib_AttrSets_AttrSet_Communities represents the /srl_nokia-network-instance/network-instance/bgp-rib/attr-sets/attr-set/communities YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_BgpRib_AttrSets_AttrSet_Communities struct {
	Community	[]string	`path:"community" module:"srl_nokia-rib-bgp"`
	ExtCommunity	[]string	`path:"ext-community" module:"srl_nokia-rib-bgp"`
	LargeCommunity	[]string	`path:"large-community" module:"srl_nokia-rib-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_BgpRib_AttrSets_AttrSet_Communities implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_BgpRib_AttrSets_AttrSet_Communities) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_BgpRib_AttrSets_AttrSet_UnknownAttributes represents the /srl_nokia-network-instance/network-instance/bgp-rib/attr-sets/attr-set/unknown-attributes YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_BgpRib_AttrSets_AttrSet_UnknownAttributes struct {
	UnknownAttribute	map[uint32]*SrlNokiaNetworkInstance_NetworkInstance_BgpRib_AttrSets_AttrSet_UnknownAttributes_UnknownAttribute	`path:"unknown-attribute" module:"srl_nokia-rib-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_BgpRib_AttrSets_AttrSet_UnknownAttributes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_BgpRib_AttrSets_AttrSet_UnknownAttributes) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_BgpRib_AttrSets_AttrSet_UnknownAttributes_UnknownAttribute represents the /srl_nokia-network-instance/network-instance/bgp-rib/attr-sets/attr-set/unknown-attributes/unknown-attribute YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_BgpRib_AttrSets_AttrSet_UnknownAttributes_UnknownAttribute struct {
	AttrLen	*uint16	`path:"attr-len" module:"srl_nokia-rib-bgp"`
	AttrType	*uint8	`path:"attr-type" module:"srl_nokia-rib-bgp"`
	Extended	*bool	`path:"extended" module:"srl_nokia-rib-bgp"`
	Optional	*bool	`path:"optional" module:"srl_nokia-rib-bgp"`
	Partial	*bool	`path:"partial" module:"srl_nokia-rib-bgp"`
	Transitive	*bool	`path:"transitive" module:"srl_nokia-rib-bgp"`
	UnknownAttrIndex	*uint32	`path:"unknown-attr-index" module:"srl_nokia-rib-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_BgpRib_AttrSets_AttrSet_UnknownAttributes_UnknownAttribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_BgpRib_AttrSets_AttrSet_UnknownAttributes_UnknownAttribute) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv4Unicast represents the /srl_nokia-network-instance/network-instance/bgp-rib/ipv4-unicast YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv4Unicast struct {
	LocalRib	*SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv4Unicast_LocalRib	`path:"local-rib" module:"srl_nokia-rib-bgp"`
	RibInOut	*SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv4Unicast_RibInOut	`path:"rib-in-out" module:"srl_nokia-rib-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv4Unicast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv4Unicast) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv4Unicast_LocalRib represents the /srl_nokia-network-instance/network-instance/bgp-rib/ipv4-unicast/local-rib YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv4Unicast_LocalRib struct {
	Routes	map[SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv4Unicast_LocalRib_Routes_Key]*SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv4Unicast_LocalRib_Routes	`path:"routes" module:"srl_nokia-rib-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv4Unicast_LocalRib implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv4Unicast_LocalRib) IsYANGGoStruct() {}

// SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv4Unicast_LocalRib_Routes_Key represents the key for list Routes of element /srl_nokia-network-instance/network-instance/bgp-rib/ipv4-unicast/local-rib.
type SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv4Unicast_LocalRib_Routes_Key struct {
	Prefix	string	`path:"prefix"`
	Neighbor	string	`path:"neighbor"`
	OriginProtocol	E_SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv4Unicast_LocalRib_Routes_OriginProtocol	`path:"origin-protocol"`
}


// SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv4Unicast_LocalRib_Routes represents the /srl_nokia-network-instance/network-instance/bgp-rib/ipv4-unicast/local-rib/routes YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv4Unicast_LocalRib_Routes struct {
	AttrId	*uint64	`path:"attr-id" module:"srl_nokia-rib-bgp"`
	BestRoute	*bool	`path:"best-route" module:"srl_nokia-rib-bgp"`
	InvalidReason	*SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv4Unicast_LocalRib_Routes_InvalidReason	`path:"invalid-reason" module:"srl_nokia-rib-bgp"`
	LastModified	*string	`path:"last-modified" module:"srl_nokia-rib-bgp"`
	Neighbor	*string	`path:"neighbor" module:"srl_nokia-rib-bgp"`
	OriginProtocol	E_SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv4Unicast_LocalRib_Routes_OriginProtocol	`path:"origin-protocol" module:"srl_nokia-rib-bgp"`
	PendingDelete	*bool	`path:"pending-delete" module:"srl_nokia-rib-bgp"`
	Prefix	*string	`path:"prefix" module:"srl_nokia-rib-bgp"`
	StaleRoute	*bool	`path:"stale-route" module:"srl_nokia-rib-bgp"`
	TieBreakReason	E_SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv4Unicast_LocalRib_Routes_TieBreakReason	`path:"tie-break-reason" module:"srl_nokia-rib-bgp"`
	UsedRoute	*bool	`path:"used-route" module:"srl_nokia-rib-bgp"`
	ValidRoute	*bool	`path:"valid-route" module:"srl_nokia-rib-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv4Unicast_LocalRib_Routes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv4Unicast_LocalRib_Routes) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv4Unicast_LocalRib_Routes_InvalidReason represents the /srl_nokia-network-instance/network-instance/bgp-rib/ipv4-unicast/local-rib/routes/invalid-reason YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv4Unicast_LocalRib_Routes_InvalidReason struct {
	AsLoop	*bool	`path:"as-loop" module:"srl_nokia-rib-bgp"`
	ClusterLoop	*bool	`path:"cluster-loop" module:"srl_nokia-rib-bgp"`
	NextHopUnresolved	*bool	`path:"next-hop-unresolved" module:"srl_nokia-rib-bgp"`
	RejectedRoute	*bool	`path:"rejected-route" module:"srl_nokia-rib-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv4Unicast_LocalRib_Routes_InvalidReason implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv4Unicast_LocalRib_Routes_InvalidReason) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv4Unicast_RibInOut represents the /srl_nokia-network-instance/network-instance/bgp-rib/ipv4-unicast/rib-in-out YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv4Unicast_RibInOut struct {
	RibInPost	*SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv4Unicast_RibInOut_RibInPost	`path:"rib-in-post" module:"srl_nokia-rib-bgp"`
	RibInPre	*SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv4Unicast_RibInOut_RibInPre	`path:"rib-in-pre" module:"srl_nokia-rib-bgp"`
	RibOutPost	*SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv4Unicast_RibInOut_RibOutPost	`path:"rib-out-post" module:"srl_nokia-rib-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv4Unicast_RibInOut implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv4Unicast_RibInOut) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv4Unicast_RibInOut_RibInPost represents the /srl_nokia-network-instance/network-instance/bgp-rib/ipv4-unicast/rib-in-out/rib-in-post YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv4Unicast_RibInOut_RibInPost struct {
	Routes	map[SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv4Unicast_RibInOut_RibInPost_Routes_Key]*SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv4Unicast_RibInOut_RibInPost_Routes	`path:"routes" module:"srl_nokia-rib-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv4Unicast_RibInOut_RibInPost implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv4Unicast_RibInOut_RibInPost) IsYANGGoStruct() {}

// SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv4Unicast_RibInOut_RibInPost_Routes_Key represents the key for list Routes of element /srl_nokia-network-instance/network-instance/bgp-rib/ipv4-unicast/rib-in-out/rib-in-post.
type SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv4Unicast_RibInOut_RibInPost_Routes_Key struct {
	Prefix	string	`path:"prefix"`
	Neighbor	string	`path:"neighbor"`
}


// SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv4Unicast_RibInOut_RibInPost_Routes represents the /srl_nokia-network-instance/network-instance/bgp-rib/ipv4-unicast/rib-in-out/rib-in-post/routes YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv4Unicast_RibInOut_RibInPost_Routes struct {
	AttrId	*uint64	`path:"attr-id" module:"srl_nokia-rib-bgp"`
	BestRoute	*bool	`path:"best-route" module:"srl_nokia-rib-bgp"`
	InvalidReason	*SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv4Unicast_RibInOut_RibInPost_Routes_InvalidReason	`path:"invalid-reason" module:"srl_nokia-rib-bgp"`
	LastModified	*string	`path:"last-modified" module:"srl_nokia-rib-bgp"`
	Neighbor	*string	`path:"neighbor" module:"srl_nokia-rib-bgp"`
	PendingDelete	*bool	`path:"pending-delete" module:"srl_nokia-rib-bgp"`
	Prefix	*string	`path:"prefix" module:"srl_nokia-rib-bgp"`
	StaleRoute	*bool	`path:"stale-route" module:"srl_nokia-rib-bgp"`
	TieBreakReason	E_SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv4Unicast_LocalRib_Routes_TieBreakReason	`path:"tie-break-reason" module:"srl_nokia-rib-bgp"`
	UsedRoute	*bool	`path:"used-route" module:"srl_nokia-rib-bgp"`
	ValidRoute	*bool	`path:"valid-route" module:"srl_nokia-rib-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv4Unicast_RibInOut_RibInPost_Routes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv4Unicast_RibInOut_RibInPost_Routes) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv4Unicast_RibInOut_RibInPost_Routes_InvalidReason represents the /srl_nokia-network-instance/network-instance/bgp-rib/ipv4-unicast/rib-in-out/rib-in-post/routes/invalid-reason YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv4Unicast_RibInOut_RibInPost_Routes_InvalidReason struct {
	AsLoop	*bool	`path:"as-loop" module:"srl_nokia-rib-bgp"`
	ClusterLoop	*bool	`path:"cluster-loop" module:"srl_nokia-rib-bgp"`
	NextHopUnresolved	*bool	`path:"next-hop-unresolved" module:"srl_nokia-rib-bgp"`
	RejectedRoute	*bool	`path:"rejected-route" module:"srl_nokia-rib-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv4Unicast_RibInOut_RibInPost_Routes_InvalidReason implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv4Unicast_RibInOut_RibInPost_Routes_InvalidReason) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv4Unicast_RibInOut_RibInPre represents the /srl_nokia-network-instance/network-instance/bgp-rib/ipv4-unicast/rib-in-out/rib-in-pre YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv4Unicast_RibInOut_RibInPre struct {
	Routes	map[SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv4Unicast_RibInOut_RibInPre_Routes_Key]*SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv4Unicast_RibInOut_RibInPre_Routes	`path:"routes" module:"srl_nokia-rib-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv4Unicast_RibInOut_RibInPre implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv4Unicast_RibInOut_RibInPre) IsYANGGoStruct() {}

// SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv4Unicast_RibInOut_RibInPre_Routes_Key represents the key for list Routes of element /srl_nokia-network-instance/network-instance/bgp-rib/ipv4-unicast/rib-in-out/rib-in-pre.
type SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv4Unicast_RibInOut_RibInPre_Routes_Key struct {
	Prefix	string	`path:"prefix"`
	Neighbor	string	`path:"neighbor"`
}


// SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv4Unicast_RibInOut_RibInPre_Routes represents the /srl_nokia-network-instance/network-instance/bgp-rib/ipv4-unicast/rib-in-out/rib-in-pre/routes YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv4Unicast_RibInOut_RibInPre_Routes struct {
	AttrId	*uint64	`path:"attr-id" module:"srl_nokia-rib-bgp"`
	Neighbor	*string	`path:"neighbor" module:"srl_nokia-rib-bgp"`
	Prefix	*string	`path:"prefix" module:"srl_nokia-rib-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv4Unicast_RibInOut_RibInPre_Routes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv4Unicast_RibInOut_RibInPre_Routes) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv4Unicast_RibInOut_RibOutPost represents the /srl_nokia-network-instance/network-instance/bgp-rib/ipv4-unicast/rib-in-out/rib-out-post YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv4Unicast_RibInOut_RibOutPost struct {
	Routes	map[SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv4Unicast_RibInOut_RibOutPost_Routes_Key]*SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv4Unicast_RibInOut_RibOutPost_Routes	`path:"routes" module:"srl_nokia-rib-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv4Unicast_RibInOut_RibOutPost implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv4Unicast_RibInOut_RibOutPost) IsYANGGoStruct() {}

// SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv4Unicast_RibInOut_RibOutPost_Routes_Key represents the key for list Routes of element /srl_nokia-network-instance/network-instance/bgp-rib/ipv4-unicast/rib-in-out/rib-out-post.
type SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv4Unicast_RibInOut_RibOutPost_Routes_Key struct {
	Prefix	string	`path:"prefix"`
	Neighbor	string	`path:"neighbor"`
}


// SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv4Unicast_RibInOut_RibOutPost_Routes represents the /srl_nokia-network-instance/network-instance/bgp-rib/ipv4-unicast/rib-in-out/rib-out-post/routes YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv4Unicast_RibInOut_RibOutPost_Routes struct {
	AttrId	*uint64	`path:"attr-id" module:"srl_nokia-rib-bgp"`
	Neighbor	*string	`path:"neighbor" module:"srl_nokia-rib-bgp"`
	Prefix	*string	`path:"prefix" module:"srl_nokia-rib-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv4Unicast_RibInOut_RibOutPost_Routes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv4Unicast_RibInOut_RibOutPost_Routes) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv6Unicast represents the /srl_nokia-network-instance/network-instance/bgp-rib/ipv6-unicast YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv6Unicast struct {
	LocalRib	*SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv6Unicast_LocalRib	`path:"local-rib" module:"srl_nokia-rib-bgp"`
	RibInOut	*SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv6Unicast_RibInOut	`path:"rib-in-out" module:"srl_nokia-rib-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv6Unicast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv6Unicast) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv6Unicast_LocalRib represents the /srl_nokia-network-instance/network-instance/bgp-rib/ipv6-unicast/local-rib YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv6Unicast_LocalRib struct {
	Routes	map[SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv6Unicast_LocalRib_Routes_Key]*SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv6Unicast_LocalRib_Routes	`path:"routes" module:"srl_nokia-rib-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv6Unicast_LocalRib implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv6Unicast_LocalRib) IsYANGGoStruct() {}

// SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv6Unicast_LocalRib_Routes_Key represents the key for list Routes of element /srl_nokia-network-instance/network-instance/bgp-rib/ipv6-unicast/local-rib.
type SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv6Unicast_LocalRib_Routes_Key struct {
	Prefix	string	`path:"prefix"`
	Neighbor	string	`path:"neighbor"`
	OriginProtocol	E_SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv6Unicast_LocalRib_Routes_OriginProtocol	`path:"origin-protocol"`
}


// SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv6Unicast_LocalRib_Routes represents the /srl_nokia-network-instance/network-instance/bgp-rib/ipv6-unicast/local-rib/routes YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv6Unicast_LocalRib_Routes struct {
	AttrId	*uint64	`path:"attr-id" module:"srl_nokia-rib-bgp"`
	BestRoute	*bool	`path:"best-route" module:"srl_nokia-rib-bgp"`
	InvalidReason	*SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv6Unicast_LocalRib_Routes_InvalidReason	`path:"invalid-reason" module:"srl_nokia-rib-bgp"`
	LastModified	*string	`path:"last-modified" module:"srl_nokia-rib-bgp"`
	Neighbor	*string	`path:"neighbor" module:"srl_nokia-rib-bgp"`
	OriginProtocol	E_SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv6Unicast_LocalRib_Routes_OriginProtocol	`path:"origin-protocol" module:"srl_nokia-rib-bgp"`
	PendingDelete	*bool	`path:"pending-delete" module:"srl_nokia-rib-bgp"`
	Prefix	*string	`path:"prefix" module:"srl_nokia-rib-bgp"`
	StaleRoute	*bool	`path:"stale-route" module:"srl_nokia-rib-bgp"`
	TieBreakReason	E_SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv4Unicast_LocalRib_Routes_TieBreakReason	`path:"tie-break-reason" module:"srl_nokia-rib-bgp"`
	UsedRoute	*bool	`path:"used-route" module:"srl_nokia-rib-bgp"`
	ValidRoute	*bool	`path:"valid-route" module:"srl_nokia-rib-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv6Unicast_LocalRib_Routes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv6Unicast_LocalRib_Routes) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv6Unicast_LocalRib_Routes_InvalidReason represents the /srl_nokia-network-instance/network-instance/bgp-rib/ipv6-unicast/local-rib/routes/invalid-reason YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv6Unicast_LocalRib_Routes_InvalidReason struct {
	AsLoop	*bool	`path:"as-loop" module:"srl_nokia-rib-bgp"`
	ClusterLoop	*bool	`path:"cluster-loop" module:"srl_nokia-rib-bgp"`
	NextHopUnresolved	*bool	`path:"next-hop-unresolved" module:"srl_nokia-rib-bgp"`
	RejectedRoute	*bool	`path:"rejected-route" module:"srl_nokia-rib-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv6Unicast_LocalRib_Routes_InvalidReason implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv6Unicast_LocalRib_Routes_InvalidReason) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv6Unicast_RibInOut represents the /srl_nokia-network-instance/network-instance/bgp-rib/ipv6-unicast/rib-in-out YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv6Unicast_RibInOut struct {
	RibInPost	*SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv6Unicast_RibInOut_RibInPost	`path:"rib-in-post" module:"srl_nokia-rib-bgp"`
	RibInPre	*SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv6Unicast_RibInOut_RibInPre	`path:"rib-in-pre" module:"srl_nokia-rib-bgp"`
	RibOutPost	*SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv6Unicast_RibInOut_RibOutPost	`path:"rib-out-post" module:"srl_nokia-rib-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv6Unicast_RibInOut implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv6Unicast_RibInOut) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv6Unicast_RibInOut_RibInPost represents the /srl_nokia-network-instance/network-instance/bgp-rib/ipv6-unicast/rib-in-out/rib-in-post YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv6Unicast_RibInOut_RibInPost struct {
	Routes	map[SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv6Unicast_RibInOut_RibInPost_Routes_Key]*SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv6Unicast_RibInOut_RibInPost_Routes	`path:"routes" module:"srl_nokia-rib-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv6Unicast_RibInOut_RibInPost implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv6Unicast_RibInOut_RibInPost) IsYANGGoStruct() {}

// SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv6Unicast_RibInOut_RibInPost_Routes_Key represents the key for list Routes of element /srl_nokia-network-instance/network-instance/bgp-rib/ipv6-unicast/rib-in-out/rib-in-post.
type SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv6Unicast_RibInOut_RibInPost_Routes_Key struct {
	Prefix	string	`path:"prefix"`
	Neighbor	string	`path:"neighbor"`
}


// SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv6Unicast_RibInOut_RibInPost_Routes represents the /srl_nokia-network-instance/network-instance/bgp-rib/ipv6-unicast/rib-in-out/rib-in-post/routes YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv6Unicast_RibInOut_RibInPost_Routes struct {
	AttrId	*uint64	`path:"attr-id" module:"srl_nokia-rib-bgp"`
	BestRoute	*bool	`path:"best-route" module:"srl_nokia-rib-bgp"`
	InvalidReason	*SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv6Unicast_RibInOut_RibInPost_Routes_InvalidReason	`path:"invalid-reason" module:"srl_nokia-rib-bgp"`
	LastModified	*string	`path:"last-modified" module:"srl_nokia-rib-bgp"`
	Neighbor	*string	`path:"neighbor" module:"srl_nokia-rib-bgp"`
	PendingDelete	*bool	`path:"pending-delete" module:"srl_nokia-rib-bgp"`
	Prefix	*string	`path:"prefix" module:"srl_nokia-rib-bgp"`
	StaleRoute	*bool	`path:"stale-route" module:"srl_nokia-rib-bgp"`
	TieBreakReason	E_SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv4Unicast_LocalRib_Routes_TieBreakReason	`path:"tie-break-reason" module:"srl_nokia-rib-bgp"`
	UsedRoute	*bool	`path:"used-route" module:"srl_nokia-rib-bgp"`
	ValidRoute	*bool	`path:"valid-route" module:"srl_nokia-rib-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv6Unicast_RibInOut_RibInPost_Routes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv6Unicast_RibInOut_RibInPost_Routes) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv6Unicast_RibInOut_RibInPost_Routes_InvalidReason represents the /srl_nokia-network-instance/network-instance/bgp-rib/ipv6-unicast/rib-in-out/rib-in-post/routes/invalid-reason YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv6Unicast_RibInOut_RibInPost_Routes_InvalidReason struct {
	AsLoop	*bool	`path:"as-loop" module:"srl_nokia-rib-bgp"`
	ClusterLoop	*bool	`path:"cluster-loop" module:"srl_nokia-rib-bgp"`
	NextHopUnresolved	*bool	`path:"next-hop-unresolved" module:"srl_nokia-rib-bgp"`
	RejectedRoute	*bool	`path:"rejected-route" module:"srl_nokia-rib-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv6Unicast_RibInOut_RibInPost_Routes_InvalidReason implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv6Unicast_RibInOut_RibInPost_Routes_InvalidReason) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv6Unicast_RibInOut_RibInPre represents the /srl_nokia-network-instance/network-instance/bgp-rib/ipv6-unicast/rib-in-out/rib-in-pre YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv6Unicast_RibInOut_RibInPre struct {
	Routes	map[SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv6Unicast_RibInOut_RibInPre_Routes_Key]*SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv6Unicast_RibInOut_RibInPre_Routes	`path:"routes" module:"srl_nokia-rib-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv6Unicast_RibInOut_RibInPre implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv6Unicast_RibInOut_RibInPre) IsYANGGoStruct() {}

// SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv6Unicast_RibInOut_RibInPre_Routes_Key represents the key for list Routes of element /srl_nokia-network-instance/network-instance/bgp-rib/ipv6-unicast/rib-in-out/rib-in-pre.
type SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv6Unicast_RibInOut_RibInPre_Routes_Key struct {
	Prefix	string	`path:"prefix"`
	Neighbor	string	`path:"neighbor"`
}


// SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv6Unicast_RibInOut_RibInPre_Routes represents the /srl_nokia-network-instance/network-instance/bgp-rib/ipv6-unicast/rib-in-out/rib-in-pre/routes YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv6Unicast_RibInOut_RibInPre_Routes struct {
	AttrId	*uint64	`path:"attr-id" module:"srl_nokia-rib-bgp"`
	Neighbor	*string	`path:"neighbor" module:"srl_nokia-rib-bgp"`
	Prefix	*string	`path:"prefix" module:"srl_nokia-rib-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv6Unicast_RibInOut_RibInPre_Routes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv6Unicast_RibInOut_RibInPre_Routes) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv6Unicast_RibInOut_RibOutPost represents the /srl_nokia-network-instance/network-instance/bgp-rib/ipv6-unicast/rib-in-out/rib-out-post YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv6Unicast_RibInOut_RibOutPost struct {
	Routes	map[SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv6Unicast_RibInOut_RibOutPost_Routes_Key]*SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv6Unicast_RibInOut_RibOutPost_Routes	`path:"routes" module:"srl_nokia-rib-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv6Unicast_RibInOut_RibOutPost implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv6Unicast_RibInOut_RibOutPost) IsYANGGoStruct() {}

// SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv6Unicast_RibInOut_RibOutPost_Routes_Key represents the key for list Routes of element /srl_nokia-network-instance/network-instance/bgp-rib/ipv6-unicast/rib-in-out/rib-out-post.
type SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv6Unicast_RibInOut_RibOutPost_Routes_Key struct {
	Prefix	string	`path:"prefix"`
	Neighbor	string	`path:"neighbor"`
}


// SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv6Unicast_RibInOut_RibOutPost_Routes represents the /srl_nokia-network-instance/network-instance/bgp-rib/ipv6-unicast/rib-in-out/rib-out-post/routes YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv6Unicast_RibInOut_RibOutPost_Routes struct {
	AttrId	*uint64	`path:"attr-id" module:"srl_nokia-rib-bgp"`
	Neighbor	*string	`path:"neighbor" module:"srl_nokia-rib-bgp"`
	Prefix	*string	`path:"prefix" module:"srl_nokia-rib-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv6Unicast_RibInOut_RibOutPost_Routes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_BgpRib_Ipv6Unicast_RibInOut_RibOutPost_Routes) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_Icmp represents the /srl_nokia-network-instance/network-instance/icmp YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Icmp struct {
	Statistics	*SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics	`path:"statistics" module:"srl_nokia-network-instance"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Icmp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Icmp) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_Icmp6 represents the /srl_nokia-network-instance/network-instance/icmp6 YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Icmp6 struct {
	Statistics	*SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics	`path:"statistics" module:"srl_nokia-network-instance"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Icmp6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Icmp6) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics represents the /srl_nokia-network-instance/network-instance/icmp6/statistics YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics struct {
	Total	*SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Total	`path:"total" module:"srl_nokia-network-instance"`
	Type	map[E_SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Type_Name]*SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Type	`path:"type" module:"srl_nokia-network-instance"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Total represents the /srl_nokia-network-instance/network-instance/icmp6/statistics/total YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Total struct {
	InErrorPackets	*uint64	`path:"in-error-packets" module:"srl_nokia-network-instance"`
	InPackets	*uint64	`path:"in-packets" module:"srl_nokia-network-instance"`
	OutErrorPackets	*uint64	`path:"out-error-packets" module:"srl_nokia-network-instance"`
	OutPackets	*uint64	`path:"out-packets" module:"srl_nokia-network-instance"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Total implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Total) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Type represents the /srl_nokia-network-instance/network-instance/icmp6/statistics/type YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Type struct {
	InPackets	*uint64	`path:"in-packets" module:"srl_nokia-network-instance"`
	Name	E_SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Type_Name	`path:"name" module:"srl_nokia-network-instance"`
	OutPackets	*uint64	`path:"out-packets" module:"srl_nokia-network-instance"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Type implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Type) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics represents the /srl_nokia-network-instance/network-instance/icmp/statistics YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics struct {
	Total	*SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Total	`path:"total" module:"srl_nokia-network-instance"`
	Type	map[E_SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Type_Name]*SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Type	`path:"type" module:"srl_nokia-network-instance"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Total represents the /srl_nokia-network-instance/network-instance/icmp/statistics/total YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Total struct {
	InErrorPackets	*uint64	`path:"in-error-packets" module:"srl_nokia-network-instance"`
	InPackets	*uint64	`path:"in-packets" module:"srl_nokia-network-instance"`
	OutErrorPackets	*uint64	`path:"out-error-packets" module:"srl_nokia-network-instance"`
	OutPackets	*uint64	`path:"out-packets" module:"srl_nokia-network-instance"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Total implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Total) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Type represents the /srl_nokia-network-instance/network-instance/icmp/statistics/type YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Type struct {
	InPackets	*uint64	`path:"in-packets" module:"srl_nokia-network-instance"`
	Name	E_SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Type_Name	`path:"name" module:"srl_nokia-network-instance"`
	OutPackets	*uint64	`path:"out-packets" module:"srl_nokia-network-instance"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Type implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Type) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_Interface represents the /srl_nokia-network-instance/network-instance/interface YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Interface struct {
	Name	*string	`path:"name" module:"srl_nokia-network-instance"`
	OperDownReason	E_SrlNokiaNetworkInstance_NetworkInstance_Interface_OperDownReason	`path:"oper-down-reason" module:"srl_nokia-network-instance"`
	OperState	E_SrlNokiaNetworkInstance_OperState	`path:"oper-state" module:"srl_nokia-network-instance"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Interface) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_IpForwarding represents the /srl_nokia-network-instance/network-instance/ip-forwarding YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_IpForwarding struct {
	ReceiveIpv4Check	*bool	`path:"receive-ipv4-check" module:"srl_nokia-network-instance"`
	ReceiveIpv6Check	*bool	`path:"receive-ipv6-check" module:"srl_nokia-network-instance"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_IpForwarding implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_IpForwarding) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing represents the /srl_nokia-network-instance/network-instance/ip-load-balancing YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing struct {
	ResilientHashPrefix	map[string]*SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing_ResilientHashPrefix	`path:"resilient-hash-prefix" module:"srl_nokia-network-instance"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing_ResilientHashPrefix represents the /srl_nokia-network-instance/network-instance/ip-load-balancing/resilient-hash-prefix YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing_ResilientHashPrefix struct {
	HashBucketsPerPath	*uint8	`path:"hash-buckets-per-path" module:"srl_nokia-network-instance"`
	IpPrefix	*string	`path:"ip-prefix" module:"srl_nokia-network-instance"`
	MaxPaths	*uint8	`path:"max-paths" module:"srl_nokia-network-instance"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing_ResilientHashPrefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing_ResilientHashPrefix) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_Mpls represents the /srl_nokia-network-instance/network-instance/mpls YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Mpls struct {
	AdminState	E_SrlNokiaMpls_AdminState	`path:"admin-state" module:"srl_nokia-mpls"`
	StaticMplsEntry	map[SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticMplsEntry_TopLabel_Union]*SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticMplsEntry	`path:"static-mpls-entry" module:"srl_nokia-mpls"`
	TtlPropagation	*bool	`path:"ttl-propagation" module:"srl_nokia-mpls"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Mpls implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Mpls) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticMplsEntry represents the /srl_nokia-network-instance/network-instance/mpls/static-mpls-entry YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticMplsEntry struct {
	CollectStats	*bool	`path:"collect-stats" module:"srl_nokia-mpls"`
	Installed	*bool	`path:"installed" module:"srl_nokia-mpls"`
	NextHopGroup	*string	`path:"next-hop-group" module:"srl_nokia-mpls"`
	Operation	E_SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticMplsEntry_Operation	`path:"operation" module:"srl_nokia-mpls"`
	OriginProtocol	E_SrlNokiaCommon_MplsRouteOwner	`path:"origin-protocol" module:"srl_nokia-mpls"`
	Preference	*uint8	`path:"preference" module:"srl_nokia-mpls"`
	TopLabel	SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticMplsEntry_TopLabel_Union	`path:"top-label" module:"srl_nokia-mpls"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticMplsEntry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticMplsEntry) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_Mtu represents the /srl_nokia-network-instance/network-instance/mtu YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Mtu struct {
	PathMtuDiscovery	*bool	`path:"path-mtu-discovery" module:"srl_nokia-network-instance-mtu"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Mtu implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Mtu) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups represents the /srl_nokia-network-instance/network-instance/next-hop-groups YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups struct {
	Group	map[string]*SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group	`path:"group" module:"srl_nokia-next-hop-groups"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group represents the /srl_nokia-network-instance/network-instance/next-hop-groups/group YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group struct {
	AdminState	E_SrlNokiaNextHopGroups_AdminState	`path:"admin-state" module:"srl_nokia-next-hop-groups"`
	Blackhole	*SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Blackhole	`path:"blackhole" module:"srl_nokia-next-hop-groups"`
	CollectStats	*bool	`path:"collect-stats" module:"srl_nokia-next-hop-groups"`
	Name	*string	`path:"name" module:"srl_nokia-next-hop-groups"`
	Nexthop	map[uint16]*SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop	`path:"nexthop" module:"srl_nokia-next-hop-groups"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Blackhole represents the /srl_nokia-network-instance/network-instance/next-hop-groups/group/blackhole YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Blackhole struct {
	GenerateIcmp	*bool	`path:"generate-icmp" module:"srl_nokia-next-hop-groups"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Blackhole implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Blackhole) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop represents the /srl_nokia-network-instance/network-instance/next-hop-groups/group/nexthop YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop struct {
	AdminState	E_SrlNokiaNextHopGroups_AdminState	`path:"admin-state" module:"srl_nokia-next-hop-groups"`
	Index	*uint16	`path:"index" module:"srl_nokia-next-hop-groups"`
	IpAddress	*string	`path:"ip-address" module:"srl_nokia-next-hop-groups"`
	PushedMplsLabelStack	[]SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_PushedMplsLabelStack_Union	`path:"pushed-mpls-label-stack" module:"srl_nokia-next-hop-groups"`
	Resolve	*bool	`path:"resolve" module:"srl_nokia-next-hop-groups"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_Protocols represents the /srl_nokia-network-instance/network-instance/protocols YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols struct {
	Bgp	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp	`path:"bgp" module:"srl_nokia-bgp"`
	Linux	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Linux	`path:"linux" module:"srl_nokia-linux"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp represents the /srl_nokia-network-instance/network-instance/protocols/bgp YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp struct {
	AdminState	E_SrlNokiaBgp_AdminState	`path:"admin-state" module:"srl_nokia-bgp"`
	AsPathOptions	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions	`path:"as-path-options" module:"srl_nokia-bgp"`
	AutonomousSystem	*uint32	`path:"autonomous-system" module:"srl_nokia-bgp"`
	Convergence	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Convergence	`path:"convergence" module:"srl_nokia-bgp"`
	DynamicNeighbors	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors	`path:"dynamic-neighbors" module:"srl_nokia-bgp"`
	EbgpDefaultPolicy	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_EbgpDefaultPolicy	`path:"ebgp-default-policy" module:"srl_nokia-bgp"`
	ExportPolicy	*string	`path:"export-policy" module:"srl_nokia-bgp"`
	FailureDetection	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_FailureDetection	`path:"failure-detection" module:"srl_nokia-bgp"`
	GracefulRestart	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_GracefulRestart	`path:"graceful-restart" module:"srl_nokia-bgp"`
	Group	map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group	`path:"group" module:"srl_nokia-bgp"`
	ImportPolicy	*string	`path:"import-policy" module:"srl_nokia-bgp"`
	Ipv4Unicast	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast	`path:"ipv4-unicast" module:"srl_nokia-bgp"`
	Ipv6Unicast	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast	`path:"ipv6-unicast" module:"srl_nokia-bgp"`
	LocalPreference	*uint32	`path:"local-preference" module:"srl_nokia-bgp"`
	MaintenanceGroup	*string	`path:"maintenance-group" module:"srl_nokia-bgp"`
	Neighbor	map[string]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor	`path:"neighbor" module:"srl_nokia-bgp"`
	OperState	E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_OperState	`path:"oper-state" module:"srl_nokia-bgp"`
	Preference	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Preference	`path:"preference" module:"srl_nokia-bgp"`
	RouteAdvertisement	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteAdvertisement	`path:"route-advertisement" module:"srl_nokia-bgp"`
	RouterId	*string	`path:"router-id" module:"srl_nokia-bgp"`
	SendCommunity	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_SendCommunity	`path:"send-community" module:"srl_nokia-bgp"`
	Statistics	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Statistics	`path:"statistics" module:"srl_nokia-bgp"`
	TraceOptions	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions	`path:"trace-options" module:"srl_nokia-bgp"`
	Transport	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Transport	`path:"transport" module:"srl_nokia-bgp"`
	UnderMaintenance	*bool	`path:"under-maintenance" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions represents the /srl_nokia-network-instance/network-instance/protocols/bgp/as-path-options YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions struct {
	AllowOwnAs	*uint8	`path:"allow-own-as" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_AsPathOptions) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Convergence represents the /srl_nokia-network-instance/network-instance/protocols/bgp/convergence YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Convergence struct {
	MinWaitToAdvertise	*uint16	`path:"min-wait-to-advertise" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Convergence implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Convergence) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors represents the /srl_nokia-network-instance/network-instance/protocols/bgp/dynamic-neighbors YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors struct {
	Accept	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept	`path:"accept" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept represents the /srl_nokia-network-instance/network-instance/protocols/bgp/dynamic-neighbors/accept YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept struct {
	Match	map[SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept_Match_Key]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept_Match	`path:"match" module:"srl_nokia-bgp"`
	MaxSessions	*uint16	`path:"max-sessions" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept) IsYANGGoStruct() {}

// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept_Match_Key represents the key for list Match of element /srl_nokia-network-instance/network-instance/protocols/bgp/dynamic-neighbors/accept.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept_Match_Key struct {
	Prefix	string	`path:"prefix"`
	GroupIdRange	string	`path:"group-id-range"`
}


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept_Match represents the /srl_nokia-network-instance/network-instance/protocols/bgp/dynamic-neighbors/accept/match YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept_Match struct {
	AllowedPeerAs	[]string	`path:"allowed-peer-as" module:"srl_nokia-bgp"`
	GroupIdRange	*string	`path:"group-id-range" module:"srl_nokia-bgp"`
	PeerGroup	*string	`path:"peer-group" module:"srl_nokia-bgp"`
	Prefix	*string	`path:"prefix" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept_Match implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_DynamicNeighbors_Accept_Match) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_EbgpDefaultPolicy represents the /srl_nokia-network-instance/network-instance/protocols/bgp/ebgp-default-policy YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_EbgpDefaultPolicy struct {
	ExportRejectAll	*bool	`path:"export-reject-all" module:"srl_nokia-bgp"`
	ImportRejectAll	*bool	`path:"import-reject-all" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_EbgpDefaultPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_EbgpDefaultPolicy) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_FailureDetection represents the /srl_nokia-network-instance/network-instance/protocols/bgp/failure-detection YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_FailureDetection struct {
	EnableBfd	*bool	`path:"enable-bfd" module:"srl_nokia-bgp"`
	FastFailover	*bool	`path:"fast-failover" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_FailureDetection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_FailureDetection) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_GracefulRestart represents the /srl_nokia-network-instance/network-instance/protocols/bgp/graceful-restart YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_GracefulRestart struct {
	AdminState	E_SrlNokiaBgp_AdminState	`path:"admin-state" module:"srl_nokia-bgp"`
	StaleRoutesTime	*uint16	`path:"stale-routes-time" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_GracefulRestart implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_GracefulRestart) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group represents the /srl_nokia-network-instance/network-instance/protocols/bgp/group YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group struct {
	AdminState	E_SrlNokiaBgp_AdminState	`path:"admin-state" module:"srl_nokia-bgp"`
	AsPathOptions	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions	`path:"as-path-options" module:"srl_nokia-bgp"`
	Description	*string	`path:"description" module:"srl_nokia-bgp"`
	ExportPolicy	*string	`path:"export-policy" module:"srl_nokia-bgp"`
	FailureDetection	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_FailureDetection	`path:"failure-detection" module:"srl_nokia-bgp"`
	GracefulRestart	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_GracefulRestart	`path:"graceful-restart" module:"srl_nokia-bgp"`
	GroupName	*string	`path:"group-name" module:"srl_nokia-bgp"`
	ImportPolicy	*string	`path:"import-policy" module:"srl_nokia-bgp"`
	Ipv4Unicast	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast	`path:"ipv4-unicast" module:"srl_nokia-bgp"`
	Ipv6Unicast	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv6Unicast	`path:"ipv6-unicast" module:"srl_nokia-bgp"`
	LocalAs	map[uint32]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_LocalAs	`path:"local-as" module:"srl_nokia-bgp"`
	LocalPreference	*uint32	`path:"local-preference" module:"srl_nokia-bgp"`
	MaintenanceGroup	*string	`path:"maintenance-group" module:"srl_nokia-bgp"`
	NextHopSelf	*bool	`path:"next-hop-self" module:"srl_nokia-bgp"`
	PeerAs	*uint32	`path:"peer-as" module:"srl_nokia-bgp"`
	SendCommunity	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendCommunity	`path:"send-community" module:"srl_nokia-bgp"`
	SendDefaultRoute	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendDefaultRoute	`path:"send-default-route" module:"srl_nokia-bgp"`
	Statistics	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Statistics	`path:"statistics" module:"srl_nokia-bgp"`
	Timers	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Timers	`path:"timers" module:"srl_nokia-bgp"`
	TraceOptions	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions	`path:"trace-options" module:"srl_nokia-bgp"`
	Transport	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Transport	`path:"transport" module:"srl_nokia-bgp"`
	UnderMaintenance	*bool	`path:"under-maintenance" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions represents the /srl_nokia-network-instance/network-instance/protocols/bgp/group/as-path-options YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions struct {
	AllowOwnAs	*uint8	`path:"allow-own-as" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_AsPathOptions) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_FailureDetection represents the /srl_nokia-network-instance/network-instance/protocols/bgp/group/failure-detection YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_FailureDetection struct {
	EnableBfd	*bool	`path:"enable-bfd" module:"srl_nokia-bgp"`
	FastFailover	*bool	`path:"fast-failover" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_FailureDetection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_FailureDetection) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_GracefulRestart represents the /srl_nokia-network-instance/network-instance/protocols/bgp/group/graceful-restart YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_GracefulRestart struct {
	AdminState	E_SrlNokiaBgp_AdminState	`path:"admin-state" module:"srl_nokia-bgp"`
	StaleRoutesTime	*uint16	`path:"stale-routes-time" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_GracefulRestart implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_GracefulRestart) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast represents the /srl_nokia-network-instance/network-instance/protocols/bgp/group/ipv4-unicast YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast struct {
	AdminState	E_SrlNokiaBgp_AdminState	`path:"admin-state" module:"srl_nokia-bgp"`
	AdvertiseIpv6NextHops	*bool	`path:"advertise-ipv6-next-hops" module:"srl_nokia-bgp"`
	PrefixLimit	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast_PrefixLimit	`path:"prefix-limit" module:"srl_nokia-bgp"`
	ReceiveIpv6NextHops	*bool	`path:"receive-ipv6-next-hops" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast_PrefixLimit represents the /srl_nokia-network-instance/network-instance/protocols/bgp/group/ipv4-unicast/prefix-limit YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast_PrefixLimit struct {
	MaxReceivedRoutes	*uint32	`path:"max-received-routes" module:"srl_nokia-bgp"`
	WarningThresholdPct	*uint8	`path:"warning-threshold-pct" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast_PrefixLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv4Unicast_PrefixLimit) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv6Unicast represents the /srl_nokia-network-instance/network-instance/protocols/bgp/group/ipv6-unicast YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv6Unicast struct {
	AdminState	E_SrlNokiaBgp_AdminState	`path:"admin-state" module:"srl_nokia-bgp"`
	PrefixLimit	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv6Unicast_PrefixLimit	`path:"prefix-limit" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv6Unicast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv6Unicast) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv6Unicast_PrefixLimit represents the /srl_nokia-network-instance/network-instance/protocols/bgp/group/ipv6-unicast/prefix-limit YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv6Unicast_PrefixLimit struct {
	MaxReceivedRoutes	*uint32	`path:"max-received-routes" module:"srl_nokia-bgp"`
	WarningThresholdPct	*uint8	`path:"warning-threshold-pct" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv6Unicast_PrefixLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Ipv6Unicast_PrefixLimit) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_LocalAs represents the /srl_nokia-network-instance/network-instance/protocols/bgp/group/local-as YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_LocalAs struct {
	AsNumber	*uint32	`path:"as-number" module:"srl_nokia-bgp"`
	PrependGlobalAs	*bool	`path:"prepend-global-as" module:"srl_nokia-bgp"`
	PrependLocalAs	*bool	`path:"prepend-local-as" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_LocalAs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_LocalAs) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendCommunity represents the /srl_nokia-network-instance/network-instance/protocols/bgp/group/send-community YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendCommunity struct {
	Large	*bool	`path:"large" module:"srl_nokia-bgp"`
	Standard	*bool	`path:"standard" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendCommunity implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendCommunity) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendDefaultRoute represents the /srl_nokia-network-instance/network-instance/protocols/bgp/group/send-default-route YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendDefaultRoute struct {
	ExportPolicy	*string	`path:"export-policy" module:"srl_nokia-bgp"`
	Ipv4Unicast	*bool	`path:"ipv4-unicast" module:"srl_nokia-bgp"`
	Ipv6Unicast	*bool	`path:"ipv6-unicast" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendDefaultRoute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_SendDefaultRoute) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Statistics represents the /srl_nokia-network-instance/network-instance/protocols/bgp/group/statistics YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Statistics struct {
	DisabledPeers	*uint16	`path:"disabled-peers" module:"srl_nokia-bgp"`
	DynamicPeers	*uint16	`path:"dynamic-peers" module:"srl_nokia-bgp"`
	PathMemory	*uint64	`path:"path-memory" module:"srl_nokia-bgp"`
	TotalActiveRoutes	*uint64	`path:"total-active-routes" module:"srl_nokia-bgp"`
	TotalPaths	*uint64	`path:"total-paths" module:"srl_nokia-bgp"`
	TotalPeers	*uint16	`path:"total-peers" module:"srl_nokia-bgp"`
	TotalPrefixes	*uint64	`path:"total-prefixes" module:"srl_nokia-bgp"`
	TotalReceivedRoutes	*uint64	`path:"total-received-routes" module:"srl_nokia-bgp"`
	UpPeers	*uint16	`path:"up-peers" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Statistics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Statistics) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Timers represents the /srl_nokia-network-instance/network-instance/protocols/bgp/group/timers YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Timers struct {
	ConnectRetry	*uint16	`path:"connect-retry" module:"srl_nokia-bgp"`
	HoldTime	*uint16	`path:"hold-time" module:"srl_nokia-bgp"`
	KeepaliveInterval	*uint16	`path:"keepalive-interval" module:"srl_nokia-bgp"`
	MinimumAdvertisementInterval	*uint16	`path:"minimum-advertisement-interval" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Timers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Timers) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions represents the /srl_nokia-network-instance/network-instance/protocols/bgp/group/trace-options YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions struct {
	Flag	map[E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag	`path:"flag" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag represents the /srl_nokia-network-instance/network-instance/protocols/bgp/group/trace-options/flag YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag struct {
	Modifier	E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Modifier	`path:"modifier" module:"srl_nokia-bgp"`
	Name	E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name	`path:"name" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Transport represents the /srl_nokia-network-instance/network-instance/protocols/bgp/group/transport YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Transport struct {
	LocalAddress	*string	`path:"local-address" module:"srl_nokia-bgp"`
	PassiveMode	*bool	`path:"passive-mode" module:"srl_nokia-bgp"`
	TcpMss	*uint16	`path:"tcp-mss" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Transport implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_Transport) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast represents the /srl_nokia-network-instance/network-instance/protocols/bgp/ipv4-unicast YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast struct {
	ActiveRoutes	*uint64	`path:"active-routes" module:"srl_nokia-bgp"`
	AdminState	E_SrlNokiaBgp_AdminState	`path:"admin-state" module:"srl_nokia-bgp"`
	AdvertiseIpv6NextHops	*bool	`path:"advertise-ipv6-next-hops" module:"srl_nokia-bgp"`
	Convergence	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Convergence	`path:"convergence" module:"srl_nokia-bgp"`
	Multipath	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Multipath	`path:"multipath" module:"srl_nokia-bgp"`
	ReceiveIpv6NextHops	*bool	`path:"receive-ipv6-next-hops" module:"srl_nokia-bgp"`
	ReceivedRoutes	*uint64	`path:"received-routes" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Convergence represents the /srl_nokia-network-instance/network-instance/protocols/bgp/ipv4-unicast/convergence YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Convergence struct {
	ConvergedPeers	*uint16	`path:"converged-peers" module:"srl_nokia-bgp"`
	ConvergenceState	E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Convergence_ConvergenceState	`path:"convergence-state" module:"srl_nokia-bgp"`
	ConvergenceTime	*uint64	`path:"convergence-time" module:"srl_nokia-bgp"`
	FirstUpPeerTime	*uint64	`path:"first-up-peer-time" module:"srl_nokia-bgp"`
	LastUpPeerTime	*uint64	`path:"last-up-peer-time" module:"srl_nokia-bgp"`
	MaxWaitToAdvertise	*uint16	`path:"max-wait-to-advertise" module:"srl_nokia-bgp"`
	OperMaxWaitToAdvertise	*uint16	`path:"oper-max-wait-to-advertise" module:"srl_nokia-bgp"`
	UpPeers	*uint16	`path:"up-peers" module:"srl_nokia-bgp"`
	UpPeersWhenMinExpired	*uint16	`path:"up-peers-when-min-expired" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Convergence implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Convergence) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Multipath represents the /srl_nokia-network-instance/network-instance/protocols/bgp/ipv4-unicast/multipath YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Multipath struct {
	AllowMultipleAs	*bool	`path:"allow-multiple-as" module:"srl_nokia-bgp"`
	MaxPathsLevel_1	*uint32	`path:"max-paths-level-1" module:"srl_nokia-bgp"`
	MaxPathsLevel_2	*uint32	`path:"max-paths-level-2" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Multipath implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Multipath) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast represents the /srl_nokia-network-instance/network-instance/protocols/bgp/ipv6-unicast YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast struct {
	ActiveRoutes	*uint64	`path:"active-routes" module:"srl_nokia-bgp"`
	AdminState	E_SrlNokiaBgp_AdminState	`path:"admin-state" module:"srl_nokia-bgp"`
	Convergence	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_Convergence	`path:"convergence" module:"srl_nokia-bgp"`
	Multipath	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_Multipath	`path:"multipath" module:"srl_nokia-bgp"`
	ReceivedRoutes	*uint64	`path:"received-routes" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_Convergence represents the /srl_nokia-network-instance/network-instance/protocols/bgp/ipv6-unicast/convergence YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_Convergence struct {
	ConvergedPeers	*uint16	`path:"converged-peers" module:"srl_nokia-bgp"`
	ConvergenceState	E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv4Unicast_Convergence_ConvergenceState	`path:"convergence-state" module:"srl_nokia-bgp"`
	ConvergenceTime	*uint64	`path:"convergence-time" module:"srl_nokia-bgp"`
	FirstUpPeerTime	*uint64	`path:"first-up-peer-time" module:"srl_nokia-bgp"`
	LastUpPeerTime	*uint64	`path:"last-up-peer-time" module:"srl_nokia-bgp"`
	MaxWaitToAdvertise	*uint16	`path:"max-wait-to-advertise" module:"srl_nokia-bgp"`
	OperMaxWaitToAdvertise	*uint16	`path:"oper-max-wait-to-advertise" module:"srl_nokia-bgp"`
	UpPeers	*uint16	`path:"up-peers" module:"srl_nokia-bgp"`
	UpPeersWhenMinExpired	*uint16	`path:"up-peers-when-min-expired" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_Convergence implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_Convergence) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_Multipath represents the /srl_nokia-network-instance/network-instance/protocols/bgp/ipv6-unicast/multipath YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_Multipath struct {
	AllowMultipleAs	*bool	`path:"allow-multiple-as" module:"srl_nokia-bgp"`
	MaxPathsLevel_1	*uint32	`path:"max-paths-level-1" module:"srl_nokia-bgp"`
	MaxPathsLevel_2	*uint32	`path:"max-paths-level-2" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_Multipath implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Ipv6Unicast_Multipath) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor represents the /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor struct {
	AdminState	E_SrlNokiaBgp_AdminState	`path:"admin-state" module:"srl_nokia-bgp"`
	AdvertisedCapabilities	[]E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AdvertisedCapabilities	`path:"advertised-capabilities" module:"srl_nokia-bgp"`
	AsPathOptions	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions	`path:"as-path-options" module:"srl_nokia-bgp"`
	Description	*string	`path:"description" module:"srl_nokia-bgp"`
	DiscoveredByLldp	*bool	`path:"discovered-by-lldp" module:"srl_nokia-bgp"`
	DynamicNeighbor	*bool	`path:"dynamic-neighbor" module:"srl_nokia-bgp"`
	EstablishedTransitions	*uint64	`path:"established-transitions" module:"srl_nokia-bgp"`
	ExportPolicy	*string	`path:"export-policy" module:"srl_nokia-bgp"`
	FailureDetection	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_FailureDetection	`path:"failure-detection" module:"srl_nokia-bgp"`
	GracefulRestart	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart	`path:"graceful-restart" module:"srl_nokia-bgp"`
	ImportPolicy	*string	`path:"import-policy" module:"srl_nokia-bgp"`
	Ipv4Unicast	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast	`path:"ipv4-unicast" module:"srl_nokia-bgp"`
	Ipv6Unicast	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast	`path:"ipv6-unicast" module:"srl_nokia-bgp"`
	LastEstablished	*string	`path:"last-established" module:"srl_nokia-bgp"`
	LastEvent	E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastEvent	`path:"last-event" module:"srl_nokia-bgp"`
	LastNotificationErrorCode	E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorCode	`path:"last-notification-error-code" module:"srl_nokia-bgp"`
	LastNotificationErrorSubcode	E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastNotificationErrorSubcode	`path:"last-notification-error-subcode" module:"srl_nokia-bgp"`
	LastState	E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LastState	`path:"last-state" module:"srl_nokia-bgp"`
	LocalAs	map[uint32]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LocalAs	`path:"local-as" module:"srl_nokia-bgp"`
	LocalPreference	*uint32	`path:"local-preference" module:"srl_nokia-bgp"`
	MaintenanceGroup	*string	`path:"maintenance-group" module:"srl_nokia-bgp"`
	NextHopSelf	*bool	`path:"next-hop-self" module:"srl_nokia-bgp"`
	PeerAddress	*string	`path:"peer-address" module:"srl_nokia-bgp"`
	PeerAs	*uint32	`path:"peer-as" module:"srl_nokia-bgp"`
	PeerGroup	*string	`path:"peer-group" module:"srl_nokia-bgp"`
	ReceivedAfiSafi	[]E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedAfiSafi	`path:"received-afi-safi" module:"srl_nokia-bgp"`
	ReceivedCapabilities	[]E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedCapabilities	`path:"received-capabilities" module:"srl_nokia-bgp"`
	ReceivedEndOfRib	[]E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedEndOfRib	`path:"received-end-of-rib" module:"srl_nokia-bgp"`
	ReceivedMessages	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedMessages	`path:"received-messages" module:"srl_nokia-bgp"`
	SendCommunity	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendCommunity	`path:"send-community" module:"srl_nokia-bgp"`
	SendDefaultRoute	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendDefaultRoute	`path:"send-default-route" module:"srl_nokia-bgp"`
	SentEndOfRib	[]E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SentEndOfRib	`path:"sent-end-of-rib" module:"srl_nokia-bgp"`
	SentMessages	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SentMessages	`path:"sent-messages" module:"srl_nokia-bgp"`
	SessionState	E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SessionState	`path:"session-state" module:"srl_nokia-bgp"`
	SlowPeer	E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SlowPeer	`path:"slow-peer" module:"srl_nokia-bgp"`
	Timers	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Timers	`path:"timers" module:"srl_nokia-bgp"`
	TraceOptions	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions	`path:"trace-options" module:"srl_nokia-bgp"`
	Transport	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Transport	`path:"transport" module:"srl_nokia-bgp"`
	UnderMaintenance	*bool	`path:"under-maintenance" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions represents the /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor/as-path-options YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions struct {
	AllowOwnAs	*uint8	`path:"allow-own-as" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_AsPathOptions) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_FailureDetection represents the /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor/failure-detection YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_FailureDetection struct {
	EnableBfd	*bool	`path:"enable-bfd" module:"srl_nokia-bgp"`
	FastFailover	*bool	`path:"fast-failover" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_FailureDetection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_FailureDetection) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart represents the /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor/graceful-restart YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart struct {
	AdminState	E_SrlNokiaBgp_AdminState	`path:"admin-state" module:"srl_nokia-bgp"`
	HelperActive	*bool	`path:"helper-active" module:"srl_nokia-bgp"`
	LastRestartTime	*string	`path:"last-restart-time" module:"srl_nokia-bgp"`
	NeighborCapability	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart_NeighborCapability	`path:"neighbor-capability" module:"srl_nokia-bgp"`
	NumberOfRestarts	*uint16	`path:"number-of-restarts" module:"srl_nokia-bgp"`
	StaleRoutesTime	*uint16	`path:"stale-routes-time" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart_NeighborCapability represents the /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor/graceful-restart/neighbor-capability YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart_NeighborCapability struct {
	AfiSafi	map[E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart_NeighborCapability_AfiSafi_Name]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart_NeighborCapability_AfiSafi	`path:"afi-safi" module:"srl_nokia-bgp"`
	RestartTime	*uint16	`path:"restart-time" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart_NeighborCapability implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart_NeighborCapability) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart_NeighborCapability_AfiSafi represents the /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor/graceful-restart/neighbor-capability/afi-safi YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart_NeighborCapability_AfiSafi struct {
	ForwardingPreserved	*bool	`path:"forwarding-preserved" module:"srl_nokia-bgp"`
	Name	E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart_NeighborCapability_AfiSafi_Name	`path:"name" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart_NeighborCapability_AfiSafi implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_GracefulRestart_NeighborCapability_AfiSafi) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast represents the /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor/ipv4-unicast YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast struct {
	ActiveRoutes	*uint32	`path:"active-routes" module:"srl_nokia-bgp"`
	AdminState	E_SrlNokiaBgp_AdminState	`path:"admin-state" module:"srl_nokia-bgp"`
	AdvertiseIpv6NextHops	*bool	`path:"advertise-ipv6-next-hops" module:"srl_nokia-bgp"`
	OperState	E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast_OperState	`path:"oper-state" module:"srl_nokia-bgp"`
	PrefixLimit	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast_PrefixLimit	`path:"prefix-limit" module:"srl_nokia-bgp"`
	ReceiveIpv6NextHops	*bool	`path:"receive-ipv6-next-hops" module:"srl_nokia-bgp"`
	ReceivedRoutes	*uint32	`path:"received-routes" module:"srl_nokia-bgp"`
	RejectedRoutes	*uint32	`path:"rejected-routes" module:"srl_nokia-bgp"`
	SentRoutes	*uint32	`path:"sent-routes" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast_PrefixLimit represents the /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor/ipv4-unicast/prefix-limit YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast_PrefixLimit struct {
	MaxReceivedRoutes	*uint32	`path:"max-received-routes" module:"srl_nokia-bgp"`
	WarningThresholdPct	*uint8	`path:"warning-threshold-pct" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast_PrefixLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv4Unicast_PrefixLimit) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast represents the /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor/ipv6-unicast YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast struct {
	ActiveRoutes	*uint32	`path:"active-routes" module:"srl_nokia-bgp"`
	AdminState	E_SrlNokiaBgp_AdminState	`path:"admin-state" module:"srl_nokia-bgp"`
	OperState	E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast_OperState	`path:"oper-state" module:"srl_nokia-bgp"`
	PrefixLimit	*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast_PrefixLimit	`path:"prefix-limit" module:"srl_nokia-bgp"`
	ReceivedRoutes	*uint32	`path:"received-routes" module:"srl_nokia-bgp"`
	RejectedRoutes	*uint32	`path:"rejected-routes" module:"srl_nokia-bgp"`
	SentRoutes	*uint32	`path:"sent-routes" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast_PrefixLimit represents the /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor/ipv6-unicast/prefix-limit YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast_PrefixLimit struct {
	MaxReceivedRoutes	*uint32	`path:"max-received-routes" module:"srl_nokia-bgp"`
	WarningThresholdPct	*uint8	`path:"warning-threshold-pct" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast_PrefixLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Ipv6Unicast_PrefixLimit) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LocalAs represents the /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor/local-as YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LocalAs struct {
	AsNumber	*uint32	`path:"as-number" module:"srl_nokia-bgp"`
	PrependGlobalAs	*bool	`path:"prepend-global-as" module:"srl_nokia-bgp"`
	PrependLocalAs	*bool	`path:"prepend-local-as" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LocalAs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_LocalAs) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedMessages represents the /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor/received-messages YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedMessages struct {
	Keepalives	*uint64	`path:"keepalives" module:"srl_nokia-bgp"`
	LastNotificationTime	*string	`path:"last-notification-time" module:"srl_nokia-bgp"`
	LastUpdateTime	*string	`path:"last-update-time" module:"srl_nokia-bgp"`
	MalformedUpdates	*uint64	`path:"malformed-updates" module:"srl_nokia-bgp"`
	Notifications	*uint64	`path:"notifications" module:"srl_nokia-bgp"`
	Opens	*uint64	`path:"opens" module:"srl_nokia-bgp"`
	QueueDepth	*uint32	`path:"queue-depth" module:"srl_nokia-bgp"`
	RouteRefresh	*uint64	`path:"route-refresh" module:"srl_nokia-bgp"`
	TotalMessages	*uint64	`path:"total-messages" module:"srl_nokia-bgp"`
	TotalNonUpdates	*uint64	`path:"total-non-updates" module:"srl_nokia-bgp"`
	TotalUpdates	*uint64	`path:"total-updates" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedMessages implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_ReceivedMessages) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendCommunity represents the /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor/send-community YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendCommunity struct {
	Large	*bool	`path:"large" module:"srl_nokia-bgp"`
	Standard	*bool	`path:"standard" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendCommunity implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendCommunity) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendDefaultRoute represents the /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor/send-default-route YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendDefaultRoute struct {
	ExportPolicy	*string	`path:"export-policy" module:"srl_nokia-bgp"`
	Ipv4Unicast	*bool	`path:"ipv4-unicast" module:"srl_nokia-bgp"`
	Ipv6Unicast	*bool	`path:"ipv6-unicast" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendDefaultRoute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SendDefaultRoute) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SentMessages represents the /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor/sent-messages YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SentMessages struct {
	Keepalives	*uint64	`path:"keepalives" module:"srl_nokia-bgp"`
	LastNotificationTime	*string	`path:"last-notification-time" module:"srl_nokia-bgp"`
	Notifications	*uint64	`path:"notifications" module:"srl_nokia-bgp"`
	Opens	*uint64	`path:"opens" module:"srl_nokia-bgp"`
	QueueDepth	*uint32	`path:"queue-depth" module:"srl_nokia-bgp"`
	RouteRefresh	*uint64	`path:"route-refresh" module:"srl_nokia-bgp"`
	TotalMessages	*uint64	`path:"total-messages" module:"srl_nokia-bgp"`
	TotalNonUpdates	*uint64	`path:"total-non-updates" module:"srl_nokia-bgp"`
	TotalUpdates	*uint64	`path:"total-updates" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SentMessages implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_SentMessages) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Timers represents the /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor/timers YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Timers struct {
	ConnectRetry	*uint16	`path:"connect-retry" module:"srl_nokia-bgp"`
	HoldTime	*uint16	`path:"hold-time" module:"srl_nokia-bgp"`
	KeepaliveInterval	*uint16	`path:"keepalive-interval" module:"srl_nokia-bgp"`
	MinimumAdvertisementInterval	*uint16	`path:"minimum-advertisement-interval" module:"srl_nokia-bgp"`
	NegotiatedHoldTime	*uint16	`path:"negotiated-hold-time" module:"srl_nokia-bgp"`
	NegotiatedKeepaliveInterval	*uint16	`path:"negotiated-keepalive-interval" module:"srl_nokia-bgp"`
	NextConnectRetryTime	*string	`path:"next-connect-retry-time" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Timers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Timers) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions represents the /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor/trace-options YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions struct {
	Flag	map[E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions_Flag	`path:"flag" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions_Flag represents the /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor/trace-options/flag YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions_Flag struct {
	Modifier	E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Modifier	`path:"modifier" module:"srl_nokia-bgp"`
	Name	E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name	`path:"name" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions_Flag implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_TraceOptions_Flag) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Transport represents the /srl_nokia-network-instance/network-instance/protocols/bgp/neighbor/transport YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Transport struct {
	LocalAddress	*string	`path:"local-address" module:"srl_nokia-bgp"`
	LocalPort	*uint16	`path:"local-port" module:"srl_nokia-bgp"`
	PassiveMode	*bool	`path:"passive-mode" module:"srl_nokia-bgp"`
	RemotePort	*uint16	`path:"remote-port" module:"srl_nokia-bgp"`
	TcpMss	*uint16	`path:"tcp-mss" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Transport implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Neighbor_Transport) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Preference represents the /srl_nokia-network-instance/network-instance/protocols/bgp/preference YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Preference struct {
	Ebgp	*uint8	`path:"ebgp" module:"srl_nokia-bgp"`
	Ibgp	*uint8	`path:"ibgp" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Preference implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Preference) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteAdvertisement represents the /srl_nokia-network-instance/network-instance/protocols/bgp/route-advertisement YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteAdvertisement struct {
	RapidWithdrawal	*bool	`path:"rapid-withdrawal" module:"srl_nokia-bgp"`
	WaitForFibInstall	*bool	`path:"wait-for-fib-install" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteAdvertisement implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_RouteAdvertisement) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_SendCommunity represents the /srl_nokia-network-instance/network-instance/protocols/bgp/send-community YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_SendCommunity struct {
	Large	*bool	`path:"large" module:"srl_nokia-bgp"`
	Standard	*bool	`path:"standard" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_SendCommunity implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_SendCommunity) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Statistics represents the /srl_nokia-network-instance/network-instance/protocols/bgp/statistics YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Statistics struct {
	DisabledPeers	*uint16	`path:"disabled-peers" module:"srl_nokia-bgp"`
	DynamicPeers	*uint16	`path:"dynamic-peers" module:"srl_nokia-bgp"`
	PathMemory	*uint64	`path:"path-memory" module:"srl_nokia-bgp"`
	TotalActiveRoutes	*uint64	`path:"total-active-routes" module:"srl_nokia-bgp"`
	TotalPaths	*uint64	`path:"total-paths" module:"srl_nokia-bgp"`
	TotalPeers	*uint16	`path:"total-peers" module:"srl_nokia-bgp"`
	TotalPrefixes	*uint64	`path:"total-prefixes" module:"srl_nokia-bgp"`
	TotalReceivedRoutes	*uint64	`path:"total-received-routes" module:"srl_nokia-bgp"`
	UpPeers	*uint16	`path:"up-peers" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Statistics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Statistics) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions represents the /srl_nokia-network-instance/network-instance/protocols/bgp/trace-options YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions struct {
	Flag	map[E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name]*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions_Flag	`path:"flag" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions_Flag represents the /srl_nokia-network-instance/network-instance/protocols/bgp/trace-options/flag YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions_Flag struct {
	Modifier	E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Modifier	`path:"modifier" module:"srl_nokia-bgp"`
	Name	E_SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Group_TraceOptions_Flag_Name	`path:"name" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions_Flag implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_TraceOptions_Flag) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Transport represents the /srl_nokia-network-instance/network-instance/protocols/bgp/transport YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Transport struct {
	TcpMss	*uint16	`path:"tcp-mss" module:"srl_nokia-bgp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Transport implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Bgp_Transport) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_Protocols_Linux represents the /srl_nokia-network-instance/network-instance/protocols/linux YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Protocols_Linux struct {
	ExportNeighbors	*bool	`path:"export-neighbors" module:"srl_nokia-linux"`
	ExportRoutes	*bool	`path:"export-routes" module:"srl_nokia-linux"`
	ImportRoutes	*bool	`path:"import-routes" module:"srl_nokia-linux"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Protocols_Linux implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Protocols_Linux) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_RouteTable represents the /srl_nokia-network-instance/network-instance/route-table YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_RouteTable struct {
	Ipv4Unicast	*SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast	`path:"ipv4-unicast" module:"srl_nokia-ip-route-tables"`
	Ipv6Unicast	*SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv6Unicast	`path:"ipv6-unicast" module:"srl_nokia-ip-route-tables"`
	Mpls	*SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Mpls	`path:"mpls" module:"srl_nokia-mpls-route-tables"`
	NextHop	map[uint64]*SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop	`path:"next-hop" module:"srl_nokia-ip-route-tables"`
	NextHopGroup	map[uint64]*SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHopGroup	`path:"next-hop-group" module:"srl_nokia-ip-route-tables"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_RouteTable implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_RouteTable) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast represents the /srl_nokia-network-instance/network-instance/route-table/ipv4-unicast YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast struct {
	Route	map[SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_Route_Key]*SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_Route	`path:"route" module:"srl_nokia-ip-route-tables"`
	Statistics	*SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_Statistics	`path:"statistics" module:"srl_nokia-ip-route-tables"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast) IsYANGGoStruct() {}

// SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_Route_Key represents the key for list Route of element /srl_nokia-network-instance/network-instance/route-table/ipv4-unicast.
type SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_Route_Key struct {
	Ipv4Prefix	string	`path:"ipv4-prefix"`
	Id	uint16	`path:"id"`
}


// SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_Route represents the /srl_nokia-network-instance/network-instance/route-table/ipv4-unicast/route YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_Route struct {
	Active	*bool	`path:"active" module:"srl_nokia-ip-route-tables"`
	FibChangePending	*bool	`path:"fib-change-pending" module:"srl_nokia-ip-route-tables"`
	FibProgramming	*SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_Route_FibProgramming	`path:"fib-programming" module:"srl_nokia-ip-route-tables"`
	Id	*uint16	`path:"id" module:"srl_nokia-ip-route-tables"`
	Ipv4Prefix	*string	`path:"ipv4-prefix" module:"srl_nokia-ip-route-tables"`
	LastAppUpdate	*string	`path:"last-app-update" module:"srl_nokia-ip-route-tables"`
	Metric	*uint32	`path:"metric" module:"srl_nokia-ip-route-tables"`
	NextHopGroup	*uint64	`path:"next-hop-group" module:"srl_nokia-ip-route-tables"`
	Owner	E_SrlNokiaCommon_IpRouteOwner	`path:"owner" module:"srl_nokia-ip-route-tables"`
	Preference	*uint8	`path:"preference" module:"srl_nokia-ip-route-tables"`
	ResilientHash	*bool	`path:"resilient-hash" module:"srl_nokia-ip-route-tables"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_Route implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_Route) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_Route_FibProgramming represents the /srl_nokia-network-instance/network-instance/route-table/ipv4-unicast/route/fib-programming YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_Route_FibProgramming struct {
	FailedSlots	[]uint8	`path:"failed-slots" module:"srl_nokia-ip-route-tables"`
	Status	E_SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_Route_FibProgramming_Status	`path:"status" module:"srl_nokia-ip-route-tables"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_Route_FibProgramming implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_Route_FibProgramming) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_Statistics represents the /srl_nokia-network-instance/network-instance/route-table/ipv4-unicast/statistics YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_Statistics struct {
	ActiveEntries	*uint64	`path:"active-entries" module:"srl_nokia-ip-route-tables"`
	ActiveEntriesWithEcmp	*uint64	`path:"active-entries-with-ecmp" module:"srl_nokia-ip-route-tables"`
	TotalEntries	*uint64	`path:"total-entries" module:"srl_nokia-ip-route-tables"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_Statistics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_Statistics) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv6Unicast represents the /srl_nokia-network-instance/network-instance/route-table/ipv6-unicast YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv6Unicast struct {
	Route	map[SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv6Unicast_Route_Key]*SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv6Unicast_Route	`path:"route" module:"srl_nokia-ip-route-tables"`
	Statistics	*SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv6Unicast_Statistics	`path:"statistics" module:"srl_nokia-ip-route-tables"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv6Unicast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv6Unicast) IsYANGGoStruct() {}

// SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv6Unicast_Route_Key represents the key for list Route of element /srl_nokia-network-instance/network-instance/route-table/ipv6-unicast.
type SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv6Unicast_Route_Key struct {
	Ipv6Prefix	string	`path:"ipv6-prefix"`
	Id	uint16	`path:"id"`
}


// SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv6Unicast_Route represents the /srl_nokia-network-instance/network-instance/route-table/ipv6-unicast/route YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv6Unicast_Route struct {
	Active	*bool	`path:"active" module:"srl_nokia-ip-route-tables"`
	FibChangePending	*bool	`path:"fib-change-pending" module:"srl_nokia-ip-route-tables"`
	FibProgramming	*SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv6Unicast_Route_FibProgramming	`path:"fib-programming" module:"srl_nokia-ip-route-tables"`
	Id	*uint16	`path:"id" module:"srl_nokia-ip-route-tables"`
	Ipv6Prefix	*string	`path:"ipv6-prefix" module:"srl_nokia-ip-route-tables"`
	LastAppUpdate	*string	`path:"last-app-update" module:"srl_nokia-ip-route-tables"`
	Metric	*uint32	`path:"metric" module:"srl_nokia-ip-route-tables"`
	NextHopGroup	*uint64	`path:"next-hop-group" module:"srl_nokia-ip-route-tables"`
	Owner	E_SrlNokiaCommon_IpRouteOwner	`path:"owner" module:"srl_nokia-ip-route-tables"`
	Preference	*uint8	`path:"preference" module:"srl_nokia-ip-route-tables"`
	ResilientHash	*bool	`path:"resilient-hash" module:"srl_nokia-ip-route-tables"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv6Unicast_Route implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv6Unicast_Route) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv6Unicast_Route_FibProgramming represents the /srl_nokia-network-instance/network-instance/route-table/ipv6-unicast/route/fib-programming YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv6Unicast_Route_FibProgramming struct {
	FailedSlots	[]uint8	`path:"failed-slots" module:"srl_nokia-ip-route-tables"`
	Status	E_SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv4Unicast_Route_FibProgramming_Status	`path:"status" module:"srl_nokia-ip-route-tables"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv6Unicast_Route_FibProgramming implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv6Unicast_Route_FibProgramming) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv6Unicast_Statistics represents the /srl_nokia-network-instance/network-instance/route-table/ipv6-unicast/statistics YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv6Unicast_Statistics struct {
	ActiveEntries	*uint64	`path:"active-entries" module:"srl_nokia-ip-route-tables"`
	ActiveEntriesWithEcmp	*uint64	`path:"active-entries-with-ecmp" module:"srl_nokia-ip-route-tables"`
	TotalEntries	*uint64	`path:"total-entries" module:"srl_nokia-ip-route-tables"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv6Unicast_Statistics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Ipv6Unicast_Statistics) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Mpls represents the /srl_nokia-network-instance/network-instance/route-table/mpls YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Mpls struct {
	Route	map[SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Mpls_Route_Key]*SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Mpls_Route	`path:"route" module:"srl_nokia-mpls-route-tables"`
	Statistics	*SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Mpls_Statistics	`path:"statistics" module:"srl_nokia-mpls-route-tables"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Mpls implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Mpls) IsYANGGoStruct() {}

// SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Mpls_Route_Key represents the key for list Route of element /srl_nokia-network-instance/network-instance/route-table/mpls.
type SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Mpls_Route_Key struct {
	Label	SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Mpls_Route_Label_Union	`path:"label"`
	Id	uint16	`path:"id"`
}


// SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Mpls_Route represents the /srl_nokia-network-instance/network-instance/route-table/mpls/route YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Mpls_Route struct {
	Active	*bool	`path:"active" module:"srl_nokia-mpls-route-tables"`
	FibChangePending	*bool	`path:"fib-change-pending" module:"srl_nokia-mpls-route-tables"`
	Id	*uint16	`path:"id" module:"srl_nokia-mpls-route-tables"`
	Label	SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Mpls_Route_Label_Union	`path:"label" module:"srl_nokia-mpls-route-tables"`
	LastAppUpdate	*string	`path:"last-app-update" module:"srl_nokia-mpls-route-tables"`
	NextHopGroup	*uint64	`path:"next-hop-group" module:"srl_nokia-mpls-route-tables"`
	Owner	E_SrlNokiaCommon_MplsRouteOwner	`path:"owner" module:"srl_nokia-mpls-route-tables"`
	Preference	*uint8	`path:"preference" module:"srl_nokia-mpls-route-tables"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Mpls_Route implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Mpls_Route) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Mpls_Statistics represents the /srl_nokia-network-instance/network-instance/route-table/mpls/statistics YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Mpls_Statistics struct {
	ActiveEntries	*uint64	`path:"active-entries" module:"srl_nokia-mpls-route-tables"`
	ActiveEntriesWithEcmp	*uint64	`path:"active-entries-with-ecmp" module:"srl_nokia-mpls-route-tables"`
	TotalEntries	*uint64	`path:"total-entries" module:"srl_nokia-mpls-route-tables"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Mpls_Statistics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Mpls_Statistics) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop represents the /srl_nokia-network-instance/network-instance/route-table/next-hop YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop struct {
	EncapsulateHeader	E_SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_EncapsulateHeader	`path:"encapsulate-header" module:"srl_nokia-ip-route-tables"`
	Index	*uint64	`path:"index" module:"srl_nokia-ip-route-tables"`
	IpAddress	*string	`path:"ip-address" module:"srl_nokia-ip-route-tables"`
	PushedMplsLabelStack	[]SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_PushedMplsLabelStack_Union	`path:"pushed-mpls-label-stack" module:"srl_nokia-ip-route-tables"`
	ResolvingRoute	*SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_ResolvingRoute	`path:"resolving-route" module:"srl_nokia-ip-route-tables"`
	Subinterface	*string	`path:"subinterface" module:"srl_nokia-ip-route-tables"`
	Type	E_SrlNokiaIpRouteTables_FibNexthopType	`path:"type" module:"srl_nokia-ip-route-tables"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHopGroup represents the /srl_nokia-network-instance/network-instance/route-table/next-hop-group YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHopGroup struct {
	Index	*uint64	`path:"index" module:"srl_nokia-ip-route-tables"`
	LastAppUpdate	*string	`path:"last-app-update" module:"srl_nokia-ip-route-tables"`
	NextHop	map[uint16]*SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHopGroup_NextHop	`path:"next-hop" module:"srl_nokia-ip-route-tables"`
	Owner	E_SrlNokiaCommon_NhgOwner	`path:"owner" module:"srl_nokia-ip-route-tables"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHopGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHopGroup) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHopGroup_NextHop represents the /srl_nokia-network-instance/network-instance/route-table/next-hop-group/next-hop YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHopGroup_NextHop struct {
	Active	*bool	`path:"active" module:"srl_nokia-ip-route-tables"`
	Id	*uint16	`path:"id" module:"srl_nokia-ip-route-tables"`
	NextHop	*uint64	`path:"next-hop" module:"srl_nokia-ip-route-tables"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHopGroup_NextHop implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHopGroup_NextHop) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_ResolvingRoute represents the /srl_nokia-network-instance/network-instance/route-table/next-hop/resolving-route YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_ResolvingRoute struct {
	IpPrefix	*string	`path:"ip-prefix" module:"srl_nokia-ip-route-tables"`
	Owner	E_SrlNokiaCommon_IpRouteOwner	`path:"owner" module:"srl_nokia-ip-route-tables"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_ResolvingRoute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_ResolvingRoute) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_StaticRoutes represents the /srl_nokia-network-instance/network-instance/static-routes YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_StaticRoutes struct {
	Route	map[string]*SrlNokiaNetworkInstance_NetworkInstance_StaticRoutes_Route	`path:"route" module:"srl_nokia-static-routes"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_StaticRoutes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_StaticRoutes) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_StaticRoutes_Route represents the /srl_nokia-network-instance/network-instance/static-routes/route YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_StaticRoutes_Route struct {
	AdminState	E_SrlNokiaStaticRoutes_AdminState	`path:"admin-state" module:"srl_nokia-static-routes"`
	Installed	*bool	`path:"installed" module:"srl_nokia-static-routes"`
	Metric	*uint32	`path:"metric" module:"srl_nokia-static-routes"`
	NextHopGroup	*string	`path:"next-hop-group" module:"srl_nokia-static-routes"`
	Preference	*uint8	`path:"preference" module:"srl_nokia-static-routes"`
	Prefix	*string	`path:"prefix" module:"srl_nokia-static-routes"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_StaticRoutes_Route implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_StaticRoutes_Route) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_Tcp represents the /srl_nokia-network-instance/network-instance/tcp YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Tcp struct {
	Connection	map[SrlNokiaNetworkInstance_NetworkInstance_Tcp_Connection_Key]*SrlNokiaNetworkInstance_NetworkInstance_Tcp_Connection	`path:"connection" module:"srl_nokia-tcp-udp"`
	ListeningApplication	map[SrlNokiaNetworkInstance_NetworkInstance_Tcp_ListeningApplication_Key]*SrlNokiaNetworkInstance_NetworkInstance_Tcp_ListeningApplication	`path:"listening-application" module:"srl_nokia-tcp-udp"`
	Statistics	*SrlNokiaNetworkInstance_NetworkInstance_Tcp_Statistics	`path:"statistics" module:"srl_nokia-tcp-udp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Tcp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Tcp) IsYANGGoStruct() {}

// SrlNokiaNetworkInstance_NetworkInstance_Tcp_Connection_Key represents the key for list Connection of element /srl_nokia-network-instance/network-instance/tcp.
type SrlNokiaNetworkInstance_NetworkInstance_Tcp_Connection_Key struct {
	LocalAddress	string	`path:"local-address"`
	LocalPort	uint16	`path:"local-port"`
	RemoteAddress	string	`path:"remote-address"`
	RemotePort	uint16	`path:"remote-port"`
}

// SrlNokiaNetworkInstance_NetworkInstance_Tcp_ListeningApplication_Key represents the key for list ListeningApplication of element /srl_nokia-network-instance/network-instance/tcp.
type SrlNokiaNetworkInstance_NetworkInstance_Tcp_ListeningApplication_Key struct {
	LocalAddress	string	`path:"local-address"`
	LocalPort	uint16	`path:"local-port"`
}


// SrlNokiaNetworkInstance_NetworkInstance_Tcp_Connection represents the /srl_nokia-network-instance/network-instance/tcp/connection YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Tcp_Connection struct {
	LocalAddress	*string	`path:"local-address" module:"srl_nokia-tcp-udp"`
	LocalPort	*uint16	`path:"local-port" module:"srl_nokia-tcp-udp"`
	ProcessId	*uint32	`path:"process-id" module:"srl_nokia-tcp-udp"`
	RemoteAddress	*string	`path:"remote-address" module:"srl_nokia-tcp-udp"`
	RemotePort	*uint16	`path:"remote-port" module:"srl_nokia-tcp-udp"`
	SessionState	E_SrlNokiaNetworkInstance_NetworkInstance_Tcp_Connection_SessionState	`path:"session-state" module:"srl_nokia-tcp-udp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Tcp_Connection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Tcp_Connection) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_Tcp_ListeningApplication represents the /srl_nokia-network-instance/network-instance/tcp/listening-application YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Tcp_ListeningApplication struct {
	LocalAddress	*string	`path:"local-address" module:"srl_nokia-tcp-udp"`
	LocalPort	*uint16	`path:"local-port" module:"srl_nokia-tcp-udp"`
	ProcessId	*uint32	`path:"process-id" module:"srl_nokia-tcp-udp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Tcp_ListeningApplication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Tcp_ListeningApplication) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_Tcp_Statistics represents the /srl_nokia-network-instance/network-instance/tcp/statistics YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Tcp_Statistics struct {
	ActiveOpens	*uint64	`path:"active-opens" module:"srl_nokia-tcp-udp"`
	AttemptFails	*uint64	`path:"attempt-fails" module:"srl_nokia-tcp-udp"`
	EstablishedResets	*uint64	`path:"established-resets" module:"srl_nokia-tcp-udp"`
	InChecksumErrors	*uint64	`path:"in-checksum-errors" module:"srl_nokia-tcp-udp"`
	InErrorSegments	*uint64	`path:"in-error-segments" module:"srl_nokia-tcp-udp"`
	InSegments	*uint64	`path:"in-segments" module:"srl_nokia-tcp-udp"`
	OutRstSegments	*uint64	`path:"out-rst-segments" module:"srl_nokia-tcp-udp"`
	OutSegments	*uint64	`path:"out-segments" module:"srl_nokia-tcp-udp"`
	PassiveOpens	*uint64	`path:"passive-opens" module:"srl_nokia-tcp-udp"`
	RetransmittedSegments	*uint64	`path:"retransmitted-segments" module:"srl_nokia-tcp-udp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Tcp_Statistics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Tcp_Statistics) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_Udp represents the /srl_nokia-network-instance/network-instance/udp YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Udp struct {
	ListeningApplication	map[SrlNokiaNetworkInstance_NetworkInstance_Udp_ListeningApplication_Key]*SrlNokiaNetworkInstance_NetworkInstance_Udp_ListeningApplication	`path:"listening-application" module:"srl_nokia-tcp-udp"`
	Statistics	*SrlNokiaNetworkInstance_NetworkInstance_Udp_Statistics	`path:"statistics" module:"srl_nokia-tcp-udp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Udp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Udp) IsYANGGoStruct() {}

// SrlNokiaNetworkInstance_NetworkInstance_Udp_ListeningApplication_Key represents the key for list ListeningApplication of element /srl_nokia-network-instance/network-instance/udp.
type SrlNokiaNetworkInstance_NetworkInstance_Udp_ListeningApplication_Key struct {
	LocalAddress	string	`path:"local-address"`
	LocalPort	uint16	`path:"local-port"`
}


// SrlNokiaNetworkInstance_NetworkInstance_Udp_ListeningApplication represents the /srl_nokia-network-instance/network-instance/udp/listening-application YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Udp_ListeningApplication struct {
	LocalAddress	*string	`path:"local-address" module:"srl_nokia-tcp-udp"`
	LocalPort	*uint16	`path:"local-port" module:"srl_nokia-tcp-udp"`
	ProcessId	*uint32	`path:"process-id" module:"srl_nokia-tcp-udp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Udp_ListeningApplication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Udp_ListeningApplication) IsYANGGoStruct() {}


// SrlNokiaNetworkInstance_NetworkInstance_Udp_Statistics represents the /srl_nokia-network-instance/network-instance/udp/statistics YANG schema element.
type SrlNokiaNetworkInstance_NetworkInstance_Udp_Statistics struct {
	IgnoredMulticastPackets	*uint64	`path:"ignored-multicast-packets" module:"srl_nokia-tcp-udp"`
	InChecksumErrors	*uint64	`path:"in-checksum-errors" module:"srl_nokia-tcp-udp"`
	InErrorPackets	*uint64	`path:"in-error-packets" module:"srl_nokia-tcp-udp"`
	InNoOpenPortsPackets	*uint64	`path:"in-no-open-ports-packets" module:"srl_nokia-tcp-udp"`
	InPackets	*uint64	`path:"in-packets" module:"srl_nokia-tcp-udp"`
	OutPackets	*uint64	`path:"out-packets" module:"srl_nokia-tcp-udp"`
	ReceiveBufferErrors	*uint64	`path:"receive-buffer-errors" module:"srl_nokia-tcp-udp"`
	SendBufferErrors	*uint64	`path:"send-buffer-errors" module:"srl_nokia-tcp-udp"`
}

// IsYANGGoStruct ensures that SrlNokiaNetworkInstance_NetworkInstance_Udp_Statistics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaNetworkInstance_NetworkInstance_Udp_Statistics) IsYANGGoStruct() {}


// SrlNokiaPlatform_Platform represents the /srl_nokia-platform/platform YANG schema element.
type SrlNokiaPlatform_Platform struct {
	Chassis	*SrlNokiaPlatform_Platform_Chassis	`path:"chassis" module:"srl_nokia-platform-chassis"`
	Control	map[string]*SrlNokiaPlatform_Platform_Control	`path:"control" module:"srl_nokia-platform-control"`
	Fabric	map[uint8]*SrlNokiaPlatform_Platform_Fabric	`path:"fabric" module:"srl_nokia-platform-fabric"`
	FanTray	map[uint8]*SrlNokiaPlatform_Platform_FanTray	`path:"fan-tray" module:"srl_nokia-platform-fan"`
	Linecard	map[uint8]*SrlNokiaPlatform_Platform_Linecard	`path:"linecard" module:"srl_nokia-platform-lc"`
	PowerSupply	map[uint8]*SrlNokiaPlatform_Platform_PowerSupply	`path:"power-supply" module:"srl_nokia-platform-psu"`
	Redundancy	*SrlNokiaPlatform_Platform_Redundancy	`path:"redundancy" module:"srl_nokia-platform-redundancy"`
	ResourceMonitoring	*SrlNokiaPlatform_Platform_ResourceMonitoring	`path:"resource-monitoring" module:"srl_nokia-platform-resource-monitoring"`
}

// IsYANGGoStruct ensures that SrlNokiaPlatform_Platform implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaPlatform_Platform) IsYANGGoStruct() {}


// SrlNokiaPlatform_Platform_Chassis represents the /srl_nokia-platform/platform/chassis YANG schema element.
type SrlNokiaPlatform_Platform_Chassis struct {
	CleiCode	*string	`path:"clei-code" module:"srl_nokia-platform-chassis"`
	FailureReason	*string	`path:"failure-reason" module:"srl_nokia-platform-chassis"`
	LastBooted	*string	`path:"last-booted" module:"srl_nokia-platform-chassis"`
	LastChange	*string	`path:"last-change" module:"srl_nokia-platform-chassis"`
	MacAddress	*string	`path:"mac-address" module:"srl_nokia-platform-chassis"`
	ManufacturedDate	*string	`path:"manufactured-date" module:"srl_nokia-platform-chassis"`
	OperState	E_SrlNokiaPlatform_OperState	`path:"oper-state" module:"srl_nokia-platform-chassis"`
	PartNumber	*string	`path:"part-number" module:"srl_nokia-platform-chassis"`
	Power	*SrlNokiaPlatform_Platform_Chassis_Power	`path:"power" module:"srl_nokia-platform-chassis"`
	Removable	*bool	`path:"removable" module:"srl_nokia-platform-chassis"`
	SerialNumber	*string	`path:"serial-number" module:"srl_nokia-platform-chassis"`
	Slots	*uint8	`path:"slots" module:"srl_nokia-platform-chassis"`
	Type	*string	`path:"type" module:"srl_nokia-platform-chassis"`
}

// IsYANGGoStruct ensures that SrlNokiaPlatform_Platform_Chassis implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaPlatform_Platform_Chassis) IsYANGGoStruct() {}


// SrlNokiaPlatform_Platform_Chassis_Power represents the /srl_nokia-platform/platform/chassis/power YANG schema element.
type SrlNokiaPlatform_Platform_Chassis_Power struct {
	Control	*SrlNokiaPlatform_Platform_Chassis_Power_Control	`path:"control" module:"srl_nokia-platform-chassis"`
	Fabric	*SrlNokiaPlatform_Platform_Chassis_Power_Fabric	`path:"fabric" module:"srl_nokia-platform-chassis"`
	FanTray	*SrlNokiaPlatform_Platform_Chassis_Power_FanTray	`path:"fan-tray" module:"srl_nokia-platform-chassis"`
	Linecard	*SrlNokiaPlatform_Platform_Chassis_Power_Linecard	`path:"linecard" module:"srl_nokia-platform-chassis"`
	Total	*SrlNokiaPlatform_Platform_Chassis_Power_Total	`path:"total" module:"srl_nokia-platform-chassis"`
}

// IsYANGGoStruct ensures that SrlNokiaPlatform_Platform_Chassis_Power implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaPlatform_Platform_Chassis_Power) IsYANGGoStruct() {}


// SrlNokiaPlatform_Platform_Chassis_Power_Control represents the /srl_nokia-platform/platform/chassis/power/control YANG schema element.
type SrlNokiaPlatform_Platform_Chassis_Power_Control struct {
	Allocated	*uint32	`path:"allocated" module:"srl_nokia-platform-chassis"`
	Peak	*uint32	`path:"peak" module:"srl_nokia-platform-chassis"`
	Used	*uint32	`path:"used" module:"srl_nokia-platform-chassis"`
}

// IsYANGGoStruct ensures that SrlNokiaPlatform_Platform_Chassis_Power_Control implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaPlatform_Platform_Chassis_Power_Control) IsYANGGoStruct() {}


// SrlNokiaPlatform_Platform_Chassis_Power_Fabric represents the /srl_nokia-platform/platform/chassis/power/fabric YANG schema element.
type SrlNokiaPlatform_Platform_Chassis_Power_Fabric struct {
	Allocated	*uint32	`path:"allocated" module:"srl_nokia-platform-chassis"`
	Peak	*uint32	`path:"peak" module:"srl_nokia-platform-chassis"`
	Used	*uint32	`path:"used" module:"srl_nokia-platform-chassis"`
}

// IsYANGGoStruct ensures that SrlNokiaPlatform_Platform_Chassis_Power_Fabric implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaPlatform_Platform_Chassis_Power_Fabric) IsYANGGoStruct() {}


// SrlNokiaPlatform_Platform_Chassis_Power_FanTray represents the /srl_nokia-platform/platform/chassis/power/fan-tray YANG schema element.
type SrlNokiaPlatform_Platform_Chassis_Power_FanTray struct {
	Allocated	*uint32	`path:"allocated" module:"srl_nokia-platform-chassis"`
	Peak	*uint32	`path:"peak" module:"srl_nokia-platform-chassis"`
	Used	*uint32	`path:"used" module:"srl_nokia-platform-chassis"`
}

// IsYANGGoStruct ensures that SrlNokiaPlatform_Platform_Chassis_Power_FanTray implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaPlatform_Platform_Chassis_Power_FanTray) IsYANGGoStruct() {}


// SrlNokiaPlatform_Platform_Chassis_Power_Linecard represents the /srl_nokia-platform/platform/chassis/power/linecard YANG schema element.
type SrlNokiaPlatform_Platform_Chassis_Power_Linecard struct {
	Allocated	*uint32	`path:"allocated" module:"srl_nokia-platform-chassis"`
	Peak	*uint32	`path:"peak" module:"srl_nokia-platform-chassis"`
	Used	*uint32	`path:"used" module:"srl_nokia-platform-chassis"`
}

// IsYANGGoStruct ensures that SrlNokiaPlatform_Platform_Chassis_Power_Linecard implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaPlatform_Platform_Chassis_Power_Linecard) IsYANGGoStruct() {}


// SrlNokiaPlatform_Platform_Chassis_Power_Total represents the /srl_nokia-platform/platform/chassis/power/total YANG schema element.
type SrlNokiaPlatform_Platform_Chassis_Power_Total struct {
	Allocated	*uint32	`path:"allocated" module:"srl_nokia-platform-chassis"`
	Capacity	*uint32	`path:"capacity" module:"srl_nokia-platform-chassis"`
	Peak	*uint32	`path:"peak" module:"srl_nokia-platform-chassis"`
	Used	*uint32	`path:"used" module:"srl_nokia-platform-chassis"`
}

// IsYANGGoStruct ensures that SrlNokiaPlatform_Platform_Chassis_Power_Total implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaPlatform_Platform_Chassis_Power_Total) IsYANGGoStruct() {}


// SrlNokiaPlatform_Platform_Control represents the /srl_nokia-platform/platform/control YANG schema element.
type SrlNokiaPlatform_Platform_Control struct {
	CleiCode	*string	`path:"clei-code" module:"srl_nokia-platform-control"`
	Cpu	map[SrlNokiaPlatform_Platform_Control_Cpu_Index_Union]*SrlNokiaPlatform_Platform_Control_Cpu	`path:"cpu" module:"srl_nokia-platform-cpu"`
	Disk	map[string]*SrlNokiaPlatform_Platform_Control_Disk	`path:"disk" module:"srl_nokia-platform-disk"`
	FailureReason	*string	`path:"failure-reason" module:"srl_nokia-platform-control"`
	LastBooted	*string	`path:"last-booted" module:"srl_nokia-platform-control"`
	LastChange	*string	`path:"last-change" module:"srl_nokia-platform-control"`
	LocatorState	E_SrlNokiaPlatform_LocatorLedState	`path:"locator-state" module:"srl_nokia-platform-control"`
	ManufacturedDate	*string	`path:"manufactured-date" module:"srl_nokia-platform-control"`
	Memory	*SrlNokiaPlatform_Platform_Control_Memory	`path:"memory" module:"srl_nokia-platform-memory"`
	OperState	E_SrlNokiaPlatform_OperState	`path:"oper-state" module:"srl_nokia-platform-control"`
	PartNumber	*string	`path:"part-number" module:"srl_nokia-platform-control"`
	Power	*SrlNokiaPlatform_Platform_Control_Power	`path:"power" module:"srl_nokia-platform-control"`
	Process	map[uint64]*SrlNokiaPlatform_Platform_Control_Process	`path:"process" module:"srl_nokia-platform-cpu"`
	Removable	*bool	`path:"removable" module:"srl_nokia-platform-control"`
	Role	E_SrlNokiaPlatformControl_ControlRoleType	`path:"role" module:"srl_nokia-platform-control"`
	SerialNumber	*string	`path:"serial-number" module:"srl_nokia-platform-control"`
	Slot	*string	`path:"slot" module:"srl_nokia-platform-control"`
	SoftwareVersion	*string	`path:"software-version" module:"srl_nokia-platform-control"`
	Temperature	*SrlNokiaPlatform_Platform_Control_Temperature	`path:"temperature" module:"srl_nokia-platform-control"`
	Type	*string	`path:"type" module:"srl_nokia-platform-control"`
}

// IsYANGGoStruct ensures that SrlNokiaPlatform_Platform_Control implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaPlatform_Platform_Control) IsYANGGoStruct() {}


// SrlNokiaPlatform_Platform_Control_Cpu represents the /srl_nokia-platform/platform/control/cpu YANG schema element.
type SrlNokiaPlatform_Platform_Control_Cpu struct {
	Architecture	E_SrlNokiaPlatform_Platform_Control_Cpu_Architecture	`path:"architecture" module:"srl_nokia-platform-cpu"`
	HardwareInterrupt	*SrlNokiaPlatform_Platform_Control_Cpu_HardwareInterrupt	`path:"hardware-interrupt" module:"srl_nokia-platform-cpu"`
	Idle	*SrlNokiaPlatform_Platform_Control_Cpu_Idle	`path:"idle" module:"srl_nokia-platform-cpu"`
	Index	SrlNokiaPlatform_Platform_Control_Cpu_Index_Union	`path:"index" module:"srl_nokia-platform-cpu"`
	Iowait	*SrlNokiaPlatform_Platform_Control_Cpu_Iowait	`path:"iowait" module:"srl_nokia-platform-cpu"`
	Nice	*SrlNokiaPlatform_Platform_Control_Cpu_Nice	`path:"nice" module:"srl_nokia-platform-cpu"`
	SoftwareInterrupt	*SrlNokiaPlatform_Platform_Control_Cpu_SoftwareInterrupt	`path:"software-interrupt" module:"srl_nokia-platform-cpu"`
	Speed	*float64	`path:"speed" module:"srl_nokia-platform-cpu"`
	System	*SrlNokiaPlatform_Platform_Control_Cpu_System	`path:"system" module:"srl_nokia-platform-cpu"`
	Total	*SrlNokiaPlatform_Platform_Control_Cpu_Total	`path:"total" module:"srl_nokia-platform-cpu"`
	Type	*string	`path:"type" module:"srl_nokia-platform-cpu"`
	User	*SrlNokiaPlatform_Platform_Control_Cpu_User	`path:"user" module:"srl_nokia-platform-cpu"`
}

// IsYANGGoStruct ensures that SrlNokiaPlatform_Platform_Control_Cpu implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaPlatform_Platform_Control_Cpu) IsYANGGoStruct() {}


// SrlNokiaPlatform_Platform_Control_Cpu_HardwareInterrupt represents the /srl_nokia-platform/platform/control/cpu/hardware-interrupt YANG schema element.
type SrlNokiaPlatform_Platform_Control_Cpu_HardwareInterrupt struct {
	Average_1	*uint8	`path:"average-1" module:"srl_nokia-platform-cpu"`
	Average_15	*uint8	`path:"average-15" module:"srl_nokia-platform-cpu"`
	Average_5	*uint8	`path:"average-5" module:"srl_nokia-platform-cpu"`
	Instant	*uint8	`path:"instant" module:"srl_nokia-platform-cpu"`
}

// IsYANGGoStruct ensures that SrlNokiaPlatform_Platform_Control_Cpu_HardwareInterrupt implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaPlatform_Platform_Control_Cpu_HardwareInterrupt) IsYANGGoStruct() {}


// SrlNokiaPlatform_Platform_Control_Cpu_Idle represents the /srl_nokia-platform/platform/control/cpu/idle YANG schema element.
type SrlNokiaPlatform_Platform_Control_Cpu_Idle struct {
	Average_1	*uint8	`path:"average-1" module:"srl_nokia-platform-cpu"`
	Average_15	*uint8	`path:"average-15" module:"srl_nokia-platform-cpu"`
	Average_5	*uint8	`path:"average-5" module:"srl_nokia-platform-cpu"`
	Instant	*uint8	`path:"instant" module:"srl_nokia-platform-cpu"`
}

// IsYANGGoStruct ensures that SrlNokiaPlatform_Platform_Control_Cpu_Idle implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaPlatform_Platform_Control_Cpu_Idle) IsYANGGoStruct() {}


// SrlNokiaPlatform_Platform_Control_Cpu_Iowait represents the /srl_nokia-platform/platform/control/cpu/iowait YANG schema element.
type SrlNokiaPlatform_Platform_Control_Cpu_Iowait struct {
	Average_1	*uint8	`path:"average-1" module:"srl_nokia-platform-cpu"`
	Average_15	*uint8	`path:"average-15" module:"srl_nokia-platform-cpu"`
	Average_5	*uint8	`path:"average-5" module:"srl_nokia-platform-cpu"`
	Instant	*uint8	`path:"instant" module:"srl_nokia-platform-cpu"`
}

// IsYANGGoStruct ensures that SrlNokiaPlatform_Platform_Control_Cpu_Iowait implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaPlatform_Platform_Control_Cpu_Iowait) IsYANGGoStruct() {}


// SrlNokiaPlatform_Platform_Control_Cpu_Nice represents the /srl_nokia-platform/platform/control/cpu/nice YANG schema element.
type SrlNokiaPlatform_Platform_Control_Cpu_Nice struct {
	Average_1	*uint8	`path:"average-1" module:"srl_nokia-platform-cpu"`
	Average_15	*uint8	`path:"average-15" module:"srl_nokia-platform-cpu"`
	Average_5	*uint8	`path:"average-5" module:"srl_nokia-platform-cpu"`
	Instant	*uint8	`path:"instant" module:"srl_nokia-platform-cpu"`
}

// IsYANGGoStruct ensures that SrlNokiaPlatform_Platform_Control_Cpu_Nice implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaPlatform_Platform_Control_Cpu_Nice) IsYANGGoStruct() {}


// SrlNokiaPlatform_Platform_Control_Cpu_SoftwareInterrupt represents the /srl_nokia-platform/platform/control/cpu/software-interrupt YANG schema element.
type SrlNokiaPlatform_Platform_Control_Cpu_SoftwareInterrupt struct {
	Average_1	*uint8	`path:"average-1" module:"srl_nokia-platform-cpu"`
	Average_15	*uint8	`path:"average-15" module:"srl_nokia-platform-cpu"`
	Average_5	*uint8	`path:"average-5" module:"srl_nokia-platform-cpu"`
	Instant	*uint8	`path:"instant" module:"srl_nokia-platform-cpu"`
}

// IsYANGGoStruct ensures that SrlNokiaPlatform_Platform_Control_Cpu_SoftwareInterrupt implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaPlatform_Platform_Control_Cpu_SoftwareInterrupt) IsYANGGoStruct() {}


// SrlNokiaPlatform_Platform_Control_Cpu_System represents the /srl_nokia-platform/platform/control/cpu/system YANG schema element.
type SrlNokiaPlatform_Platform_Control_Cpu_System struct {
	Average_1	*uint8	`path:"average-1" module:"srl_nokia-platform-cpu"`
	Average_15	*uint8	`path:"average-15" module:"srl_nokia-platform-cpu"`
	Average_5	*uint8	`path:"average-5" module:"srl_nokia-platform-cpu"`
	Instant	*uint8	`path:"instant" module:"srl_nokia-platform-cpu"`
}

// IsYANGGoStruct ensures that SrlNokiaPlatform_Platform_Control_Cpu_System implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaPlatform_Platform_Control_Cpu_System) IsYANGGoStruct() {}


// SrlNokiaPlatform_Platform_Control_Cpu_Total represents the /srl_nokia-platform/platform/control/cpu/total YANG schema element.
type SrlNokiaPlatform_Platform_Control_Cpu_Total struct {
	Average_1	*uint8	`path:"average-1" module:"srl_nokia-platform-cpu"`
	Average_15	*uint8	`path:"average-15" module:"srl_nokia-platform-cpu"`
	Average_5	*uint8	`path:"average-5" module:"srl_nokia-platform-cpu"`
	Instant	*uint8	`path:"instant" module:"srl_nokia-platform-cpu"`
}

// IsYANGGoStruct ensures that SrlNokiaPlatform_Platform_Control_Cpu_Total implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaPlatform_Platform_Control_Cpu_Total) IsYANGGoStruct() {}


// SrlNokiaPlatform_Platform_Control_Cpu_User represents the /srl_nokia-platform/platform/control/cpu/user YANG schema element.
type SrlNokiaPlatform_Platform_Control_Cpu_User struct {
	Average_1	*uint8	`path:"average-1" module:"srl_nokia-platform-cpu"`
	Average_15	*uint8	`path:"average-15" module:"srl_nokia-platform-cpu"`
	Average_5	*uint8	`path:"average-5" module:"srl_nokia-platform-cpu"`
	Instant	*uint8	`path:"instant" module:"srl_nokia-platform-cpu"`
}

// IsYANGGoStruct ensures that SrlNokiaPlatform_Platform_Control_Cpu_User implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaPlatform_Platform_Control_Cpu_User) IsYANGGoStruct() {}


// SrlNokiaPlatform_Platform_Control_Disk represents the /srl_nokia-platform/platform/control/disk YANG schema element.
type SrlNokiaPlatform_Platform_Control_Disk struct {
	ModelNumber	*string	`path:"model-number" module:"srl_nokia-platform-disk"`
	Name	*string	`path:"name" module:"srl_nokia-platform-disk"`
	Partition	map[string]*SrlNokiaPlatform_Platform_Control_Disk_Partition	`path:"partition" module:"srl_nokia-platform-disk"`
	SerialNumber	*string	`path:"serial-number" module:"srl_nokia-platform-disk"`
	Size	*uint64	`path:"size" module:"srl_nokia-platform-disk"`
	Statistics	*SrlNokiaPlatform_Platform_Control_Disk_Statistics	`path:"statistics" module:"srl_nokia-platform-disk"`
	Type	E_SrlNokiaPlatform_Platform_Control_Disk_Type	`path:"type" module:"srl_nokia-platform-disk"`
}

// IsYANGGoStruct ensures that SrlNokiaPlatform_Platform_Control_Disk implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaPlatform_Platform_Control_Disk) IsYANGGoStruct() {}


// SrlNokiaPlatform_Platform_Control_Disk_Partition represents the /srl_nokia-platform/platform/control/disk/partition YANG schema element.
type SrlNokiaPlatform_Platform_Control_Disk_Partition struct {
	Free	*uint64	`path:"free" module:"srl_nokia-platform-disk"`
	MountPoint	*string	`path:"mount-point" module:"srl_nokia-platform-disk"`
	MountStatus	E_SrlNokiaPlatform_Platform_Control_Disk_Partition_MountStatus	`path:"mount-status" module:"srl_nokia-platform-disk"`
	Name	*string	`path:"name" module:"srl_nokia-platform-disk"`
	PercentUsed	*uint8	`path:"percent-used" module:"srl_nokia-platform-disk"`
	Size	*uint64	`path:"size" module:"srl_nokia-platform-disk"`
	Used	*uint64	`path:"used" module:"srl_nokia-platform-disk"`
	Uuid	*string	`path:"uuid" module:"srl_nokia-platform-disk"`
}

// IsYANGGoStruct ensures that SrlNokiaPlatform_Platform_Control_Disk_Partition implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaPlatform_Platform_Control_Disk_Partition) IsYANGGoStruct() {}


// SrlNokiaPlatform_Platform_Control_Disk_Statistics represents the /srl_nokia-platform/platform/control/disk/statistics YANG schema element.
type SrlNokiaPlatform_Platform_Control_Disk_Statistics struct {
	ReadPerSecond	*float64	`path:"read-per-second" module:"srl_nokia-platform-disk"`
	TransfersPerSecond	*float64	`path:"transfers-per-second" module:"srl_nokia-platform-disk"`
	Utilization	*uint8	`path:"utilization" module:"srl_nokia-platform-disk"`
	WrittenPerSecond	*float64	`path:"written-per-second" module:"srl_nokia-platform-disk"`
}

// IsYANGGoStruct ensures that SrlNokiaPlatform_Platform_Control_Disk_Statistics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaPlatform_Platform_Control_Disk_Statistics) IsYANGGoStruct() {}


// SrlNokiaPlatform_Platform_Control_Memory represents the /srl_nokia-platform/platform/control/memory YANG schema element.
type SrlNokiaPlatform_Platform_Control_Memory struct {
	Free	*uint64	`path:"free" module:"srl_nokia-platform-memory"`
	Physical	*uint64	`path:"physical" module:"srl_nokia-platform-memory"`
	Reserved	*uint64	`path:"reserved" module:"srl_nokia-platform-memory"`
	Utilization	*uint8	`path:"utilization" module:"srl_nokia-platform-memory"`
}

// IsYANGGoStruct ensures that SrlNokiaPlatform_Platform_Control_Memory implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaPlatform_Platform_Control_Memory) IsYANGGoStruct() {}


// SrlNokiaPlatform_Platform_Control_Power represents the /srl_nokia-platform/platform/control/power YANG schema element.
type SrlNokiaPlatform_Platform_Control_Power struct {
	AllocatedPower	*uint32	`path:"allocated-power" module:"srl_nokia-platform-control"`
	UsedPower	*uint32	`path:"used-power" module:"srl_nokia-platform-control"`
}

// IsYANGGoStruct ensures that SrlNokiaPlatform_Platform_Control_Power implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaPlatform_Platform_Control_Power) IsYANGGoStruct() {}


// SrlNokiaPlatform_Platform_Control_Process represents the /srl_nokia-platform/platform/control/process YANG schema element.
type SrlNokiaPlatform_Platform_Control_Process struct {
	Args	[]string	`path:"args" module:"srl_nokia-platform-cpu"`
	CpuUtilization	*string	`path:"cpu-utilization" module:"srl_nokia-platform-cpu"`
	MemoryUsage	*uint64	`path:"memory-usage" module:"srl_nokia-platform-cpu"`
	MemoryUtilization	*uint8	`path:"memory-utilization" module:"srl_nokia-platform-cpu"`
	Name	*string	`path:"name" module:"srl_nokia-platform-cpu"`
	Pid	*uint64	`path:"pid" module:"srl_nokia-platform-cpu"`
	StartTime	*string	`path:"start-time" module:"srl_nokia-platform-cpu"`
}

// IsYANGGoStruct ensures that SrlNokiaPlatform_Platform_Control_Process implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaPlatform_Platform_Control_Process) IsYANGGoStruct() {}


// SrlNokiaPlatform_Platform_Control_Temperature represents the /srl_nokia-platform/platform/control/temperature YANG schema element.
type SrlNokiaPlatform_Platform_Control_Temperature struct {
	AlarmStatus	*bool	`path:"alarm-status" module:"srl_nokia-platform-control"`
	AlarmThreshold	*int16	`path:"alarm-threshold" module:"srl_nokia-platform-control"`
	Instant	*int16	`path:"instant" module:"srl_nokia-platform-control"`
}

// IsYANGGoStruct ensures that SrlNokiaPlatform_Platform_Control_Temperature implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaPlatform_Platform_Control_Temperature) IsYANGGoStruct() {}


// SrlNokiaPlatform_Platform_Fabric represents the /srl_nokia-platform/platform/fabric YANG schema element.
type SrlNokiaPlatform_Platform_Fabric struct {
	AdminState	E_SrlNokiaPlatform_AdminState	`path:"admin-state" module:"srl_nokia-platform-fabric"`
	CleiCode	*string	`path:"clei-code" module:"srl_nokia-platform-fabric"`
	FailureReason	*string	`path:"failure-reason" module:"srl_nokia-platform-fabric"`
	LastBooted	*string	`path:"last-booted" module:"srl_nokia-platform-fabric"`
	LastChange	*string	`path:"last-change" module:"srl_nokia-platform-fabric"`
	LocatorState	E_SrlNokiaPlatform_LocatorLedState	`path:"locator-state" module:"srl_nokia-platform-fabric"`
	ManufacturedDate	*string	`path:"manufactured-date" module:"srl_nokia-platform-fabric"`
	OperState	E_SrlNokiaPlatform_OperState	`path:"oper-state" module:"srl_nokia-platform-fabric"`
	PartNumber	*string	`path:"part-number" module:"srl_nokia-platform-fabric"`
	Power	*SrlNokiaPlatform_Platform_Fabric_Power	`path:"power" module:"srl_nokia-platform-fabric"`
	Removable	*bool	`path:"removable" module:"srl_nokia-platform-fabric"`
	SerialNumber	*string	`path:"serial-number" module:"srl_nokia-platform-fabric"`
	Slot	*uint8	`path:"slot" module:"srl_nokia-platform-fabric"`
	Temperature	*SrlNokiaPlatform_Platform_Fabric_Temperature	`path:"temperature" module:"srl_nokia-platform-fabric"`
	Type	*string	`path:"type" module:"srl_nokia-platform-fabric"`
}

// IsYANGGoStruct ensures that SrlNokiaPlatform_Platform_Fabric implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaPlatform_Platform_Fabric) IsYANGGoStruct() {}


// SrlNokiaPlatform_Platform_Fabric_Power represents the /srl_nokia-platform/platform/fabric/power YANG schema element.
type SrlNokiaPlatform_Platform_Fabric_Power struct {
	AllocatedPower	*uint32	`path:"allocated-power" module:"srl_nokia-platform-fabric"`
	UsedPower	*uint32	`path:"used-power" module:"srl_nokia-platform-fabric"`
}

// IsYANGGoStruct ensures that SrlNokiaPlatform_Platform_Fabric_Power implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaPlatform_Platform_Fabric_Power) IsYANGGoStruct() {}


// SrlNokiaPlatform_Platform_Fabric_Temperature represents the /srl_nokia-platform/platform/fabric/temperature YANG schema element.
type SrlNokiaPlatform_Platform_Fabric_Temperature struct {
	AlarmStatus	*bool	`path:"alarm-status" module:"srl_nokia-platform-fabric"`
	AlarmThreshold	*int16	`path:"alarm-threshold" module:"srl_nokia-platform-fabric"`
	Instant	*int16	`path:"instant" module:"srl_nokia-platform-fabric"`
}

// IsYANGGoStruct ensures that SrlNokiaPlatform_Platform_Fabric_Temperature implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaPlatform_Platform_Fabric_Temperature) IsYANGGoStruct() {}


// SrlNokiaPlatform_Platform_FanTray represents the /srl_nokia-platform/platform/fan-tray YANG schema element.
type SrlNokiaPlatform_Platform_FanTray struct {
	CleiCode	*string	`path:"clei-code" module:"srl_nokia-platform-fan"`
	FailureReason	*string	`path:"failure-reason" module:"srl_nokia-platform-fan"`
	Id	*uint8	`path:"id" module:"srl_nokia-platform-fan"`
	LastBooted	*string	`path:"last-booted" module:"srl_nokia-platform-fan"`
	LastChange	*string	`path:"last-change" module:"srl_nokia-platform-fan"`
	LocatorState	E_SrlNokiaPlatform_LocatorLedState	`path:"locator-state" module:"srl_nokia-platform-fan"`
	ManufacturedDate	*string	`path:"manufactured-date" module:"srl_nokia-platform-fan"`
	OperState	E_SrlNokiaPlatform_OperState	`path:"oper-state" module:"srl_nokia-platform-fan"`
	PartNumber	*string	`path:"part-number" module:"srl_nokia-platform-fan"`
	Power	*SrlNokiaPlatform_Platform_FanTray_Power	`path:"power" module:"srl_nokia-platform-fan"`
	Removable	*bool	`path:"removable" module:"srl_nokia-platform-fan"`
	SerialNumber	*string	`path:"serial-number" module:"srl_nokia-platform-fan"`
	Speed	*uint8	`path:"speed" module:"srl_nokia-platform-fan"`
	Type	*string	`path:"type" module:"srl_nokia-platform-fan"`
}

// IsYANGGoStruct ensures that SrlNokiaPlatform_Platform_FanTray implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaPlatform_Platform_FanTray) IsYANGGoStruct() {}


// SrlNokiaPlatform_Platform_FanTray_Power represents the /srl_nokia-platform/platform/fan-tray/power YANG schema element.
type SrlNokiaPlatform_Platform_FanTray_Power struct {
	AllocatedPower	*uint32	`path:"allocated-power" module:"srl_nokia-platform-fan"`
	UsedPower	*uint32	`path:"used-power" module:"srl_nokia-platform-fan"`
}

// IsYANGGoStruct ensures that SrlNokiaPlatform_Platform_FanTray_Power implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaPlatform_Platform_FanTray_Power) IsYANGGoStruct() {}


// SrlNokiaPlatform_Platform_Linecard represents the /srl_nokia-platform/platform/linecard YANG schema element.
type SrlNokiaPlatform_Platform_Linecard struct {
	AdminState	E_SrlNokiaPlatform_AdminState	`path:"admin-state" module:"srl_nokia-platform-lc"`
	CleiCode	*string	`path:"clei-code" module:"srl_nokia-platform-lc"`
	FabricAvailability	*uint8	`path:"fabric-availability" module:"srl_nokia-platform-lc"`
	FailureReason	*string	`path:"failure-reason" module:"srl_nokia-platform-lc"`
	ForwardingComplex	map[E_SrlNokiaPlatform_Platform_Linecard_ForwardingComplex_Name]*SrlNokiaPlatform_Platform_Linecard_ForwardingComplex	`path:"forwarding-complex" module:"srl_nokia-platform-lc"`
	LastBooted	*string	`path:"last-booted" module:"srl_nokia-platform-lc"`
	LastChange	*string	`path:"last-change" module:"srl_nokia-platform-lc"`
	LocatorState	E_SrlNokiaPlatform_LocatorLedState	`path:"locator-state" module:"srl_nokia-platform-lc"`
	ManufacturedDate	*string	`path:"manufactured-date" module:"srl_nokia-platform-lc"`
	OperState	E_SrlNokiaPlatform_OperState	`path:"oper-state" module:"srl_nokia-platform-lc"`
	PartNumber	*string	`path:"part-number" module:"srl_nokia-platform-lc"`
	Power	*SrlNokiaPlatform_Platform_Linecard_Power	`path:"power" module:"srl_nokia-platform-lc"`
	Removable	*bool	`path:"removable" module:"srl_nokia-platform-lc"`
	SerialNumber	*string	`path:"serial-number" module:"srl_nokia-platform-lc"`
	Slot	*uint8	`path:"slot" module:"srl_nokia-platform-lc"`
	SoftwareVersion	*string	`path:"software-version" module:"srl_nokia-platform-lc"`
	Temperature	*SrlNokiaPlatform_Platform_Linecard_Temperature	`path:"temperature" module:"srl_nokia-platform-lc"`
	Type	*string	`path:"type" module:"srl_nokia-platform-lc"`
}

// IsYANGGoStruct ensures that SrlNokiaPlatform_Platform_Linecard implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaPlatform_Platform_Linecard) IsYANGGoStruct() {}


// SrlNokiaPlatform_Platform_Linecard_ForwardingComplex represents the /srl_nokia-platform/platform/linecard/forwarding-complex YANG schema element.
type SrlNokiaPlatform_Platform_Linecard_ForwardingComplex struct {
	Acl	*SrlNokiaPlatform_Platform_Linecard_ForwardingComplex_Acl	`path:"acl" module:"srl_nokia-platform-acl"`
	BufferMemory	*SrlNokiaPlatform_Platform_Linecard_ForwardingComplex_BufferMemory	`path:"buffer-memory" module:"srl_nokia-platform-qos"`
	IpMplsForwarding	*SrlNokiaPlatform_Platform_Linecard_ForwardingComplex_IpMplsForwarding	`path:"ip-mpls-forwarding" module:"srl_nokia-platform-ip-mpls-fwd-resources"`
	Mtu	*SrlNokiaPlatform_Platform_Linecard_ForwardingComplex_Mtu	`path:"mtu" module:"srl_nokia-platform-mtu"`
	Name	E_SrlNokiaPlatform_Platform_Linecard_ForwardingComplex_Name	`path:"name" module:"srl_nokia-platform-lc"`
	Qos	*SrlNokiaPlatform_Platform_Linecard_ForwardingComplex_Qos	`path:"qos" module:"srl_nokia-platform-qos"`
	Tcam	*SrlNokiaPlatform_Platform_Linecard_ForwardingComplex_Tcam	`path:"tcam" module:"srl_nokia-platform-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaPlatform_Platform_Linecard_ForwardingComplex implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaPlatform_Platform_Linecard_ForwardingComplex) IsYANGGoStruct() {}


// SrlNokiaPlatform_Platform_Linecard_ForwardingComplex_Acl represents the /srl_nokia-platform/platform/linecard/forwarding-complex/acl YANG schema element.
type SrlNokiaPlatform_Platform_Linecard_ForwardingComplex_Acl struct {
	Resource	map[E_SrlNokiaPlatformAcl_AclResources]*SrlNokiaPlatform_Platform_Linecard_ForwardingComplex_Acl_Resource	`path:"resource" module:"srl_nokia-platform-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaPlatform_Platform_Linecard_ForwardingComplex_Acl implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaPlatform_Platform_Linecard_ForwardingComplex_Acl) IsYANGGoStruct() {}


// SrlNokiaPlatform_Platform_Linecard_ForwardingComplex_Acl_Resource represents the /srl_nokia-platform/platform/linecard/forwarding-complex/acl/resource YANG schema element.
type SrlNokiaPlatform_Platform_Linecard_ForwardingComplex_Acl_Resource struct {
	Free	*uint16	`path:"free" module:"srl_nokia-platform-acl"`
	Name	E_SrlNokiaPlatformAcl_AclResources	`path:"name" module:"srl_nokia-platform-acl"`
	Used	*uint16	`path:"used" module:"srl_nokia-platform-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaPlatform_Platform_Linecard_ForwardingComplex_Acl_Resource implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaPlatform_Platform_Linecard_ForwardingComplex_Acl_Resource) IsYANGGoStruct() {}


// SrlNokiaPlatform_Platform_Linecard_ForwardingComplex_BufferMemory represents the /srl_nokia-platform/platform/linecard/forwarding-complex/buffer-memory YANG schema element.
type SrlNokiaPlatform_Platform_Linecard_ForwardingComplex_BufferMemory struct {
	Dram	*SrlNokiaPlatform_Platform_Linecard_ForwardingComplex_BufferMemory_Dram	`path:"dram" module:"srl_nokia-platform-qos"`
	Sram	*SrlNokiaPlatform_Platform_Linecard_ForwardingComplex_BufferMemory_Sram	`path:"sram" module:"srl_nokia-platform-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaPlatform_Platform_Linecard_ForwardingComplex_BufferMemory implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaPlatform_Platform_Linecard_ForwardingComplex_BufferMemory) IsYANGGoStruct() {}


// SrlNokiaPlatform_Platform_Linecard_ForwardingComplex_BufferMemory_Dram represents the /srl_nokia-platform/platform/linecard/forwarding-complex/buffer-memory/dram YANG schema element.
type SrlNokiaPlatform_Platform_Linecard_ForwardingComplex_BufferMemory_Dram struct {
	Used	*uint8	`path:"used" module:"srl_nokia-platform-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaPlatform_Platform_Linecard_ForwardingComplex_BufferMemory_Dram implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaPlatform_Platform_Linecard_ForwardingComplex_BufferMemory_Dram) IsYANGGoStruct() {}


// SrlNokiaPlatform_Platform_Linecard_ForwardingComplex_BufferMemory_Sram represents the /srl_nokia-platform/platform/linecard/forwarding-complex/buffer-memory/sram YANG schema element.
type SrlNokiaPlatform_Platform_Linecard_ForwardingComplex_BufferMemory_Sram struct {
	Free	*uint64	`path:"free" module:"srl_nokia-platform-qos"`
	Used	*uint64	`path:"used" module:"srl_nokia-platform-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaPlatform_Platform_Linecard_ForwardingComplex_BufferMemory_Sram implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaPlatform_Platform_Linecard_ForwardingComplex_BufferMemory_Sram) IsYANGGoStruct() {}


// SrlNokiaPlatform_Platform_Linecard_ForwardingComplex_IpMplsForwarding represents the /srl_nokia-platform/platform/linecard/forwarding-complex/ip-mpls-forwarding YANG schema element.
type SrlNokiaPlatform_Platform_Linecard_ForwardingComplex_IpMplsForwarding struct {
	Resource	map[E_SrlNokiaPlatformIpMplsFwdResources_IpMplsForwardingResources]*SrlNokiaPlatform_Platform_Linecard_ForwardingComplex_IpMplsForwarding_Resource	`path:"resource" module:"srl_nokia-platform-ip-mpls-fwd-resources"`
}

// IsYANGGoStruct ensures that SrlNokiaPlatform_Platform_Linecard_ForwardingComplex_IpMplsForwarding implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaPlatform_Platform_Linecard_ForwardingComplex_IpMplsForwarding) IsYANGGoStruct() {}


// SrlNokiaPlatform_Platform_Linecard_ForwardingComplex_IpMplsForwarding_Resource represents the /srl_nokia-platform/platform/linecard/forwarding-complex/ip-mpls-forwarding/resource YANG schema element.
type SrlNokiaPlatform_Platform_Linecard_ForwardingComplex_IpMplsForwarding_Resource struct {
	Name	E_SrlNokiaPlatformIpMplsFwdResources_IpMplsForwardingResources	`path:"name" module:"srl_nokia-platform-ip-mpls-fwd-resources"`
	Used	*uint8	`path:"used" module:"srl_nokia-platform-ip-mpls-fwd-resources"`
}

// IsYANGGoStruct ensures that SrlNokiaPlatform_Platform_Linecard_ForwardingComplex_IpMplsForwarding_Resource implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaPlatform_Platform_Linecard_ForwardingComplex_IpMplsForwarding_Resource) IsYANGGoStruct() {}


// SrlNokiaPlatform_Platform_Linecard_ForwardingComplex_Mtu represents the /srl_nokia-platform/platform/linecard/forwarding-complex/mtu YANG schema element.
type SrlNokiaPlatform_Platform_Linecard_ForwardingComplex_Mtu struct {
	Resource	map[E_SrlNokiaPlatformMtu_MtuResources]*SrlNokiaPlatform_Platform_Linecard_ForwardingComplex_Mtu_Resource	`path:"resource" module:"srl_nokia-platform-mtu"`
}

// IsYANGGoStruct ensures that SrlNokiaPlatform_Platform_Linecard_ForwardingComplex_Mtu implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaPlatform_Platform_Linecard_ForwardingComplex_Mtu) IsYANGGoStruct() {}


// SrlNokiaPlatform_Platform_Linecard_ForwardingComplex_Mtu_Resource represents the /srl_nokia-platform/platform/linecard/forwarding-complex/mtu/resource YANG schema element.
type SrlNokiaPlatform_Platform_Linecard_ForwardingComplex_Mtu_Resource struct {
	Free	*uint8	`path:"free" module:"srl_nokia-platform-mtu"`
	Name	E_SrlNokiaPlatformMtu_MtuResources	`path:"name" module:"srl_nokia-platform-mtu"`
	Used	*uint8	`path:"used" module:"srl_nokia-platform-mtu"`
}

// IsYANGGoStruct ensures that SrlNokiaPlatform_Platform_Linecard_ForwardingComplex_Mtu_Resource implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaPlatform_Platform_Linecard_ForwardingComplex_Mtu_Resource) IsYANGGoStruct() {}


// SrlNokiaPlatform_Platform_Linecard_ForwardingComplex_Qos represents the /srl_nokia-platform/platform/linecard/forwarding-complex/qos YANG schema element.
type SrlNokiaPlatform_Platform_Linecard_ForwardingComplex_Qos struct {
	Resource	map[E_SrlNokiaPlatformQos_QosResources]*SrlNokiaPlatform_Platform_Linecard_ForwardingComplex_Qos_Resource	`path:"resource" module:"srl_nokia-platform-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaPlatform_Platform_Linecard_ForwardingComplex_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaPlatform_Platform_Linecard_ForwardingComplex_Qos) IsYANGGoStruct() {}


// SrlNokiaPlatform_Platform_Linecard_ForwardingComplex_Qos_Resource represents the /srl_nokia-platform/platform/linecard/forwarding-complex/qos/resource YANG schema element.
type SrlNokiaPlatform_Platform_Linecard_ForwardingComplex_Qos_Resource struct {
	Free	*uint16	`path:"free" module:"srl_nokia-platform-qos"`
	Name	E_SrlNokiaPlatformQos_QosResources	`path:"name" module:"srl_nokia-platform-qos"`
	Used	*uint16	`path:"used" module:"srl_nokia-platform-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaPlatform_Platform_Linecard_ForwardingComplex_Qos_Resource implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaPlatform_Platform_Linecard_ForwardingComplex_Qos_Resource) IsYANGGoStruct() {}


// SrlNokiaPlatform_Platform_Linecard_ForwardingComplex_Tcam represents the /srl_nokia-platform/platform/linecard/forwarding-complex/tcam YANG schema element.
type SrlNokiaPlatform_Platform_Linecard_ForwardingComplex_Tcam struct {
	Resource	map[E_SrlNokiaPlatformAcl_TcamResources]*SrlNokiaPlatform_Platform_Linecard_ForwardingComplex_Tcam_Resource	`path:"resource" module:"srl_nokia-platform-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaPlatform_Platform_Linecard_ForwardingComplex_Tcam implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaPlatform_Platform_Linecard_ForwardingComplex_Tcam) IsYANGGoStruct() {}


// SrlNokiaPlatform_Platform_Linecard_ForwardingComplex_Tcam_Resource represents the /srl_nokia-platform/platform/linecard/forwarding-complex/tcam/resource YANG schema element.
type SrlNokiaPlatform_Platform_Linecard_ForwardingComplex_Tcam_Resource struct {
	Free	*uint32	`path:"free" module:"srl_nokia-platform-acl"`
	Name	E_SrlNokiaPlatformAcl_TcamResources	`path:"name" module:"srl_nokia-platform-acl"`
	Programmed	*uint32	`path:"programmed" module:"srl_nokia-platform-acl"`
	Reserved	*uint32	`path:"reserved" module:"srl_nokia-platform-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaPlatform_Platform_Linecard_ForwardingComplex_Tcam_Resource implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaPlatform_Platform_Linecard_ForwardingComplex_Tcam_Resource) IsYANGGoStruct() {}


// SrlNokiaPlatform_Platform_Linecard_Power represents the /srl_nokia-platform/platform/linecard/power YANG schema element.
type SrlNokiaPlatform_Platform_Linecard_Power struct {
	AllocatedPower	*uint32	`path:"allocated-power" module:"srl_nokia-platform-lc"`
	UsedPower	*uint32	`path:"used-power" module:"srl_nokia-platform-lc"`
}

// IsYANGGoStruct ensures that SrlNokiaPlatform_Platform_Linecard_Power implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaPlatform_Platform_Linecard_Power) IsYANGGoStruct() {}


// SrlNokiaPlatform_Platform_Linecard_Temperature represents the /srl_nokia-platform/platform/linecard/temperature YANG schema element.
type SrlNokiaPlatform_Platform_Linecard_Temperature struct {
	AlarmStatus	*bool	`path:"alarm-status" module:"srl_nokia-platform-lc"`
	AlarmThreshold	*int16	`path:"alarm-threshold" module:"srl_nokia-platform-lc"`
	Instant	*int16	`path:"instant" module:"srl_nokia-platform-lc"`
}

// IsYANGGoStruct ensures that SrlNokiaPlatform_Platform_Linecard_Temperature implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaPlatform_Platform_Linecard_Temperature) IsYANGGoStruct() {}


// SrlNokiaPlatform_Platform_PowerSupply represents the /srl_nokia-platform/platform/power-supply YANG schema element.
type SrlNokiaPlatform_Platform_PowerSupply struct {
	Capacity	*uint32	`path:"capacity" module:"srl_nokia-platform-psu"`
	CleiCode	*string	`path:"clei-code" module:"srl_nokia-platform-psu"`
	FailureReason	*string	`path:"failure-reason" module:"srl_nokia-platform-psu"`
	Id	*uint8	`path:"id" module:"srl_nokia-platform-psu"`
	Input	*SrlNokiaPlatform_Platform_PowerSupply_Input	`path:"input" module:"srl_nokia-platform-psu"`
	LastBooted	*string	`path:"last-booted" module:"srl_nokia-platform-psu"`
	LastChange	*string	`path:"last-change" module:"srl_nokia-platform-psu"`
	ManufacturedDate	*string	`path:"manufactured-date" module:"srl_nokia-platform-psu"`
	OperState	E_SrlNokiaPlatform_OperState	`path:"oper-state" module:"srl_nokia-platform-psu"`
	PartNumber	*string	`path:"part-number" module:"srl_nokia-platform-psu"`
	Removable	*bool	`path:"removable" module:"srl_nokia-platform-psu"`
	SerialNumber	*string	`path:"serial-number" module:"srl_nokia-platform-psu"`
	Temperature	*SrlNokiaPlatform_Platform_PowerSupply_Temperature	`path:"temperature" module:"srl_nokia-platform-psu"`
	Type	*string	`path:"type" module:"srl_nokia-platform-psu"`
}

// IsYANGGoStruct ensures that SrlNokiaPlatform_Platform_PowerSupply implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaPlatform_Platform_PowerSupply) IsYANGGoStruct() {}


// SrlNokiaPlatform_Platform_PowerSupply_Input represents the /srl_nokia-platform/platform/power-supply/input YANG schema element.
type SrlNokiaPlatform_Platform_PowerSupply_Input struct {
	Current	*float64	`path:"current" module:"srl_nokia-platform-psu"`
	Power	*float64	`path:"power" module:"srl_nokia-platform-psu"`
	Voltage	*float64	`path:"voltage" module:"srl_nokia-platform-psu"`
}

// IsYANGGoStruct ensures that SrlNokiaPlatform_Platform_PowerSupply_Input implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaPlatform_Platform_PowerSupply_Input) IsYANGGoStruct() {}


// SrlNokiaPlatform_Platform_PowerSupply_Temperature represents the /srl_nokia-platform/platform/power-supply/temperature YANG schema element.
type SrlNokiaPlatform_Platform_PowerSupply_Temperature struct {
	AlarmStatus	*bool	`path:"alarm-status" module:"srl_nokia-platform-psu"`
	Instant	*int16	`path:"instant" module:"srl_nokia-platform-psu"`
}

// IsYANGGoStruct ensures that SrlNokiaPlatform_Platform_PowerSupply_Temperature implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaPlatform_Platform_PowerSupply_Temperature) IsYANGGoStruct() {}


// SrlNokiaPlatform_Platform_Redundancy represents the /srl_nokia-platform/platform/redundancy YANG schema element.
type SrlNokiaPlatform_Platform_Redundancy struct {
	ActiveModule	E_SrlNokiaPlatform_Platform_Redundancy_ActiveModule	`path:"active-module" module:"srl_nokia-platform-redundancy"`
	FailoverTime	*string	`path:"failover-time" module:"srl_nokia-platform-redundancy"`
	Synchronization	*SrlNokiaPlatform_Platform_Redundancy_Synchronization	`path:"synchronization" module:"srl_nokia-platform-redundancy"`
}

// IsYANGGoStruct ensures that SrlNokiaPlatform_Platform_Redundancy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaPlatform_Platform_Redundancy) IsYANGGoStruct() {}


// SrlNokiaPlatform_Platform_Redundancy_Synchronization represents the /srl_nokia-platform/platform/redundancy/synchronization YANG schema element.
type SrlNokiaPlatform_Platform_Redundancy_Synchronization struct {
	LastSynchronization	*string	`path:"last-synchronization" module:"srl_nokia-platform-redundancy"`
	Overlay	*SrlNokiaPlatform_Platform_Redundancy_Synchronization_Overlay	`path:"overlay" module:"srl_nokia-platform-redundancy"`
	State	E_SrlNokiaPlatformRedundancy_SyncState	`path:"state" module:"srl_nokia-platform-redundancy"`
}

// IsYANGGoStruct ensures that SrlNokiaPlatform_Platform_Redundancy_Synchronization implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaPlatform_Platform_Redundancy_Synchronization) IsYANGGoStruct() {}


// SrlNokiaPlatform_Platform_Redundancy_Synchronization_Overlay represents the /srl_nokia-platform/platform/redundancy/synchronization/overlay YANG schema element.
type SrlNokiaPlatform_Platform_Redundancy_Synchronization_Overlay struct {
	LastSynchronization	*string	`path:"last-synchronization" module:"srl_nokia-platform-redundancy"`
	NextSynchronization	*string	`path:"next-synchronization" module:"srl_nokia-platform-redundancy"`
	SynchronizationFrequency	*uint32	`path:"synchronization-frequency" module:"srl_nokia-platform-redundancy"`
}

// IsYANGGoStruct ensures that SrlNokiaPlatform_Platform_Redundancy_Synchronization_Overlay implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaPlatform_Platform_Redundancy_Synchronization_Overlay) IsYANGGoStruct() {}


// SrlNokiaPlatform_Platform_ResourceMonitoring represents the /srl_nokia-platform/platform/resource-monitoring YANG schema element.
type SrlNokiaPlatform_Platform_ResourceMonitoring struct {
	Acl	*SrlNokiaPlatform_Platform_ResourceMonitoring_Acl	`path:"acl" module:"srl_nokia-platform-acl"`
	IpMplsForwarding	*SrlNokiaPlatform_Platform_ResourceMonitoring_IpMplsForwarding	`path:"ip-mpls-forwarding" module:"srl_nokia-platform-ip-mpls-fwd-resources"`
	Mtu	*SrlNokiaPlatform_Platform_ResourceMonitoring_Mtu	`path:"mtu" module:"srl_nokia-platform-mtu"`
	Qos	*SrlNokiaPlatform_Platform_ResourceMonitoring_Qos	`path:"qos" module:"srl_nokia-platform-qos"`
	Tcam	*SrlNokiaPlatform_Platform_ResourceMonitoring_Tcam	`path:"tcam" module:"srl_nokia-platform-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaPlatform_Platform_ResourceMonitoring implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaPlatform_Platform_ResourceMonitoring) IsYANGGoStruct() {}


// SrlNokiaPlatform_Platform_ResourceMonitoring_Acl represents the /srl_nokia-platform/platform/resource-monitoring/acl YANG schema element.
type SrlNokiaPlatform_Platform_ResourceMonitoring_Acl struct {
	Resource	map[E_SrlNokiaPlatformAcl_AclResources]*SrlNokiaPlatform_Platform_ResourceMonitoring_Acl_Resource	`path:"resource" module:"srl_nokia-platform-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaPlatform_Platform_ResourceMonitoring_Acl implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaPlatform_Platform_ResourceMonitoring_Acl) IsYANGGoStruct() {}


// SrlNokiaPlatform_Platform_ResourceMonitoring_Acl_Resource represents the /srl_nokia-platform/platform/resource-monitoring/acl/resource YANG schema element.
type SrlNokiaPlatform_Platform_ResourceMonitoring_Acl_Resource struct {
	FallingThresholdLog	*uint8	`path:"falling-threshold-log" module:"srl_nokia-platform-acl"`
	Name	E_SrlNokiaPlatformAcl_AclResources	`path:"name" module:"srl_nokia-platform-acl"`
	RisingThresholdLog	*uint8	`path:"rising-threshold-log" module:"srl_nokia-platform-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaPlatform_Platform_ResourceMonitoring_Acl_Resource implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaPlatform_Platform_ResourceMonitoring_Acl_Resource) IsYANGGoStruct() {}


// SrlNokiaPlatform_Platform_ResourceMonitoring_IpMplsForwarding represents the /srl_nokia-platform/platform/resource-monitoring/ip-mpls-forwarding YANG schema element.
type SrlNokiaPlatform_Platform_ResourceMonitoring_IpMplsForwarding struct {
	Resource	map[E_SrlNokiaPlatformIpMplsFwdResources_IpMplsForwardingResources]*SrlNokiaPlatform_Platform_ResourceMonitoring_IpMplsForwarding_Resource	`path:"resource" module:"srl_nokia-platform-ip-mpls-fwd-resources"`
}

// IsYANGGoStruct ensures that SrlNokiaPlatform_Platform_ResourceMonitoring_IpMplsForwarding implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaPlatform_Platform_ResourceMonitoring_IpMplsForwarding) IsYANGGoStruct() {}


// SrlNokiaPlatform_Platform_ResourceMonitoring_IpMplsForwarding_Resource represents the /srl_nokia-platform/platform/resource-monitoring/ip-mpls-forwarding/resource YANG schema element.
type SrlNokiaPlatform_Platform_ResourceMonitoring_IpMplsForwarding_Resource struct {
	FallingThresholdLog	*uint8	`path:"falling-threshold-log" module:"srl_nokia-platform-ip-mpls-fwd-resources"`
	Name	E_SrlNokiaPlatformIpMplsFwdResources_IpMplsForwardingResources	`path:"name" module:"srl_nokia-platform-ip-mpls-fwd-resources"`
	RisingThresholdLog	*uint8	`path:"rising-threshold-log" module:"srl_nokia-platform-ip-mpls-fwd-resources"`
}

// IsYANGGoStruct ensures that SrlNokiaPlatform_Platform_ResourceMonitoring_IpMplsForwarding_Resource implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaPlatform_Platform_ResourceMonitoring_IpMplsForwarding_Resource) IsYANGGoStruct() {}


// SrlNokiaPlatform_Platform_ResourceMonitoring_Mtu represents the /srl_nokia-platform/platform/resource-monitoring/mtu YANG schema element.
type SrlNokiaPlatform_Platform_ResourceMonitoring_Mtu struct {
	Resource	map[E_SrlNokiaPlatformMtu_MtuResources]*SrlNokiaPlatform_Platform_ResourceMonitoring_Mtu_Resource	`path:"resource" module:"srl_nokia-platform-mtu"`
}

// IsYANGGoStruct ensures that SrlNokiaPlatform_Platform_ResourceMonitoring_Mtu implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaPlatform_Platform_ResourceMonitoring_Mtu) IsYANGGoStruct() {}


// SrlNokiaPlatform_Platform_ResourceMonitoring_Mtu_Resource represents the /srl_nokia-platform/platform/resource-monitoring/mtu/resource YANG schema element.
type SrlNokiaPlatform_Platform_ResourceMonitoring_Mtu_Resource struct {
	FallingThresholdLog	*uint8	`path:"falling-threshold-log" module:"srl_nokia-platform-mtu"`
	Name	E_SrlNokiaPlatformMtu_MtuResources	`path:"name" module:"srl_nokia-platform-mtu"`
	RisingThresholdLog	*uint8	`path:"rising-threshold-log" module:"srl_nokia-platform-mtu"`
}

// IsYANGGoStruct ensures that SrlNokiaPlatform_Platform_ResourceMonitoring_Mtu_Resource implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaPlatform_Platform_ResourceMonitoring_Mtu_Resource) IsYANGGoStruct() {}


// SrlNokiaPlatform_Platform_ResourceMonitoring_Qos represents the /srl_nokia-platform/platform/resource-monitoring/qos YANG schema element.
type SrlNokiaPlatform_Platform_ResourceMonitoring_Qos struct {
	Resource	map[E_SrlNokiaPlatformQos_QosResources]*SrlNokiaPlatform_Platform_ResourceMonitoring_Qos_Resource	`path:"resource" module:"srl_nokia-platform-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaPlatform_Platform_ResourceMonitoring_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaPlatform_Platform_ResourceMonitoring_Qos) IsYANGGoStruct() {}


// SrlNokiaPlatform_Platform_ResourceMonitoring_Qos_Resource represents the /srl_nokia-platform/platform/resource-monitoring/qos/resource YANG schema element.
type SrlNokiaPlatform_Platform_ResourceMonitoring_Qos_Resource struct {
	FallingThresholdLog	*uint8	`path:"falling-threshold-log" module:"srl_nokia-platform-qos"`
	Name	E_SrlNokiaPlatformQos_QosResources	`path:"name" module:"srl_nokia-platform-qos"`
	RisingThresholdLog	*uint8	`path:"rising-threshold-log" module:"srl_nokia-platform-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaPlatform_Platform_ResourceMonitoring_Qos_Resource implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaPlatform_Platform_ResourceMonitoring_Qos_Resource) IsYANGGoStruct() {}


// SrlNokiaPlatform_Platform_ResourceMonitoring_Tcam represents the /srl_nokia-platform/platform/resource-monitoring/tcam YANG schema element.
type SrlNokiaPlatform_Platform_ResourceMonitoring_Tcam struct {
	Resource	map[E_SrlNokiaPlatformAcl_TcamResources]*SrlNokiaPlatform_Platform_ResourceMonitoring_Tcam_Resource	`path:"resource" module:"srl_nokia-platform-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaPlatform_Platform_ResourceMonitoring_Tcam implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaPlatform_Platform_ResourceMonitoring_Tcam) IsYANGGoStruct() {}


// SrlNokiaPlatform_Platform_ResourceMonitoring_Tcam_Resource represents the /srl_nokia-platform/platform/resource-monitoring/tcam/resource YANG schema element.
type SrlNokiaPlatform_Platform_ResourceMonitoring_Tcam_Resource struct {
	FallingThresholdLog	*uint8	`path:"falling-threshold-log" module:"srl_nokia-platform-acl"`
	Name	E_SrlNokiaPlatformAcl_TcamResources	`path:"name" module:"srl_nokia-platform-acl"`
	RisingThresholdLog	*uint8	`path:"rising-threshold-log" module:"srl_nokia-platform-acl"`
}

// IsYANGGoStruct ensures that SrlNokiaPlatform_Platform_ResourceMonitoring_Tcam_Resource implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaPlatform_Platform_ResourceMonitoring_Tcam_Resource) IsYANGGoStruct() {}


// SrlNokiaQos_Qos represents the /srl_nokia-qos/qos YANG schema element.
type SrlNokiaQos_Qos struct {
	Classifiers	*SrlNokiaQos_Qos_Classifiers	`path:"classifiers" module:"srl_nokia-qos"`
	RewriteRules	*SrlNokiaQos_Qos_RewriteRules	`path:"rewrite-rules" module:"srl_nokia-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos) IsYANGGoStruct() {}


// SrlNokiaQos_Qos_Classifiers represents the /srl_nokia-qos/qos/classifiers YANG schema element.
type SrlNokiaQos_Qos_Classifiers struct {
	DscpPolicy	map[string]*SrlNokiaQos_Qos_Classifiers_DscpPolicy	`path:"dscp-policy" module:"srl_nokia-qos"`
	MplsTrafficClassPolicy	map[string]*SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy	`path:"mpls-traffic-class-policy" module:"srl_nokia-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_Classifiers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_Classifiers) IsYANGGoStruct() {}


// SrlNokiaQos_Qos_Classifiers_DscpPolicy represents the /srl_nokia-qos/qos/classifiers/dscp-policy YANG schema element.
type SrlNokiaQos_Qos_Classifiers_DscpPolicy struct {
	Dscp	map[uint8]*SrlNokiaQos_Qos_Classifiers_DscpPolicy_Dscp	`path:"dscp" module:"srl_nokia-qos"`
	Name	*string	`path:"name" module:"srl_nokia-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_Classifiers_DscpPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_Classifiers_DscpPolicy) IsYANGGoStruct() {}


// SrlNokiaQos_Qos_Classifiers_DscpPolicy_Dscp represents the /srl_nokia-qos/qos/classifiers/dscp-policy/dscp YANG schema element.
type SrlNokiaQos_Qos_Classifiers_DscpPolicy_Dscp struct {
	ForwardingClass	E_SrlNokiaQos_ForwardingClass	`path:"forwarding-class" module:"srl_nokia-qos"`
	Value	*uint8	`path:"value" module:"srl_nokia-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_Classifiers_DscpPolicy_Dscp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_Classifiers_DscpPolicy_Dscp) IsYANGGoStruct() {}


// SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy represents the /srl_nokia-qos/qos/classifiers/mpls-traffic-class-policy YANG schema element.
type SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy struct {
	Name	*string	`path:"name" module:"srl_nokia-qos"`
	TrafficClass	map[uint8]*SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy_TrafficClass	`path:"traffic-class" module:"srl_nokia-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy) IsYANGGoStruct() {}


// SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy_TrafficClass represents the /srl_nokia-qos/qos/classifiers/mpls-traffic-class-policy/traffic-class YANG schema element.
type SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy_TrafficClass struct {
	ForwardingClass	E_SrlNokiaQos_ForwardingClass	`path:"forwarding-class" module:"srl_nokia-qos"`
	Value	*uint8	`path:"value" module:"srl_nokia-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy_TrafficClass implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_Classifiers_MplsTrafficClassPolicy_TrafficClass) IsYANGGoStruct() {}


// SrlNokiaQos_Qos_RewriteRules represents the /srl_nokia-qos/qos/rewrite-rules YANG schema element.
type SrlNokiaQos_Qos_RewriteRules struct {
	DscpPolicy	map[string]*SrlNokiaQos_Qos_RewriteRules_DscpPolicy	`path:"dscp-policy" module:"srl_nokia-qos"`
	MplsTrafficClassPolicy	map[string]*SrlNokiaQos_Qos_RewriteRules_MplsTrafficClassPolicy	`path:"mpls-traffic-class-policy" module:"srl_nokia-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_RewriteRules implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_RewriteRules) IsYANGGoStruct() {}


// SrlNokiaQos_Qos_RewriteRules_DscpPolicy represents the /srl_nokia-qos/qos/rewrite-rules/dscp-policy YANG schema element.
type SrlNokiaQos_Qos_RewriteRules_DscpPolicy struct {
	Map	map[E_SrlNokiaQos_ForwardingClass]*SrlNokiaQos_Qos_RewriteRules_DscpPolicy_Map	`path:"map" module:"srl_nokia-qos"`
	Name	*string	`path:"name" module:"srl_nokia-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_RewriteRules_DscpPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_RewriteRules_DscpPolicy) IsYANGGoStruct() {}


// SrlNokiaQos_Qos_RewriteRules_DscpPolicy_Map represents the /srl_nokia-qos/qos/rewrite-rules/dscp-policy/map YANG schema element.
type SrlNokiaQos_Qos_RewriteRules_DscpPolicy_Map struct {
	Dscp	SrlNokiaQos_Qos_RewriteRules_DscpPolicy_Map_Dscp_Union	`path:"dscp" module:"srl_nokia-qos"`
	ForwardingClass	E_SrlNokiaQos_ForwardingClass	`path:"forwarding-class" module:"srl_nokia-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_RewriteRules_DscpPolicy_Map implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_RewriteRules_DscpPolicy_Map) IsYANGGoStruct() {}


// SrlNokiaQos_Qos_RewriteRules_MplsTrafficClassPolicy represents the /srl_nokia-qos/qos/rewrite-rules/mpls-traffic-class-policy YANG schema element.
type SrlNokiaQos_Qos_RewriteRules_MplsTrafficClassPolicy struct {
	Map	map[E_SrlNokiaQos_ForwardingClass]*SrlNokiaQos_Qos_RewriteRules_MplsTrafficClassPolicy_Map	`path:"map" module:"srl_nokia-qos"`
	Name	*string	`path:"name" module:"srl_nokia-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_RewriteRules_MplsTrafficClassPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_RewriteRules_MplsTrafficClassPolicy) IsYANGGoStruct() {}


// SrlNokiaQos_Qos_RewriteRules_MplsTrafficClassPolicy_Map represents the /srl_nokia-qos/qos/rewrite-rules/mpls-traffic-class-policy/map YANG schema element.
type SrlNokiaQos_Qos_RewriteRules_MplsTrafficClassPolicy_Map struct {
	ForwardingClass	E_SrlNokiaQos_ForwardingClass	`path:"forwarding-class" module:"srl_nokia-qos"`
	TrafficClass	*uint8	`path:"traffic-class" module:"srl_nokia-qos"`
}

// IsYANGGoStruct ensures that SrlNokiaQos_Qos_RewriteRules_MplsTrafficClassPolicy_Map implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaQos_Qos_RewriteRules_MplsTrafficClassPolicy_Map) IsYANGGoStruct() {}


// SrlNokiaRoutingPolicy_RoutingPolicy represents the /srl_nokia-routing-policy/routing-policy YANG schema element.
type SrlNokiaRoutingPolicy_RoutingPolicy struct {
	AsPathSet	map[string]*SrlNokiaRoutingPolicy_RoutingPolicy_AsPathSet	`path:"as-path-set" module:"srl_nokia-routing-policy"`
	CommunitySet	map[string]*SrlNokiaRoutingPolicy_RoutingPolicy_CommunitySet	`path:"community-set" module:"srl_nokia-routing-policy"`
	Policy	map[string]*SrlNokiaRoutingPolicy_RoutingPolicy_Policy	`path:"policy" module:"srl_nokia-routing-policy"`
	PrefixSet	map[string]*SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet	`path:"prefix-set" module:"srl_nokia-routing-policy"`
}

// IsYANGGoStruct ensures that SrlNokiaRoutingPolicy_RoutingPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaRoutingPolicy_RoutingPolicy) IsYANGGoStruct() {}


// SrlNokiaRoutingPolicy_RoutingPolicy_AsPathSet represents the /srl_nokia-routing-policy/routing-policy/as-path-set YANG schema element.
type SrlNokiaRoutingPolicy_RoutingPolicy_AsPathSet struct {
	Expression	*string	`path:"expression" module:"srl_nokia-routing-policy"`
	Name	*string	`path:"name" module:"srl_nokia-routing-policy"`
}

// IsYANGGoStruct ensures that SrlNokiaRoutingPolicy_RoutingPolicy_AsPathSet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_AsPathSet) IsYANGGoStruct() {}


// SrlNokiaRoutingPolicy_RoutingPolicy_CommunitySet represents the /srl_nokia-routing-policy/routing-policy/community-set YANG schema element.
type SrlNokiaRoutingPolicy_RoutingPolicy_CommunitySet struct {
	Member	[]SrlNokiaRoutingPolicy_RoutingPolicy_CommunitySet_Member_Union	`path:"member" module:"srl_nokia-routing-policy"`
	Name	*string	`path:"name" module:"srl_nokia-routing-policy"`
}

// IsYANGGoStruct ensures that SrlNokiaRoutingPolicy_RoutingPolicy_CommunitySet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_CommunitySet) IsYANGGoStruct() {}


// SrlNokiaRoutingPolicy_RoutingPolicy_Policy represents the /srl_nokia-routing-policy/routing-policy/policy YANG schema element.
type SrlNokiaRoutingPolicy_RoutingPolicy_Policy struct {
	DefaultAction	*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction	`path:"default-action" module:"srl_nokia-routing-policy"`
	Name	*string	`path:"name" module:"srl_nokia-routing-policy"`
	Statement	map[uint32]*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement	`path:"statement" module:"srl_nokia-routing-policy"`
}

// IsYANGGoStruct ensures that SrlNokiaRoutingPolicy_RoutingPolicy_Policy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy) IsYANGGoStruct() {}


// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction represents the /srl_nokia-routing-policy/routing-policy/policy/default-action YANG schema element.
type SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction struct {
	Accept	*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept	`path:"accept" module:"srl_nokia-routing-policy"`
	NextEntry	*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_NextEntry	`path:"next-entry" module:"srl_nokia-routing-policy"`
	NextPolicy	*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_NextPolicy	`path:"next-policy" module:"srl_nokia-routing-policy"`
	Reject	*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Reject	`path:"reject" module:"srl_nokia-routing-policy"`
}

// IsYANGGoStruct ensures that SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction) IsYANGGoStruct() {}


// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept represents the /srl_nokia-routing-policy/routing-policy/policy/default-action/accept YANG schema element.
type SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept struct {
	Bgp	*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp	`path:"bgp" module:"srl_nokia-routing-policy"`
}

// IsYANGGoStruct ensures that SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept) IsYANGGoStruct() {}


// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp represents the /srl_nokia-routing-policy/routing-policy/policy/default-action/accept/bgp YANG schema element.
type SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp struct {
	AsPath	*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath	`path:"as-path" module:"srl_nokia-routing-policy"`
	Communities	*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_Communities	`path:"communities" module:"srl_nokia-routing-policy"`
	LocalPreference	*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_LocalPreference	`path:"local-preference" module:"srl_nokia-routing-policy"`
	Origin	*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_Origin	`path:"origin" module:"srl_nokia-routing-policy"`
}

// IsYANGGoStruct ensures that SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp) IsYANGGoStruct() {}


// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath represents the /srl_nokia-routing-policy/routing-policy/policy/default-action/accept/bgp/as-path YANG schema element.
type SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath struct {
	Prepend	*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend	`path:"prepend" module:"srl_nokia-routing-policy"`
}

// IsYANGGoStruct ensures that SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath) IsYANGGoStruct() {}


// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend represents the /srl_nokia-routing-policy/routing-policy/policy/default-action/accept/bgp/as-path/prepend YANG schema element.
type SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend struct {
	AsNumber	SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber_Union	`path:"as-number" module:"srl_nokia-routing-policy"`
	RepeatN	*uint8	`path:"repeat-n" module:"srl_nokia-routing-policy"`
}

// IsYANGGoStruct ensures that SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend) IsYANGGoStruct() {}


// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_Communities represents the /srl_nokia-routing-policy/routing-policy/policy/default-action/accept/bgp/communities YANG schema element.
type SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_Communities struct {
	Add	*string	`path:"add" module:"srl_nokia-routing-policy"`
	Remove	*string	`path:"remove" module:"srl_nokia-routing-policy"`
	Replace	*string	`path:"replace" module:"srl_nokia-routing-policy"`
}

// IsYANGGoStruct ensures that SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_Communities implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_Communities) IsYANGGoStruct() {}


// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_LocalPreference represents the /srl_nokia-routing-policy/routing-policy/policy/default-action/accept/bgp/local-preference YANG schema element.
type SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_LocalPreference struct {
	Set	*uint32	`path:"set" module:"srl_nokia-routing-policy"`
}

// IsYANGGoStruct ensures that SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_LocalPreference implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_LocalPreference) IsYANGGoStruct() {}


// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_Origin represents the /srl_nokia-routing-policy/routing-policy/policy/default-action/accept/bgp/origin YANG schema element.
type SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_Origin struct {
	Set	E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_Origin_Set	`path:"set" module:"srl_nokia-routing-policy"`
}

// IsYANGGoStruct ensures that SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_Origin implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_Origin) IsYANGGoStruct() {}


// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_NextEntry represents the /srl_nokia-routing-policy/routing-policy/policy/default-action/next-entry YANG schema element.
type SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_NextEntry struct {
}

// IsYANGGoStruct ensures that SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_NextEntry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_NextEntry) IsYANGGoStruct() {}


// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_NextPolicy represents the /srl_nokia-routing-policy/routing-policy/policy/default-action/next-policy YANG schema element.
type SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_NextPolicy struct {
}

// IsYANGGoStruct ensures that SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_NextPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_NextPolicy) IsYANGGoStruct() {}


// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Reject represents the /srl_nokia-routing-policy/routing-policy/policy/default-action/reject YANG schema element.
type SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Reject struct {
}

// IsYANGGoStruct ensures that SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Reject implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Reject) IsYANGGoStruct() {}


// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement represents the /srl_nokia-routing-policy/routing-policy/policy/statement YANG schema element.
type SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement struct {
	Action	*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action	`path:"action" module:"srl_nokia-routing-policy"`
	Match	*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match	`path:"match" module:"srl_nokia-routing-policy"`
	SequenceId	*uint32	`path:"sequence-id" module:"srl_nokia-routing-policy"`
}

// IsYANGGoStruct ensures that SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement) IsYANGGoStruct() {}


// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action represents the /srl_nokia-routing-policy/routing-policy/policy/statement/action YANG schema element.
type SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action struct {
	Accept	*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept	`path:"accept" module:"srl_nokia-routing-policy"`
	NextEntry	*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_NextEntry	`path:"next-entry" module:"srl_nokia-routing-policy"`
	NextPolicy	*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_NextPolicy	`path:"next-policy" module:"srl_nokia-routing-policy"`
	Reject	*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Reject	`path:"reject" module:"srl_nokia-routing-policy"`
}

// IsYANGGoStruct ensures that SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action) IsYANGGoStruct() {}


// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept represents the /srl_nokia-routing-policy/routing-policy/policy/statement/action/accept YANG schema element.
type SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept struct {
	Bgp	*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp	`path:"bgp" module:"srl_nokia-routing-policy"`
}

// IsYANGGoStruct ensures that SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept) IsYANGGoStruct() {}


// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp represents the /srl_nokia-routing-policy/routing-policy/policy/statement/action/accept/bgp YANG schema element.
type SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp struct {
	AsPath	*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_AsPath	`path:"as-path" module:"srl_nokia-routing-policy"`
	Communities	*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_Communities	`path:"communities" module:"srl_nokia-routing-policy"`
	LocalPreference	*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_LocalPreference	`path:"local-preference" module:"srl_nokia-routing-policy"`
	Origin	*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_Origin	`path:"origin" module:"srl_nokia-routing-policy"`
}

// IsYANGGoStruct ensures that SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp) IsYANGGoStruct() {}


// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_AsPath represents the /srl_nokia-routing-policy/routing-policy/policy/statement/action/accept/bgp/as-path YANG schema element.
type SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_AsPath struct {
	Prepend	*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_AsPath_Prepend	`path:"prepend" module:"srl_nokia-routing-policy"`
}

// IsYANGGoStruct ensures that SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_AsPath implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_AsPath) IsYANGGoStruct() {}


// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_AsPath_Prepend represents the /srl_nokia-routing-policy/routing-policy/policy/statement/action/accept/bgp/as-path/prepend YANG schema element.
type SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_AsPath_Prepend struct {
	AsNumber	SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_AsPath_Prepend_AsNumber_Union	`path:"as-number" module:"srl_nokia-routing-policy"`
	RepeatN	*uint8	`path:"repeat-n" module:"srl_nokia-routing-policy"`
}

// IsYANGGoStruct ensures that SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_AsPath_Prepend implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_AsPath_Prepend) IsYANGGoStruct() {}


// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_Communities represents the /srl_nokia-routing-policy/routing-policy/policy/statement/action/accept/bgp/communities YANG schema element.
type SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_Communities struct {
	Add	*string	`path:"add" module:"srl_nokia-routing-policy"`
	Remove	*string	`path:"remove" module:"srl_nokia-routing-policy"`
	Replace	*string	`path:"replace" module:"srl_nokia-routing-policy"`
}

// IsYANGGoStruct ensures that SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_Communities implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_Communities) IsYANGGoStruct() {}


// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_LocalPreference represents the /srl_nokia-routing-policy/routing-policy/policy/statement/action/accept/bgp/local-preference YANG schema element.
type SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_LocalPreference struct {
	Set	*uint32	`path:"set" module:"srl_nokia-routing-policy"`
}

// IsYANGGoStruct ensures that SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_LocalPreference implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_LocalPreference) IsYANGGoStruct() {}


// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_Origin represents the /srl_nokia-routing-policy/routing-policy/policy/statement/action/accept/bgp/origin YANG schema element.
type SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_Origin struct {
	Set	E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_Origin_Set	`path:"set" module:"srl_nokia-routing-policy"`
}

// IsYANGGoStruct ensures that SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_Origin implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_Origin) IsYANGGoStruct() {}


// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_NextEntry represents the /srl_nokia-routing-policy/routing-policy/policy/statement/action/next-entry YANG schema element.
type SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_NextEntry struct {
}

// IsYANGGoStruct ensures that SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_NextEntry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_NextEntry) IsYANGGoStruct() {}


// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_NextPolicy represents the /srl_nokia-routing-policy/routing-policy/policy/statement/action/next-policy YANG schema element.
type SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_NextPolicy struct {
}

// IsYANGGoStruct ensures that SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_NextPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_NextPolicy) IsYANGGoStruct() {}


// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Reject represents the /srl_nokia-routing-policy/routing-policy/policy/statement/action/reject YANG schema element.
type SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Reject struct {
}

// IsYANGGoStruct ensures that SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Reject implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Reject) IsYANGGoStruct() {}


// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match represents the /srl_nokia-routing-policy/routing-policy/policy/statement/match YANG schema element.
type SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match struct {
	Bgp	*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp	`path:"bgp" module:"srl_nokia-routing-policy"`
	PrefixSet	*string	`path:"prefix-set" module:"srl_nokia-routing-policy"`
	Protocol	E_SrlNokiaCommon_IpRouteOwner	`path:"protocol" module:"srl_nokia-routing-policy"`
}

// IsYANGGoStruct ensures that SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match) IsYANGGoStruct() {}


// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp represents the /srl_nokia-routing-policy/routing-policy/policy/statement/match/bgp YANG schema element.
type SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp struct {
	AsPathLength	*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp_AsPathLength	`path:"as-path-length" module:"srl_nokia-routing-policy"`
	AsPathSet	*string	`path:"as-path-set" module:"srl_nokia-routing-policy"`
	CommunitySet	*string	`path:"community-set" module:"srl_nokia-routing-policy"`
	Family	E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp_Family	`path:"family" module:"srl_nokia-routing-policy"`
}

// IsYANGGoStruct ensures that SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp) IsYANGGoStruct() {}


// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp_AsPathLength represents the /srl_nokia-routing-policy/routing-policy/policy/statement/match/bgp/as-path-length YANG schema element.
type SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp_AsPathLength struct {
	Operator	E_SrlNokiaRoutingPolicy_ComparisonOperatorType	`path:"operator" module:"srl_nokia-routing-policy"`
	Unique	*bool	`path:"unique" module:"srl_nokia-routing-policy"`
	Value	*uint8	`path:"value" module:"srl_nokia-routing-policy"`
}

// IsYANGGoStruct ensures that SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp_AsPathLength implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Match_Bgp_AsPathLength) IsYANGGoStruct() {}


// SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet represents the /srl_nokia-routing-policy/routing-policy/prefix-set YANG schema element.
type SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet struct {
	Name	*string	`path:"name" module:"srl_nokia-routing-policy"`
	Prefix	map[SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet_Prefix_Key]*SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet_Prefix	`path:"prefix" module:"srl_nokia-routing-policy"`
}

// IsYANGGoStruct ensures that SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet) IsYANGGoStruct() {}

// SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet_Prefix_Key represents the key for list Prefix of element /srl_nokia-routing-policy/routing-policy/prefix-set.
type SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet_Prefix_Key struct {
	IpPrefix	string	`path:"ip-prefix"`
	MaskLengthRange	string	`path:"mask-length-range"`
}


// SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet_Prefix represents the /srl_nokia-routing-policy/routing-policy/prefix-set/prefix YANG schema element.
type SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet_Prefix struct {
	IpPrefix	*string	`path:"ip-prefix" module:"srl_nokia-routing-policy"`
	MaskLengthRange	*string	`path:"mask-length-range" module:"srl_nokia-routing-policy"`
}

// IsYANGGoStruct ensures that SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet_Prefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_PrefixSet_Prefix) IsYANGGoStruct() {}


// SrlNokiaSystem_System represents the /srl_nokia-system/system YANG schema element.
type SrlNokiaSystem_System struct {
	Aaa	*SrlNokiaSystem_System_Aaa	`path:"aaa" module:"srl_nokia-aaa"`
	AppManagement	*SrlNokiaSystem_System_AppManagement	`path:"app-management" module:"srl_nokia-app-mgmt"`
	Banner	*SrlNokiaSystem_System_Banner	`path:"banner" module:"srl_nokia-system-banner"`
	Boot	*SrlNokiaSystem_System_Boot	`path:"boot" module:"srl_nokia-boot"`
	Clock	*SrlNokiaSystem_System_Clock	`path:"clock" module:"srl_nokia-ntp"`
	Configuration	*SrlNokiaSystem_System_Configuration	`path:"configuration" module:"srl_nokia-configuration"`
	Dns	*SrlNokiaSystem_System_Dns	`path:"dns" module:"srl_nokia-dns"`
	FtpServer	*SrlNokiaSystem_System_FtpServer	`path:"ftp-server" module:"srl_nokia-ftp"`
	GnmiServer	*SrlNokiaSystem_System_GnmiServer	`path:"gnmi-server" module:"srl_nokia-gnmi-server"`
	Information	*SrlNokiaSystem_System_Information	`path:"information" module:"srl_nokia-system-info"`
	IpLoadBalancing	*SrlNokiaSystem_System_IpLoadBalancing	`path:"ip-load-balancing" module:"srl_nokia-load-balancing"`
	JsonRpcServer	*SrlNokiaSystem_System_JsonRpcServer	`path:"json-rpc-server" module:"srl_nokia-json-rpc"`
	Lldp	*SrlNokiaSystem_System_Lldp	`path:"lldp" module:"srl_nokia-lldp"`
	Logging	*SrlNokiaSystem_System_Logging	`path:"logging" module:"srl_nokia-logging"`
	Maintenance	*SrlNokiaSystem_System_Maintenance	`path:"maintenance" module:"srl_nokia-maintenance-mode"`
	Mtu	*SrlNokiaSystem_System_Mtu	`path:"mtu" module:"srl_nokia-mtu"`
	Name	*SrlNokiaSystem_System_Name	`path:"name" module:"srl_nokia-system-name"`
	Ntp	*SrlNokiaSystem_System_Ntp	`path:"ntp" module:"srl_nokia-ntp"`
	Sflow	*SrlNokiaSystem_System_Sflow	`path:"sflow" module:"srl_nokia-sflow"`
	Snmp	*SrlNokiaSystem_System_Snmp	`path:"snmp" module:"srl_nokia-snmp"`
	SshServer	*SrlNokiaSystem_System_SshServer	`path:"ssh-server" module:"srl_nokia-ssh"`
	Tls	*SrlNokiaSystem_System_Tls	`path:"tls" module:"srl_nokia-tls"`
	TraceOptions	[]E_SrlNokiaSystem_System_TraceOptions	`path:"trace-options" module:"srl_nokia-system"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System) IsYANGGoStruct() {}


// SrlNokiaSystem_System_Aaa represents the /srl_nokia-system/system/aaa YANG schema element.
type SrlNokiaSystem_System_Aaa struct {
	Accounting	*SrlNokiaSystem_System_Aaa_Accounting	`path:"accounting" module:"srl_nokia-aaa"`
	Authentication	*SrlNokiaSystem_System_Aaa_Authentication	`path:"authentication" module:"srl_nokia-aaa"`
	ServerGroup	map[string]*SrlNokiaSystem_System_Aaa_ServerGroup	`path:"server-group" module:"srl_nokia-aaa"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Aaa implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Aaa) IsYANGGoStruct() {}


// SrlNokiaSystem_System_Aaa_Accounting represents the /srl_nokia-system/system/aaa/accounting YANG schema element.
type SrlNokiaSystem_System_Aaa_Accounting struct {
	AccountingMethod	[]string	`path:"accounting-method" module:"srl_nokia-aaa"`
	Event	map[E_SrlNokiaAaaTypes_AaaAccountingEventType]*SrlNokiaSystem_System_Aaa_Accounting_Event	`path:"event" module:"srl_nokia-aaa"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Aaa_Accounting implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Aaa_Accounting) IsYANGGoStruct() {}


// SrlNokiaSystem_System_Aaa_Accounting_Event represents the /srl_nokia-system/system/aaa/accounting/event YANG schema element.
type SrlNokiaSystem_System_Aaa_Accounting_Event struct {
	EventType	E_SrlNokiaAaaTypes_AaaAccountingEventType	`path:"event-type" module:"srl_nokia-aaa"`
	Record	E_SrlNokiaAaaTypes_AaaAccountingRecordType	`path:"record" module:"srl_nokia-aaa"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Aaa_Accounting_Event implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Aaa_Accounting_Event) IsYANGGoStruct() {}


// SrlNokiaSystem_System_Aaa_Authentication represents the /srl_nokia-system/system/aaa/authentication YANG schema element.
type SrlNokiaSystem_System_Aaa_Authentication struct {
	AdminUser	*SrlNokiaSystem_System_Aaa_Authentication_AdminUser	`path:"admin-user" module:"srl_nokia-aaa"`
	AuthenticationMethod	[]string	`path:"authentication-method" module:"srl_nokia-aaa"`
	ExitOnReject	*bool	`path:"exit-on-reject" module:"srl_nokia-aaa"`
	Session	map[uint32]*SrlNokiaSystem_System_Aaa_Authentication_Session	`path:"session" module:"srl_nokia-aaa"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Aaa_Authentication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Aaa_Authentication) IsYANGGoStruct() {}


// SrlNokiaSystem_System_Aaa_Authentication_AdminUser represents the /srl_nokia-system/system/aaa/authentication/admin-user YANG schema element.
type SrlNokiaSystem_System_Aaa_Authentication_AdminUser struct {
	Password	*string	`path:"password" module:"srl_nokia-aaa"`
	Username	*string	`path:"username" module:"srl_nokia-aaa"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Aaa_Authentication_AdminUser implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Aaa_Authentication_AdminUser) IsYANGGoStruct() {}


// SrlNokiaSystem_System_Aaa_Authentication_Session represents the /srl_nokia-system/system/aaa/authentication/session YANG schema element.
type SrlNokiaSystem_System_Aaa_Authentication_Session struct {
	Id	*uint32	`path:"id" module:"srl_nokia-aaa"`
	LoginTime	*string	`path:"login-time" module:"srl_nokia-aaa"`
	RemoteHost	*string	`path:"remote-host" module:"srl_nokia-aaa"`
	ServiceName	*string	`path:"service-name" module:"srl_nokia-aaa"`
	TtyName	*string	`path:"tty-name" module:"srl_nokia-aaa"`
	Username	*string	`path:"username" module:"srl_nokia-aaa"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Aaa_Authentication_Session implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Aaa_Authentication_Session) IsYANGGoStruct() {}


// SrlNokiaSystem_System_Aaa_ServerGroup represents the /srl_nokia-system/system/aaa/server-group YANG schema element.
type SrlNokiaSystem_System_Aaa_ServerGroup struct {
	Name	*string	`path:"name" module:"srl_nokia-aaa"`
	Server	map[string]*SrlNokiaSystem_System_Aaa_ServerGroup_Server	`path:"server" module:"srl_nokia-aaa"`
	Timeout	*uint16	`path:"timeout" module:"srl_nokia-aaa"`
	Type	E_SrlNokiaAaaTypes_AaaServerType	`path:"type" module:"srl_nokia-aaa"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Aaa_ServerGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Aaa_ServerGroup) IsYANGGoStruct() {}


// SrlNokiaSystem_System_Aaa_ServerGroup_Server represents the /srl_nokia-system/system/aaa/server-group/server YANG schema element.
type SrlNokiaSystem_System_Aaa_ServerGroup_Server struct {
	Address	*string	`path:"address" module:"srl_nokia-aaa"`
	Name	*string	`path:"name" module:"srl_nokia-aaa"`
	NetworkInstance	*string	`path:"network-instance" module:"srl_nokia-aaa"`
	OperState	E_SrlNokiaAaa_OperState	`path:"oper-state" module:"srl_nokia-aaa"`
	Statistics	*SrlNokiaSystem_System_Aaa_ServerGroup_Server_Statistics	`path:"statistics" module:"srl_nokia-aaa"`
	Tacacs	*SrlNokiaSystem_System_Aaa_ServerGroup_Server_Tacacs	`path:"tacacs" module:"srl_nokia-aaa"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Aaa_ServerGroup_Server implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Aaa_ServerGroup_Server) IsYANGGoStruct() {}


// SrlNokiaSystem_System_Aaa_ServerGroup_Server_Statistics represents the /srl_nokia-system/system/aaa/server-group/server/statistics YANG schema element.
type SrlNokiaSystem_System_Aaa_ServerGroup_Server_Statistics struct {
	AccountingConnectionFailures	*uint32	`path:"accounting-connection-failures" module:"srl_nokia-aaa"`
	AccountingRejects	*uint32	`path:"accounting-rejects" module:"srl_nokia-aaa"`
	AccountingSuccess	*uint32	`path:"accounting-success" module:"srl_nokia-aaa"`
	LoginConnectionFailures	*uint32	`path:"login-connection-failures" module:"srl_nokia-aaa"`
	LoginRejects	*uint32	`path:"login-rejects" module:"srl_nokia-aaa"`
	LoginSuccess	*uint32	`path:"login-success" module:"srl_nokia-aaa"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Aaa_ServerGroup_Server_Statistics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Aaa_ServerGroup_Server_Statistics) IsYANGGoStruct() {}


// SrlNokiaSystem_System_Aaa_ServerGroup_Server_Tacacs represents the /srl_nokia-system/system/aaa/server-group/server/tacacs YANG schema element.
type SrlNokiaSystem_System_Aaa_ServerGroup_Server_Tacacs struct {
	Port	*uint16	`path:"port" module:"srl_nokia-aaa"`
	SecretKey	*string	`path:"secret-key" module:"srl_nokia-aaa"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Aaa_ServerGroup_Server_Tacacs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Aaa_ServerGroup_Server_Tacacs) IsYANGGoStruct() {}


// SrlNokiaSystem_System_AppManagement represents the /srl_nokia-system/system/app-management YANG schema element.
type SrlNokiaSystem_System_AppManagement struct {
	Application	map[string]*SrlNokiaSystem_System_AppManagement_Application	`path:"application" module:"srl_nokia-app-mgmt"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_AppManagement implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_AppManagement) IsYANGGoStruct() {}


// SrlNokiaSystem_System_AppManagement_Application represents the /srl_nokia-system/system/app-management/application YANG schema element.
type SrlNokiaSystem_System_AppManagement_Application struct {
	Author	*string	`path:"author" module:"srl_nokia-app-mgmt"`
	FailureAction	*string	`path:"failure-action" module:"srl_nokia-app-mgmt"`
	FailureThreshold	*uint8	`path:"failure-threshold" module:"srl_nokia-app-mgmt"`
	FailureWindow	*uint32	`path:"failure-window" module:"srl_nokia-app-mgmt"`
	LastChange	*string	`path:"last-change" module:"srl_nokia-app-mgmt"`
	LaunchCommand	*string	`path:"launch-command" module:"srl_nokia-app-mgmt"`
	Name	*string	`path:"name" module:"srl_nokia-app-mgmt"`
	Path	*string	`path:"path" module:"srl_nokia-app-mgmt"`
	Pid	*uint32	`path:"pid" module:"srl_nokia-app-mgmt"`
	RestrictedOperations	[]E_SrlNokiaAppMgmt_RestrictedOperationType	`path:"restricted-operations" module:"srl_nokia-app-mgmt"`
	SearchCommand	*string	`path:"search-command" module:"srl_nokia-app-mgmt"`
	State	E_SrlNokiaAppMgmt_ApplicationStateType	`path:"state" module:"srl_nokia-app-mgmt"`
	Statistics	*SrlNokiaSystem_System_AppManagement_Application_Statistics	`path:"statistics" module:"srl_nokia-app-mgmt"`
	Version	*string	`path:"version" module:"srl_nokia-app-mgmt"`
	Yang	*SrlNokiaSystem_System_AppManagement_Application_Yang	`path:"yang" module:"srl_nokia-app-mgmt"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_AppManagement_Application implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_AppManagement_Application) IsYANGGoStruct() {}


// SrlNokiaSystem_System_AppManagement_Application_Statistics represents the /srl_nokia-system/system/app-management/application/statistics YANG schema element.
type SrlNokiaSystem_System_AppManagement_Application_Statistics struct {
	RestartCount	*uint32	`path:"restart-count" module:"srl_nokia-app-mgmt"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_AppManagement_Application_Statistics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_AppManagement_Application_Statistics) IsYANGGoStruct() {}


// SrlNokiaSystem_System_AppManagement_Application_Yang represents the /srl_nokia-system/system/app-management/application/yang YANG schema element.
type SrlNokiaSystem_System_AppManagement_Application_Yang struct {
	Modules	[]string	`path:"modules" module:"srl_nokia-app-mgmt"`
	SourceDirectories	[]string	`path:"source-directories" module:"srl_nokia-app-mgmt"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_AppManagement_Application_Yang implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_AppManagement_Application_Yang) IsYANGGoStruct() {}


// SrlNokiaSystem_System_Banner represents the /srl_nokia-system/system/banner YANG schema element.
type SrlNokiaSystem_System_Banner struct {
	LoginBanner	*string	`path:"login-banner" module:"srl_nokia-system-banner"`
	MotdBanner	*string	`path:"motd-banner" module:"srl_nokia-system-banner"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Banner implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Banner) IsYANGGoStruct() {}


// SrlNokiaSystem_System_Boot represents the /srl_nokia-system/system/boot YANG schema element.
type SrlNokiaSystem_System_Boot struct {
	Autoboot	*SrlNokiaSystem_System_Boot_Autoboot	`path:"autoboot" module:"srl_nokia-boot"`
	Image	[]string	`path:"image" module:"srl_nokia-boot"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Boot implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Boot) IsYANGGoStruct() {}


// SrlNokiaSystem_System_Boot_Autoboot represents the /srl_nokia-system/system/boot/autoboot YANG schema element.
type SrlNokiaSystem_System_Boot_Autoboot struct {
	AdminState	E_SrlNokiaBoot_AdminState	`path:"admin-state" module:"srl_nokia-boot"`
	Attempts	*uint8	`path:"attempts" module:"srl_nokia-boot"`
	ClientId	E_SrlNokiaBoot_ClientId	`path:"client-id" module:"srl_nokia-boot"`
	Interface	*string	`path:"interface" module:"srl_nokia-boot"`
	OperState	*string	`path:"oper-state" module:"srl_nokia-boot"`
	Timeout	*uint32	`path:"timeout" module:"srl_nokia-boot"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Boot_Autoboot implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Boot_Autoboot) IsYANGGoStruct() {}


// SrlNokiaSystem_System_Clock represents the /srl_nokia-system/system/clock YANG schema element.
type SrlNokiaSystem_System_Clock struct {
	Timezone	E_SrlNokiaNtp_IanaTimezone	`path:"timezone" module:"srl_nokia-ntp"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Clock implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Clock) IsYANGGoStruct() {}


// SrlNokiaSystem_System_Configuration represents the /srl_nokia-system/system/configuration YANG schema element.
type SrlNokiaSystem_System_Configuration struct {
	Checkpoint	map[uint8]*SrlNokiaSystem_System_Configuration_Checkpoint	`path:"checkpoint" module:"srl_nokia-configuration"`
	LastChange	*string	`path:"last-change" module:"srl_nokia-configuration"`
	MaxCheckpoints	*uint8	`path:"max-checkpoints" module:"srl_nokia-configuration"`
	Session	map[uint32]*SrlNokiaSystem_System_Configuration_Session	`path:"session" module:"srl_nokia-configuration"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Configuration implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Configuration) IsYANGGoStruct() {}


// SrlNokiaSystem_System_Configuration_Checkpoint represents the /srl_nokia-system/system/configuration/checkpoint YANG schema element.
type SrlNokiaSystem_System_Configuration_Checkpoint struct {
	Comment	*string	`path:"comment" module:"srl_nokia-configuration"`
	Created	*string	`path:"created" module:"srl_nokia-configuration"`
	Id	*uint8	`path:"id" module:"srl_nokia-configuration"`
	Name	*string	`path:"name" module:"srl_nokia-configuration"`
	Size	*uint64	`path:"size" module:"srl_nokia-configuration"`
	Username	*string	`path:"username" module:"srl_nokia-configuration"`
	Version	*string	`path:"version" module:"srl_nokia-configuration"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Configuration_Checkpoint implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Configuration_Checkpoint) IsYANGGoStruct() {}


// SrlNokiaSystem_System_Configuration_Session represents the /srl_nokia-system/system/configuration/session YANG schema element.
type SrlNokiaSystem_System_Configuration_Session struct {
	Id	*uint32	`path:"id" module:"srl_nokia-configuration"`
	Started	*string	`path:"started" module:"srl_nokia-configuration"`
	Type	E_SrlNokiaConfiguration_CandidateType	`path:"type" module:"srl_nokia-configuration"`
	Username	*string	`path:"username" module:"srl_nokia-configuration"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Configuration_Session implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Configuration_Session) IsYANGGoStruct() {}


// SrlNokiaSystem_System_Dns represents the /srl_nokia-system/system/dns YANG schema element.
type SrlNokiaSystem_System_Dns struct {
	HostEntry	map[string]*SrlNokiaSystem_System_Dns_HostEntry	`path:"host-entry" module:"srl_nokia-dns"`
	NetworkInstance	*string	`path:"network-instance" module:"srl_nokia-dns"`
	OperState	E_SrlNokiaDns_OperState	`path:"oper-state" module:"srl_nokia-dns"`
	SearchList	[]string	`path:"search-list" module:"srl_nokia-dns"`
	ServerList	[]string	`path:"server-list" module:"srl_nokia-dns"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Dns implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Dns) IsYANGGoStruct() {}


// SrlNokiaSystem_System_Dns_HostEntry represents the /srl_nokia-system/system/dns/host-entry YANG schema element.
type SrlNokiaSystem_System_Dns_HostEntry struct {
	Ipv4Address	*string	`path:"ipv4-address" module:"srl_nokia-dns"`
	Ipv6Address	*string	`path:"ipv6-address" module:"srl_nokia-dns"`
	Name	*string	`path:"name" module:"srl_nokia-dns"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Dns_HostEntry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Dns_HostEntry) IsYANGGoStruct() {}


// SrlNokiaSystem_System_FtpServer represents the /srl_nokia-system/system/ftp-server YANG schema element.
type SrlNokiaSystem_System_FtpServer struct {
	NetworkInstance	map[string]*SrlNokiaSystem_System_FtpServer_NetworkInstance	`path:"network-instance" module:"srl_nokia-ftp"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_FtpServer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_FtpServer) IsYANGGoStruct() {}


// SrlNokiaSystem_System_FtpServer_NetworkInstance represents the /srl_nokia-system/system/ftp-server/network-instance YANG schema element.
type SrlNokiaSystem_System_FtpServer_NetworkInstance struct {
	AdminState	E_SrlNokiaFtp_AdminState	`path:"admin-state" module:"srl_nokia-ftp"`
	Name	*string	`path:"name" module:"srl_nokia-ftp"`
	OperState	E_SrlNokiaFtp_OperState	`path:"oper-state" module:"srl_nokia-ftp"`
	SessionLimit	*uint8	`path:"session-limit" module:"srl_nokia-ftp"`
	SourceAddress	*string	`path:"source-address" module:"srl_nokia-ftp"`
	Timeout	*uint16	`path:"timeout" module:"srl_nokia-ftp"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_FtpServer_NetworkInstance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_FtpServer_NetworkInstance) IsYANGGoStruct() {}


// SrlNokiaSystem_System_GnmiServer represents the /srl_nokia-system/system/gnmi-server YANG schema element.
type SrlNokiaSystem_System_GnmiServer struct {
	AdminState	E_SrlNokiaGnmiServer_AdminState	`path:"admin-state" module:"srl_nokia-gnmi-server"`
	NetworkInstance	map[string]*SrlNokiaSystem_System_GnmiServer_NetworkInstance	`path:"network-instance" module:"srl_nokia-gnmi-server"`
	RateLimit	*uint16	`path:"rate-limit" module:"srl_nokia-gnmi-server"`
	SessionLimit	*uint16	`path:"session-limit" module:"srl_nokia-gnmi-server"`
	Subscription	map[uint32]*SrlNokiaSystem_System_GnmiServer_Subscription	`path:"subscription" module:"srl_nokia-gnmi-server"`
	Timeout	*uint16	`path:"timeout" module:"srl_nokia-gnmi-server"`
	TraceOptions	[]E_SrlNokiaSystem_System_GnmiServer_TraceOptions	`path:"trace-options" module:"srl_nokia-gnmi-server"`
	UnixSocket	*SrlNokiaSystem_System_GnmiServer_UnixSocket	`path:"unix-socket" module:"srl_nokia-gnmi-server"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_GnmiServer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_GnmiServer) IsYANGGoStruct() {}


// SrlNokiaSystem_System_GnmiServer_NetworkInstance represents the /srl_nokia-system/system/gnmi-server/network-instance YANG schema element.
type SrlNokiaSystem_System_GnmiServer_NetworkInstance struct {
	AdminState	E_SrlNokiaGnmiServer_AdminState	`path:"admin-state" module:"srl_nokia-gnmi-server"`
	Name	*string	`path:"name" module:"srl_nokia-gnmi-server"`
	OperState	E_SrlNokiaGnmiServer_OperState	`path:"oper-state" module:"srl_nokia-gnmi-server"`
	Port	*uint16	`path:"port" module:"srl_nokia-gnmi-server"`
	SourceAddress	[]string	`path:"source-address" module:"srl_nokia-gnmi-server"`
	TlsProfile	*string	`path:"tls-profile" module:"srl_nokia-gnmi-server"`
	UseAuthentication	*bool	`path:"use-authentication" module:"srl_nokia-gnmi-server"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_GnmiServer_NetworkInstance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_GnmiServer_NetworkInstance) IsYANGGoStruct() {}


// SrlNokiaSystem_System_GnmiServer_Subscription represents the /srl_nokia-system/system/gnmi-server/subscription YANG schema element.
type SrlNokiaSystem_System_GnmiServer_Subscription struct {
	Id	*uint32	`path:"id" module:"srl_nokia-gnmi-server"`
	Mode	E_SrlNokiaSystem_System_GnmiServer_Subscription_Mode	`path:"mode" module:"srl_nokia-gnmi-server"`
	Paths	[]string	`path:"paths" module:"srl_nokia-gnmi-server"`
	RemoteHost	*string	`path:"remote-host" module:"srl_nokia-gnmi-server"`
	RemotePort	*uint16	`path:"remote-port" module:"srl_nokia-gnmi-server"`
	SampleInterval	*uint64	`path:"sample-interval" module:"srl_nokia-gnmi-server"`
	StartTime	*string	`path:"start-time" module:"srl_nokia-gnmi-server"`
	User	*string	`path:"user" module:"srl_nokia-gnmi-server"`
	UserAgent	*string	`path:"user-agent" module:"srl_nokia-gnmi-server"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_GnmiServer_Subscription implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_GnmiServer_Subscription) IsYANGGoStruct() {}


// SrlNokiaSystem_System_GnmiServer_UnixSocket represents the /srl_nokia-system/system/gnmi-server/unix-socket YANG schema element.
type SrlNokiaSystem_System_GnmiServer_UnixSocket struct {
	AdminState	E_SrlNokiaGnmiServer_AdminState	`path:"admin-state" module:"srl_nokia-gnmi-server"`
	OperState	E_SrlNokiaGnmiServer_OperState	`path:"oper-state" module:"srl_nokia-gnmi-server"`
	SocketPath	*string	`path:"socket-path" module:"srl_nokia-gnmi-server"`
	TlsProfile	*string	`path:"tls-profile" module:"srl_nokia-gnmi-server"`
	UseAuthentication	*bool	`path:"use-authentication" module:"srl_nokia-gnmi-server"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_GnmiServer_UnixSocket implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_GnmiServer_UnixSocket) IsYANGGoStruct() {}


// SrlNokiaSystem_System_Information represents the /srl_nokia-system/system/information YANG schema element.
type SrlNokiaSystem_System_Information struct {
	Contact	*string	`path:"contact" module:"srl_nokia-system-info"`
	CurrentDatetime	*string	`path:"current-datetime" module:"srl_nokia-system-info"`
	Description	*string	`path:"description" module:"srl_nokia-system-info"`
	Location	*string	`path:"location" module:"srl_nokia-system-info"`
	Uptime	*string	`path:"uptime" module:"srl_nokia-system-info"`
	Version	*string	`path:"version" module:"srl_nokia-system-info"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Information implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Information) IsYANGGoStruct() {}


// SrlNokiaSystem_System_IpLoadBalancing represents the /srl_nokia-system/system/ip-load-balancing YANG schema element.
type SrlNokiaSystem_System_IpLoadBalancing struct {
	HashKeys	*SrlNokiaSystem_System_IpLoadBalancing_HashKeys	`path:"hash-keys" module:"srl_nokia-load-balancing"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_IpLoadBalancing implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_IpLoadBalancing) IsYANGGoStruct() {}


// SrlNokiaSystem_System_IpLoadBalancing_HashKeys represents the /srl_nokia-system/system/ip-load-balancing/hash-keys YANG schema element.
type SrlNokiaSystem_System_IpLoadBalancing_HashKeys struct {
	HashSeed	*uint16	`path:"hash-seed" module:"srl_nokia-load-balancing"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_IpLoadBalancing_HashKeys implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_IpLoadBalancing_HashKeys) IsYANGGoStruct() {}


// SrlNokiaSystem_System_JsonRpcServer represents the /srl_nokia-system/system/json-rpc-server YANG schema element.
type SrlNokiaSystem_System_JsonRpcServer struct {
	AdminState	E_SrlNokiaJsonRpc_AdminState	`path:"admin-state" module:"srl_nokia-json-rpc"`
	NetworkInstance	map[string]*SrlNokiaSystem_System_JsonRpcServer_NetworkInstance	`path:"network-instance" module:"srl_nokia-json-rpc"`
	TraceOptions	[]E_SrlNokiaSystem_System_JsonRpcServer_TraceOptions	`path:"trace-options" module:"srl_nokia-json-rpc"`
	UnixSocket	*SrlNokiaSystem_System_JsonRpcServer_UnixSocket	`path:"unix-socket" module:"srl_nokia-json-rpc"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_JsonRpcServer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_JsonRpcServer) IsYANGGoStruct() {}


// SrlNokiaSystem_System_JsonRpcServer_NetworkInstance represents the /srl_nokia-system/system/json-rpc-server/network-instance YANG schema element.
type SrlNokiaSystem_System_JsonRpcServer_NetworkInstance struct {
	Http	*SrlNokiaSystem_System_JsonRpcServer_NetworkInstance_Http	`path:"http" module:"srl_nokia-json-rpc"`
	Https	*SrlNokiaSystem_System_JsonRpcServer_NetworkInstance_Https	`path:"https" module:"srl_nokia-json-rpc"`
	Name	*string	`path:"name" module:"srl_nokia-json-rpc"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_JsonRpcServer_NetworkInstance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_JsonRpcServer_NetworkInstance) IsYANGGoStruct() {}


// SrlNokiaSystem_System_JsonRpcServer_NetworkInstance_Http represents the /srl_nokia-system/system/json-rpc-server/network-instance/http YANG schema element.
type SrlNokiaSystem_System_JsonRpcServer_NetworkInstance_Http struct {
	AdminState	E_SrlNokiaJsonRpc_AdminState	`path:"admin-state" module:"srl_nokia-json-rpc"`
	OperState	E_SrlNokiaJsonRpc_OperState	`path:"oper-state" module:"srl_nokia-json-rpc"`
	Port	*uint16	`path:"port" module:"srl_nokia-json-rpc"`
	SessionLimit	*uint16	`path:"session-limit" module:"srl_nokia-json-rpc"`
	SourceAddress	[]string	`path:"source-address" module:"srl_nokia-json-rpc"`
	UseAuthentication	*bool	`path:"use-authentication" module:"srl_nokia-json-rpc"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_JsonRpcServer_NetworkInstance_Http implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_JsonRpcServer_NetworkInstance_Http) IsYANGGoStruct() {}


// SrlNokiaSystem_System_JsonRpcServer_NetworkInstance_Https represents the /srl_nokia-system/system/json-rpc-server/network-instance/https YANG schema element.
type SrlNokiaSystem_System_JsonRpcServer_NetworkInstance_Https struct {
	AdminState	E_SrlNokiaJsonRpc_AdminState	`path:"admin-state" module:"srl_nokia-json-rpc"`
	OperState	E_SrlNokiaJsonRpc_OperState	`path:"oper-state" module:"srl_nokia-json-rpc"`
	Port	*uint16	`path:"port" module:"srl_nokia-json-rpc"`
	SessionLimit	*uint16	`path:"session-limit" module:"srl_nokia-json-rpc"`
	SourceAddress	[]string	`path:"source-address" module:"srl_nokia-json-rpc"`
	TlsProfile	*string	`path:"tls-profile" module:"srl_nokia-json-rpc"`
	UseAuthentication	*bool	`path:"use-authentication" module:"srl_nokia-json-rpc"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_JsonRpcServer_NetworkInstance_Https implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_JsonRpcServer_NetworkInstance_Https) IsYANGGoStruct() {}


// SrlNokiaSystem_System_JsonRpcServer_UnixSocket represents the /srl_nokia-system/system/json-rpc-server/unix-socket YANG schema element.
type SrlNokiaSystem_System_JsonRpcServer_UnixSocket struct {
	AdminState	E_SrlNokiaJsonRpc_AdminState	`path:"admin-state" module:"srl_nokia-json-rpc"`
	OperState	E_SrlNokiaJsonRpc_OperState	`path:"oper-state" module:"srl_nokia-json-rpc"`
	SocketPath	*string	`path:"socket-path" module:"srl_nokia-json-rpc"`
	TlsProfile	*string	`path:"tls-profile" module:"srl_nokia-json-rpc"`
	UseAuthentication	*bool	`path:"use-authentication" module:"srl_nokia-json-rpc"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_JsonRpcServer_UnixSocket implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_JsonRpcServer_UnixSocket) IsYANGGoStruct() {}


// SrlNokiaSystem_System_Lldp represents the /srl_nokia-system/system/lldp YANG schema element.
type SrlNokiaSystem_System_Lldp struct {
	AdminState	E_SrlNokiaLldp_AdminState	`path:"admin-state" module:"srl_nokia-lldp"`
	BgpAutoDiscovery	*SrlNokiaSystem_System_Lldp_BgpAutoDiscovery	`path:"bgp-auto-discovery" module:"srl_nokia-lldp"`
	ChassisId	*string	`path:"chassis-id" module:"srl_nokia-lldp"`
	ChassisIdType	E_SrlNokiaLldp_ChassisIdType	`path:"chassis-id-type" module:"srl_nokia-lldp"`
	HelloTimer	*uint64	`path:"hello-timer" module:"srl_nokia-lldp"`
	HoldMultiplier	*uint8	`path:"hold-multiplier" module:"srl_nokia-lldp"`
	Interface	map[string]*SrlNokiaSystem_System_Lldp_Interface	`path:"interface" module:"srl_nokia-lldp"`
	ManagementAddress	map[string]*SrlNokiaSystem_System_Lldp_ManagementAddress	`path:"management-address" module:"srl_nokia-lldp"`
	Statistics	*SrlNokiaSystem_System_Lldp_Statistics	`path:"statistics" module:"srl_nokia-lldp"`
	SystemDescription	*string	`path:"system-description" module:"srl_nokia-lldp"`
	SystemName	*string	`path:"system-name" module:"srl_nokia-lldp"`
	TraceOptions	[]E_SrlNokiaSystem_System_Lldp_TraceOptions	`path:"trace-options" module:"srl_nokia-lldp"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Lldp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Lldp) IsYANGGoStruct() {}


// SrlNokiaSystem_System_Lldp_BgpAutoDiscovery represents the /srl_nokia-system/system/lldp/bgp-auto-discovery YANG schema element.
type SrlNokiaSystem_System_Lldp_BgpAutoDiscovery struct {
	AdminState	E_SrlNokiaLldp_AdminState	`path:"admin-state" module:"srl_nokia-lldp"`
	GroupId	*uint32	`path:"group-id" module:"srl_nokia-lldp"`
	NetworkInstance	[]string	`path:"network-instance" module:"srl_nokia-lldp"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Lldp_BgpAutoDiscovery implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Lldp_BgpAutoDiscovery) IsYANGGoStruct() {}


// SrlNokiaSystem_System_Lldp_Interface represents the /srl_nokia-system/system/lldp/interface YANG schema element.
type SrlNokiaSystem_System_Lldp_Interface struct {
	AdminState	E_SrlNokiaLldp_AdminState	`path:"admin-state" module:"srl_nokia-lldp"`
	BgpAutoDiscovery	*SrlNokiaSystem_System_Lldp_Interface_BgpAutoDiscovery	`path:"bgp-auto-discovery" module:"srl_nokia-lldp"`
	Name	*string	`path:"name" module:"srl_nokia-lldp"`
	Neighbor	map[string]*SrlNokiaSystem_System_Lldp_Interface_Neighbor	`path:"neighbor" module:"srl_nokia-lldp"`
	OperState	E_SrlNokiaLldp_OperState	`path:"oper-state" module:"srl_nokia-lldp"`
	Statistics	*SrlNokiaSystem_System_Lldp_Interface_Statistics	`path:"statistics" module:"srl_nokia-lldp"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Lldp_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Lldp_Interface) IsYANGGoStruct() {}


// SrlNokiaSystem_System_Lldp_Interface_BgpAutoDiscovery represents the /srl_nokia-system/system/lldp/interface/bgp-auto-discovery YANG schema element.
type SrlNokiaSystem_System_Lldp_Interface_BgpAutoDiscovery struct {
	AdminState	E_SrlNokiaLldp_AdminState	`path:"admin-state" module:"srl_nokia-lldp"`
	GroupId	*uint32	`path:"group-id" module:"srl_nokia-lldp"`
	PeeringAddress	[]string	`path:"peering-address" module:"srl_nokia-lldp"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Lldp_Interface_BgpAutoDiscovery implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Lldp_Interface_BgpAutoDiscovery) IsYANGGoStruct() {}


// SrlNokiaSystem_System_Lldp_Interface_Neighbor represents the /srl_nokia-system/system/lldp/interface/neighbor YANG schema element.
type SrlNokiaSystem_System_Lldp_Interface_Neighbor struct {
	BgpAutoDiscovery	*SrlNokiaSystem_System_Lldp_Interface_Neighbor_BgpAutoDiscovery	`path:"bgp-auto-discovery" module:"srl_nokia-lldp"`
	Capability	map[string]*SrlNokiaSystem_System_Lldp_Interface_Neighbor_Capability	`path:"capability" module:"srl_nokia-lldp"`
	ChassisId	*string	`path:"chassis-id" module:"srl_nokia-lldp"`
	ChassisIdType	E_SrlNokiaLldp_ChassisIdType	`path:"chassis-id-type" module:"srl_nokia-lldp"`
	CustomTlv	map[SrlNokiaSystem_System_Lldp_Interface_Neighbor_CustomTlv_Key]*SrlNokiaSystem_System_Lldp_Interface_Neighbor_CustomTlv	`path:"custom-tlv" module:"srl_nokia-lldp"`
	FirstMessage	*string	`path:"first-message" module:"srl_nokia-lldp"`
	Id	*string	`path:"id" module:"srl_nokia-lldp"`
	LastUpdate	*string	`path:"last-update" module:"srl_nokia-lldp"`
	ManagementAddress	map[string]*SrlNokiaSystem_System_Lldp_Interface_Neighbor_ManagementAddress	`path:"management-address" module:"srl_nokia-lldp"`
	PortDescription	*string	`path:"port-description" module:"srl_nokia-lldp"`
	PortId	SrlNokiaSystem_System_Lldp_Interface_Neighbor_PortId_Union	`path:"port-id" module:"srl_nokia-lldp"`
	PortIdType	E_SrlNokiaLldp_PortIdType	`path:"port-id-type" module:"srl_nokia-lldp"`
	SystemDescription	*string	`path:"system-description" module:"srl_nokia-lldp"`
	SystemName	*string	`path:"system-name" module:"srl_nokia-lldp"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Lldp_Interface_Neighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Lldp_Interface_Neighbor) IsYANGGoStruct() {}

// SrlNokiaSystem_System_Lldp_Interface_Neighbor_CustomTlv_Key represents the key for list CustomTlv of element /srl_nokia-system/system/lldp/interface/neighbor.
type SrlNokiaSystem_System_Lldp_Interface_Neighbor_CustomTlv_Key struct {
	Type	int32	`path:"type"`
	Oui	string	`path:"oui"`
	OuiSubtype	string	`path:"oui-subtype"`
}


// SrlNokiaSystem_System_Lldp_Interface_Neighbor_BgpAutoDiscovery represents the /srl_nokia-system/system/lldp/interface/neighbor/bgp-auto-discovery YANG schema element.
type SrlNokiaSystem_System_Lldp_Interface_Neighbor_BgpAutoDiscovery struct {
	BgpPeerAddresses	[]string	`path:"bgp-peer-addresses" module:"srl_nokia-lldp"`
	GroupId	*uint32	`path:"group-id" module:"srl_nokia-lldp"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Lldp_Interface_Neighbor_BgpAutoDiscovery implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Lldp_Interface_Neighbor_BgpAutoDiscovery) IsYANGGoStruct() {}


// SrlNokiaSystem_System_Lldp_Interface_Neighbor_Capability represents the /srl_nokia-system/system/lldp/interface/neighbor/capability YANG schema element.
type SrlNokiaSystem_System_Lldp_Interface_Neighbor_Capability struct {
	Enabled	*bool	`path:"enabled" module:"srl_nokia-lldp"`
	Name	*string	`path:"name" module:"srl_nokia-lldp"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Lldp_Interface_Neighbor_Capability implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Lldp_Interface_Neighbor_Capability) IsYANGGoStruct() {}


// SrlNokiaSystem_System_Lldp_Interface_Neighbor_CustomTlv represents the /srl_nokia-system/system/lldp/interface/neighbor/custom-tlv YANG schema element.
type SrlNokiaSystem_System_Lldp_Interface_Neighbor_CustomTlv struct {
	Oui	*string	`path:"oui" module:"srl_nokia-lldp"`
	OuiSubtype	*string	`path:"oui-subtype" module:"srl_nokia-lldp"`
	Type	*int32	`path:"type" module:"srl_nokia-lldp"`
	Value	Binary	`path:"value" module:"srl_nokia-lldp"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Lldp_Interface_Neighbor_CustomTlv implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Lldp_Interface_Neighbor_CustomTlv) IsYANGGoStruct() {}


// SrlNokiaSystem_System_Lldp_Interface_Neighbor_ManagementAddress represents the /srl_nokia-system/system/lldp/interface/neighbor/management-address YANG schema element.
type SrlNokiaSystem_System_Lldp_Interface_Neighbor_ManagementAddress struct {
	Address	*string	`path:"address" module:"srl_nokia-lldp"`
	Type	E_SrlNokiaLldp_ManagementAddressType	`path:"type" module:"srl_nokia-lldp"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Lldp_Interface_Neighbor_ManagementAddress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Lldp_Interface_Neighbor_ManagementAddress) IsYANGGoStruct() {}


// SrlNokiaSystem_System_Lldp_Interface_Statistics represents the /srl_nokia-system/system/lldp/interface/statistics YANG schema element.
type SrlNokiaSystem_System_Lldp_Interface_Statistics struct {
	FrameDiscard	*uint64	`path:"frame-discard" module:"srl_nokia-lldp"`
	FrameErrorIn	*uint64	`path:"frame-error-in" module:"srl_nokia-lldp"`
	FrameErrorOut	*uint64	`path:"frame-error-out" module:"srl_nokia-lldp"`
	FrameIn	*uint64	`path:"frame-in" module:"srl_nokia-lldp"`
	FrameOut	*uint64	`path:"frame-out" module:"srl_nokia-lldp"`
	LastClear	*string	`path:"last-clear" module:"srl_nokia-lldp"`
	TlvDiscard	*uint64	`path:"tlv-discard" module:"srl_nokia-lldp"`
	TlvUnknown	*uint64	`path:"tlv-unknown" module:"srl_nokia-lldp"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Lldp_Interface_Statistics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Lldp_Interface_Statistics) IsYANGGoStruct() {}


// SrlNokiaSystem_System_Lldp_ManagementAddress represents the /srl_nokia-system/system/lldp/management-address YANG schema element.
type SrlNokiaSystem_System_Lldp_ManagementAddress struct {
	Subinterface	*string	`path:"subinterface" module:"srl_nokia-lldp"`
	Type	[]E_SrlNokiaLldp_ManagementAddressType	`path:"type" module:"srl_nokia-lldp"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Lldp_ManagementAddress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Lldp_ManagementAddress) IsYANGGoStruct() {}


// SrlNokiaSystem_System_Lldp_Statistics represents the /srl_nokia-system/system/lldp/statistics YANG schema element.
type SrlNokiaSystem_System_Lldp_Statistics struct {
	EntriesAgedOut	*uint64	`path:"entries-aged-out" module:"srl_nokia-lldp"`
	FrameDiscard	*uint64	`path:"frame-discard" module:"srl_nokia-lldp"`
	FrameErrorIn	*uint64	`path:"frame-error-in" module:"srl_nokia-lldp"`
	FrameIn	*uint64	`path:"frame-in" module:"srl_nokia-lldp"`
	FrameOut	*uint64	`path:"frame-out" module:"srl_nokia-lldp"`
	LastClear	*string	`path:"last-clear" module:"srl_nokia-lldp"`
	TlvAccepted	*uint64	`path:"tlv-accepted" module:"srl_nokia-lldp"`
	TlvDiscard	*uint64	`path:"tlv-discard" module:"srl_nokia-lldp"`
	TlvUnknown	*uint64	`path:"tlv-unknown" module:"srl_nokia-lldp"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Lldp_Statistics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Lldp_Statistics) IsYANGGoStruct() {}


// SrlNokiaSystem_System_Logging represents the /srl_nokia-system/system/logging YANG schema element.
type SrlNokiaSystem_System_Logging struct {
	Buffer	map[string]*SrlNokiaSystem_System_Logging_Buffer	`path:"buffer" module:"srl_nokia-logging"`
	Console	*SrlNokiaSystem_System_Logging_Console	`path:"console" module:"srl_nokia-logging"`
	File	map[string]*SrlNokiaSystem_System_Logging_File	`path:"file" module:"srl_nokia-logging"`
	Filter	map[string]*SrlNokiaSystem_System_Logging_Filter	`path:"filter" module:"srl_nokia-logging"`
	NetworkInstance	*string	`path:"network-instance" module:"srl_nokia-logging"`
	RemoteServer	map[string]*SrlNokiaSystem_System_Logging_RemoteServer	`path:"remote-server" module:"srl_nokia-logging"`
	SubsystemFacility	E_SrlNokiaLogging_FacilityNameType	`path:"subsystem-facility" module:"srl_nokia-logging"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Logging implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Logging) IsYANGGoStruct() {}


// SrlNokiaSystem_System_Logging_Buffer represents the /srl_nokia-system/system/logging/buffer YANG schema element.
type SrlNokiaSystem_System_Logging_Buffer struct {
	BufferName	*string	`path:"buffer-name" module:"srl_nokia-logging"`
	Facility	map[E_SrlNokiaLogging_FacilityNameType]*SrlNokiaSystem_System_Logging_Buffer_Facility	`path:"facility" module:"srl_nokia-logging"`
	Filter	[]string	`path:"filter" module:"srl_nokia-logging"`
	Format	*string	`path:"format" module:"srl_nokia-logging"`
	Persist	*uint32	`path:"persist" module:"srl_nokia-logging"`
	Rotate	*uint16	`path:"rotate" module:"srl_nokia-logging"`
	Rotations	*uint64	`path:"rotations" module:"srl_nokia-logging"`
	Size	*string	`path:"size" module:"srl_nokia-logging"`
	Subsystem	map[E_SrlNokiaLogging_SubsystemNameType]*SrlNokiaSystem_System_Logging_Buffer_Subsystem	`path:"subsystem" module:"srl_nokia-logging"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Logging_Buffer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Logging_Buffer) IsYANGGoStruct() {}


// SrlNokiaSystem_System_Logging_Buffer_Facility represents the /srl_nokia-system/system/logging/buffer/facility YANG schema element.
type SrlNokiaSystem_System_Logging_Buffer_Facility struct {
	FacilityName	E_SrlNokiaLogging_FacilityNameType	`path:"facility-name" module:"srl_nokia-logging"`
	Priority	*SrlNokiaSystem_System_Logging_Buffer_Facility_Priority	`path:"priority" module:"srl_nokia-logging"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Logging_Buffer_Facility implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Logging_Buffer_Facility) IsYANGGoStruct() {}


// SrlNokiaSystem_System_Logging_Buffer_Facility_Priority represents the /srl_nokia-system/system/logging/buffer/facility/priority YANG schema element.
type SrlNokiaSystem_System_Logging_Buffer_Facility_Priority struct {
	MatchAbove	E_SrlNokiaLogging_PriorityType	`path:"match-above" module:"srl_nokia-logging"`
	MatchExact	[]E_SrlNokiaLogging_PriorityType	`path:"match-exact" module:"srl_nokia-logging"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Logging_Buffer_Facility_Priority implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Logging_Buffer_Facility_Priority) IsYANGGoStruct() {}


// SrlNokiaSystem_System_Logging_Buffer_Subsystem represents the /srl_nokia-system/system/logging/buffer/subsystem YANG schema element.
type SrlNokiaSystem_System_Logging_Buffer_Subsystem struct {
	Priority	*SrlNokiaSystem_System_Logging_Buffer_Subsystem_Priority	`path:"priority" module:"srl_nokia-logging"`
	SubsystemName	E_SrlNokiaLogging_SubsystemNameType	`path:"subsystem-name" module:"srl_nokia-logging"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Logging_Buffer_Subsystem implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Logging_Buffer_Subsystem) IsYANGGoStruct() {}


// SrlNokiaSystem_System_Logging_Buffer_Subsystem_Priority represents the /srl_nokia-system/system/logging/buffer/subsystem/priority YANG schema element.
type SrlNokiaSystem_System_Logging_Buffer_Subsystem_Priority struct {
	MatchAbove	E_SrlNokiaLogging_PriorityType	`path:"match-above" module:"srl_nokia-logging"`
	MatchExact	[]E_SrlNokiaLogging_PriorityType	`path:"match-exact" module:"srl_nokia-logging"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Logging_Buffer_Subsystem_Priority implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Logging_Buffer_Subsystem_Priority) IsYANGGoStruct() {}


// SrlNokiaSystem_System_Logging_Console represents the /srl_nokia-system/system/logging/console YANG schema element.
type SrlNokiaSystem_System_Logging_Console struct {
	Facility	map[E_SrlNokiaLogging_FacilityNameType]*SrlNokiaSystem_System_Logging_Console_Facility	`path:"facility" module:"srl_nokia-logging"`
	Filter	[]string	`path:"filter" module:"srl_nokia-logging"`
	Format	*string	`path:"format" module:"srl_nokia-logging"`
	Subsystem	map[E_SrlNokiaLogging_SubsystemNameType]*SrlNokiaSystem_System_Logging_Console_Subsystem	`path:"subsystem" module:"srl_nokia-logging"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Logging_Console implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Logging_Console) IsYANGGoStruct() {}


// SrlNokiaSystem_System_Logging_Console_Facility represents the /srl_nokia-system/system/logging/console/facility YANG schema element.
type SrlNokiaSystem_System_Logging_Console_Facility struct {
	FacilityName	E_SrlNokiaLogging_FacilityNameType	`path:"facility-name" module:"srl_nokia-logging"`
	Priority	*SrlNokiaSystem_System_Logging_Console_Facility_Priority	`path:"priority" module:"srl_nokia-logging"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Logging_Console_Facility implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Logging_Console_Facility) IsYANGGoStruct() {}


// SrlNokiaSystem_System_Logging_Console_Facility_Priority represents the /srl_nokia-system/system/logging/console/facility/priority YANG schema element.
type SrlNokiaSystem_System_Logging_Console_Facility_Priority struct {
	MatchAbove	E_SrlNokiaLogging_PriorityType	`path:"match-above" module:"srl_nokia-logging"`
	MatchExact	[]E_SrlNokiaLogging_PriorityType	`path:"match-exact" module:"srl_nokia-logging"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Logging_Console_Facility_Priority implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Logging_Console_Facility_Priority) IsYANGGoStruct() {}


// SrlNokiaSystem_System_Logging_Console_Subsystem represents the /srl_nokia-system/system/logging/console/subsystem YANG schema element.
type SrlNokiaSystem_System_Logging_Console_Subsystem struct {
	Priority	*SrlNokiaSystem_System_Logging_Console_Subsystem_Priority	`path:"priority" module:"srl_nokia-logging"`
	SubsystemName	E_SrlNokiaLogging_SubsystemNameType	`path:"subsystem-name" module:"srl_nokia-logging"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Logging_Console_Subsystem implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Logging_Console_Subsystem) IsYANGGoStruct() {}


// SrlNokiaSystem_System_Logging_Console_Subsystem_Priority represents the /srl_nokia-system/system/logging/console/subsystem/priority YANG schema element.
type SrlNokiaSystem_System_Logging_Console_Subsystem_Priority struct {
	MatchAbove	E_SrlNokiaLogging_PriorityType	`path:"match-above" module:"srl_nokia-logging"`
	MatchExact	[]E_SrlNokiaLogging_PriorityType	`path:"match-exact" module:"srl_nokia-logging"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Logging_Console_Subsystem_Priority implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Logging_Console_Subsystem_Priority) IsYANGGoStruct() {}


// SrlNokiaSystem_System_Logging_File represents the /srl_nokia-system/system/logging/file YANG schema element.
type SrlNokiaSystem_System_Logging_File struct {
	Directory	*string	`path:"directory" module:"srl_nokia-logging"`
	Facility	map[E_SrlNokiaLogging_FacilityNameType]*SrlNokiaSystem_System_Logging_File_Facility	`path:"facility" module:"srl_nokia-logging"`
	FileName	*string	`path:"file-name" module:"srl_nokia-logging"`
	Filter	[]string	`path:"filter" module:"srl_nokia-logging"`
	Format	*string	`path:"format" module:"srl_nokia-logging"`
	Rotate	*uint16	`path:"rotate" module:"srl_nokia-logging"`
	Rotations	*uint64	`path:"rotations" module:"srl_nokia-logging"`
	Size	*string	`path:"size" module:"srl_nokia-logging"`
	Subsystem	map[E_SrlNokiaLogging_SubsystemNameType]*SrlNokiaSystem_System_Logging_File_Subsystem	`path:"subsystem" module:"srl_nokia-logging"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Logging_File implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Logging_File) IsYANGGoStruct() {}


// SrlNokiaSystem_System_Logging_File_Facility represents the /srl_nokia-system/system/logging/file/facility YANG schema element.
type SrlNokiaSystem_System_Logging_File_Facility struct {
	FacilityName	E_SrlNokiaLogging_FacilityNameType	`path:"facility-name" module:"srl_nokia-logging"`
	Priority	*SrlNokiaSystem_System_Logging_File_Facility_Priority	`path:"priority" module:"srl_nokia-logging"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Logging_File_Facility implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Logging_File_Facility) IsYANGGoStruct() {}


// SrlNokiaSystem_System_Logging_File_Facility_Priority represents the /srl_nokia-system/system/logging/file/facility/priority YANG schema element.
type SrlNokiaSystem_System_Logging_File_Facility_Priority struct {
	MatchAbove	E_SrlNokiaLogging_PriorityType	`path:"match-above" module:"srl_nokia-logging"`
	MatchExact	[]E_SrlNokiaLogging_PriorityType	`path:"match-exact" module:"srl_nokia-logging"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Logging_File_Facility_Priority implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Logging_File_Facility_Priority) IsYANGGoStruct() {}


// SrlNokiaSystem_System_Logging_File_Subsystem represents the /srl_nokia-system/system/logging/file/subsystem YANG schema element.
type SrlNokiaSystem_System_Logging_File_Subsystem struct {
	Priority	*SrlNokiaSystem_System_Logging_File_Subsystem_Priority	`path:"priority" module:"srl_nokia-logging"`
	SubsystemName	E_SrlNokiaLogging_SubsystemNameType	`path:"subsystem-name" module:"srl_nokia-logging"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Logging_File_Subsystem implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Logging_File_Subsystem) IsYANGGoStruct() {}


// SrlNokiaSystem_System_Logging_File_Subsystem_Priority represents the /srl_nokia-system/system/logging/file/subsystem/priority YANG schema element.
type SrlNokiaSystem_System_Logging_File_Subsystem_Priority struct {
	MatchAbove	E_SrlNokiaLogging_PriorityType	`path:"match-above" module:"srl_nokia-logging"`
	MatchExact	[]E_SrlNokiaLogging_PriorityType	`path:"match-exact" module:"srl_nokia-logging"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Logging_File_Subsystem_Priority implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Logging_File_Subsystem_Priority) IsYANGGoStruct() {}


// SrlNokiaSystem_System_Logging_Filter represents the /srl_nokia-system/system/logging/filter YANG schema element.
type SrlNokiaSystem_System_Logging_Filter struct {
	Contains	*string	`path:"contains" module:"srl_nokia-logging"`
	Facility	map[E_SrlNokiaLogging_FacilityNameType]*SrlNokiaSystem_System_Logging_Filter_Facility	`path:"facility" module:"srl_nokia-logging"`
	FilterName	*string	`path:"filter-name" module:"srl_nokia-logging"`
	Prefix	*string	`path:"prefix" module:"srl_nokia-logging"`
	Regex	*string	`path:"regex" module:"srl_nokia-logging"`
	Tag	*string	`path:"tag" module:"srl_nokia-logging"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Logging_Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Logging_Filter) IsYANGGoStruct() {}


// SrlNokiaSystem_System_Logging_Filter_Facility represents the /srl_nokia-system/system/logging/filter/facility YANG schema element.
type SrlNokiaSystem_System_Logging_Filter_Facility struct {
	FacilityName	E_SrlNokiaLogging_FacilityNameType	`path:"facility-name" module:"srl_nokia-logging"`
	Priority	*SrlNokiaSystem_System_Logging_Filter_Facility_Priority	`path:"priority" module:"srl_nokia-logging"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Logging_Filter_Facility implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Logging_Filter_Facility) IsYANGGoStruct() {}


// SrlNokiaSystem_System_Logging_Filter_Facility_Priority represents the /srl_nokia-system/system/logging/filter/facility/priority YANG schema element.
type SrlNokiaSystem_System_Logging_Filter_Facility_Priority struct {
	MatchAbove	E_SrlNokiaLogging_PriorityType	`path:"match-above" module:"srl_nokia-logging"`
	MatchExact	[]E_SrlNokiaLogging_PriorityType	`path:"match-exact" module:"srl_nokia-logging"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Logging_Filter_Facility_Priority implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Logging_Filter_Facility_Priority) IsYANGGoStruct() {}


// SrlNokiaSystem_System_Logging_RemoteServer represents the /srl_nokia-system/system/logging/remote-server YANG schema element.
type SrlNokiaSystem_System_Logging_RemoteServer struct {
	Facility	map[E_SrlNokiaLogging_FacilityNameType]*SrlNokiaSystem_System_Logging_RemoteServer_Facility	`path:"facility" module:"srl_nokia-logging"`
	Filter	[]string	`path:"filter" module:"srl_nokia-logging"`
	Host	*string	`path:"host" module:"srl_nokia-logging"`
	RemotePort	*uint32	`path:"remote-port" module:"srl_nokia-logging"`
	Subsystem	map[E_SrlNokiaLogging_SubsystemNameType]*SrlNokiaSystem_System_Logging_RemoteServer_Subsystem	`path:"subsystem" module:"srl_nokia-logging"`
	Transport	E_SrlNokiaLogging_TransportType	`path:"transport" module:"srl_nokia-logging"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Logging_RemoteServer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Logging_RemoteServer) IsYANGGoStruct() {}


// SrlNokiaSystem_System_Logging_RemoteServer_Facility represents the /srl_nokia-system/system/logging/remote-server/facility YANG schema element.
type SrlNokiaSystem_System_Logging_RemoteServer_Facility struct {
	FacilityName	E_SrlNokiaLogging_FacilityNameType	`path:"facility-name" module:"srl_nokia-logging"`
	Priority	*SrlNokiaSystem_System_Logging_RemoteServer_Facility_Priority	`path:"priority" module:"srl_nokia-logging"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Logging_RemoteServer_Facility implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Logging_RemoteServer_Facility) IsYANGGoStruct() {}


// SrlNokiaSystem_System_Logging_RemoteServer_Facility_Priority represents the /srl_nokia-system/system/logging/remote-server/facility/priority YANG schema element.
type SrlNokiaSystem_System_Logging_RemoteServer_Facility_Priority struct {
	MatchAbove	E_SrlNokiaLogging_PriorityType	`path:"match-above" module:"srl_nokia-logging"`
	MatchExact	[]E_SrlNokiaLogging_PriorityType	`path:"match-exact" module:"srl_nokia-logging"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Logging_RemoteServer_Facility_Priority implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Logging_RemoteServer_Facility_Priority) IsYANGGoStruct() {}


// SrlNokiaSystem_System_Logging_RemoteServer_Subsystem represents the /srl_nokia-system/system/logging/remote-server/subsystem YANG schema element.
type SrlNokiaSystem_System_Logging_RemoteServer_Subsystem struct {
	Priority	*SrlNokiaSystem_System_Logging_RemoteServer_Subsystem_Priority	`path:"priority" module:"srl_nokia-logging"`
	SubsystemName	E_SrlNokiaLogging_SubsystemNameType	`path:"subsystem-name" module:"srl_nokia-logging"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Logging_RemoteServer_Subsystem implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Logging_RemoteServer_Subsystem) IsYANGGoStruct() {}


// SrlNokiaSystem_System_Logging_RemoteServer_Subsystem_Priority represents the /srl_nokia-system/system/logging/remote-server/subsystem/priority YANG schema element.
type SrlNokiaSystem_System_Logging_RemoteServer_Subsystem_Priority struct {
	MatchAbove	E_SrlNokiaLogging_PriorityType	`path:"match-above" module:"srl_nokia-logging"`
	MatchExact	[]E_SrlNokiaLogging_PriorityType	`path:"match-exact" module:"srl_nokia-logging"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Logging_RemoteServer_Subsystem_Priority implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Logging_RemoteServer_Subsystem_Priority) IsYANGGoStruct() {}


// SrlNokiaSystem_System_Maintenance represents the /srl_nokia-system/system/maintenance YANG schema element.
type SrlNokiaSystem_System_Maintenance struct {
	Group	map[string]*SrlNokiaSystem_System_Maintenance_Group	`path:"group" module:"srl_nokia-maintenance-mode"`
	Profile	map[string]*SrlNokiaSystem_System_Maintenance_Profile	`path:"profile" module:"srl_nokia-maintenance-mode"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Maintenance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Maintenance) IsYANGGoStruct() {}


// SrlNokiaSystem_System_Maintenance_Group represents the /srl_nokia-system/system/maintenance/group YANG schema element.
type SrlNokiaSystem_System_Maintenance_Group struct {
	MaintenanceMode	*SrlNokiaSystem_System_Maintenance_Group_MaintenanceMode	`path:"maintenance-mode" module:"srl_nokia-maintenance-mode"`
	MaintenanceProfile	*string	`path:"maintenance-profile" module:"srl_nokia-maintenance-mode"`
	Members	*SrlNokiaSystem_System_Maintenance_Group_Members	`path:"members" module:"srl_nokia-maintenance-mode"`
	Name	*string	`path:"name" module:"srl_nokia-maintenance-mode"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Maintenance_Group implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Maintenance_Group) IsYANGGoStruct() {}


// SrlNokiaSystem_System_Maintenance_Group_MaintenanceMode represents the /srl_nokia-system/system/maintenance/group/maintenance-mode YANG schema element.
type SrlNokiaSystem_System_Maintenance_Group_MaintenanceMode struct {
	AdminState	E_SrlNokiaMaintenanceMode_AdminState	`path:"admin-state" module:"srl_nokia-maintenance-mode"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Maintenance_Group_MaintenanceMode implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Maintenance_Group_MaintenanceMode) IsYANGGoStruct() {}


// SrlNokiaSystem_System_Maintenance_Group_Members represents the /srl_nokia-system/system/maintenance/group/members YANG schema element.
type SrlNokiaSystem_System_Maintenance_Group_Members struct {
	Bgp	*SrlNokiaSystem_System_Maintenance_Group_Members_Bgp	`path:"bgp" module:"srl_nokia-maintenance-mode"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Maintenance_Group_Members implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Maintenance_Group_Members) IsYANGGoStruct() {}


// SrlNokiaSystem_System_Maintenance_Group_Members_Bgp represents the /srl_nokia-system/system/maintenance/group/members/bgp YANG schema element.
type SrlNokiaSystem_System_Maintenance_Group_Members_Bgp struct {
	NetworkInstance	map[string]*SrlNokiaSystem_System_Maintenance_Group_Members_Bgp_NetworkInstance	`path:"network-instance" module:"srl_nokia-maintenance-mode"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Maintenance_Group_Members_Bgp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Maintenance_Group_Members_Bgp) IsYANGGoStruct() {}


// SrlNokiaSystem_System_Maintenance_Group_Members_Bgp_NetworkInstance represents the /srl_nokia-system/system/maintenance/group/members/bgp/network-instance YANG schema element.
type SrlNokiaSystem_System_Maintenance_Group_Members_Bgp_NetworkInstance struct {
	Name	*string	`path:"name" module:"srl_nokia-maintenance-mode"`
	Neighbor	[]string	`path:"neighbor" module:"srl_nokia-maintenance-mode"`
	PeerGroup	[]string	`path:"peer-group" module:"srl_nokia-maintenance-mode"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Maintenance_Group_Members_Bgp_NetworkInstance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Maintenance_Group_Members_Bgp_NetworkInstance) IsYANGGoStruct() {}


// SrlNokiaSystem_System_Maintenance_Profile represents the /srl_nokia-system/system/maintenance/profile YANG schema element.
type SrlNokiaSystem_System_Maintenance_Profile struct {
	Bgp	*SrlNokiaSystem_System_Maintenance_Profile_Bgp	`path:"bgp" module:"srl_nokia-maintenance-mode"`
	Name	*string	`path:"name" module:"srl_nokia-maintenance-mode"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Maintenance_Profile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Maintenance_Profile) IsYANGGoStruct() {}


// SrlNokiaSystem_System_Maintenance_Profile_Bgp represents the /srl_nokia-system/system/maintenance/profile/bgp YANG schema element.
type SrlNokiaSystem_System_Maintenance_Profile_Bgp struct {
	ExportPolicy	*string	`path:"export-policy" module:"srl_nokia-maintenance-mode"`
	ImportPolicy	*string	`path:"import-policy" module:"srl_nokia-maintenance-mode"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Maintenance_Profile_Bgp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Maintenance_Profile_Bgp) IsYANGGoStruct() {}


// SrlNokiaSystem_System_Mtu represents the /srl_nokia-system/system/mtu YANG schema element.
type SrlNokiaSystem_System_Mtu struct {
	DefaultIpMtu	*uint16	`path:"default-ip-mtu" module:"srl_nokia-mtu"`
	DefaultPortMtu	*uint16	`path:"default-port-mtu" module:"srl_nokia-mtu"`
	MinPathMtu	*uint16	`path:"min-path-mtu" module:"srl_nokia-mtu"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Mtu implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Mtu) IsYANGGoStruct() {}


// SrlNokiaSystem_System_Name represents the /srl_nokia-system/system/name YANG schema element.
type SrlNokiaSystem_System_Name struct {
	DomainName	*string	`path:"domain-name" module:"srl_nokia-system-name"`
	HostName	*string	`path:"host-name" module:"srl_nokia-system-name"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Name implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Name) IsYANGGoStruct() {}


// SrlNokiaSystem_System_Ntp represents the /srl_nokia-system/system/ntp YANG schema element.
type SrlNokiaSystem_System_Ntp struct {
	AdminState	E_SrlNokiaNtp_AdminState	`path:"admin-state" module:"srl_nokia-ntp"`
	NetworkInstance	*string	`path:"network-instance" module:"srl_nokia-ntp"`
	OperState	E_SrlNokiaNtp_OperState	`path:"oper-state" module:"srl_nokia-ntp"`
	Server	map[string]*SrlNokiaSystem_System_Ntp_Server	`path:"server" module:"srl_nokia-ntp"`
	Synchronized	*string	`path:"synchronized" module:"srl_nokia-ntp"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Ntp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Ntp) IsYANGGoStruct() {}


// SrlNokiaSystem_System_Ntp_Server represents the /srl_nokia-system/system/ntp/server YANG schema element.
type SrlNokiaSystem_System_Ntp_Server struct {
	Address	*string	`path:"address" module:"srl_nokia-ntp"`
	Iburst	*bool	`path:"iburst" module:"srl_nokia-ntp"`
	Jitter	*string	`path:"jitter" module:"srl_nokia-ntp"`
	Offset	*string	`path:"offset" module:"srl_nokia-ntp"`
	PollInterval	*uint16	`path:"poll-interval" module:"srl_nokia-ntp"`
	Prefer	*bool	`path:"prefer" module:"srl_nokia-ntp"`
	Stratum	*uint8	`path:"stratum" module:"srl_nokia-ntp"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Ntp_Server implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Ntp_Server) IsYANGGoStruct() {}


// SrlNokiaSystem_System_Sflow represents the /srl_nokia-system/system/sflow YANG schema element.
type SrlNokiaSystem_System_Sflow struct {
	AdminState	E_SrlNokiaSflow_AdminState	`path:"admin-state" module:"srl_nokia-sflow"`
	Collector	map[uint16]*SrlNokiaSystem_System_Sflow_Collector	`path:"collector" module:"srl_nokia-sflow"`
	SampleRate	*uint32	`path:"sample-rate" module:"srl_nokia-sflow"`
	SampleSize	*uint16	`path:"sample-size" module:"srl_nokia-sflow"`
	Statistics	*SrlNokiaSystem_System_Sflow_Statistics	`path:"statistics" module:"srl_nokia-sflow"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Sflow implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Sflow) IsYANGGoStruct() {}


// SrlNokiaSystem_System_Sflow_Collector represents the /srl_nokia-system/system/sflow/collector YANG schema element.
type SrlNokiaSystem_System_Sflow_Collector struct {
	CollectorAddress	*string	`path:"collector-address" module:"srl_nokia-sflow"`
	CollectorId	*uint16	`path:"collector-id" module:"srl_nokia-sflow"`
	NetworkInstance	*string	`path:"network-instance" module:"srl_nokia-sflow"`
	NextHop	*string	`path:"next-hop" module:"srl_nokia-sflow"`
	Port	*uint16	`path:"port" module:"srl_nokia-sflow"`
	SourceAddress	*string	`path:"source-address" module:"srl_nokia-sflow"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Sflow_Collector implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Sflow_Collector) IsYANGGoStruct() {}


// SrlNokiaSystem_System_Sflow_Statistics represents the /srl_nokia-system/system/sflow/statistics YANG schema element.
type SrlNokiaSystem_System_Sflow_Statistics struct {
	TotalOfferedPackets	*uint64	`path:"total-offered-packets" module:"srl_nokia-sflow"`
	TotalSamplesTaken	*uint64	`path:"total-samples-taken" module:"srl_nokia-sflow"`
	TotalSentPackets	*uint64	`path:"total-sent-packets" module:"srl_nokia-sflow"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Sflow_Statistics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Sflow_Statistics) IsYANGGoStruct() {}


// SrlNokiaSystem_System_Snmp represents the /srl_nokia-system/system/snmp YANG schema element.
type SrlNokiaSystem_System_Snmp struct {
	Community	*string	`path:"community" module:"srl_nokia-snmp"`
	NetworkInstance	map[string]*SrlNokiaSystem_System_Snmp_NetworkInstance	`path:"network-instance" module:"srl_nokia-snmp"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Snmp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Snmp) IsYANGGoStruct() {}


// SrlNokiaSystem_System_Snmp_NetworkInstance represents the /srl_nokia-system/system/snmp/network-instance YANG schema element.
type SrlNokiaSystem_System_Snmp_NetworkInstance struct {
	AdminState	E_SrlNokiaSnmp_AdminState	`path:"admin-state" module:"srl_nokia-snmp"`
	Name	*string	`path:"name" module:"srl_nokia-snmp"`
	OperState	E_SrlNokiaSnmp_OperState	`path:"oper-state" module:"srl_nokia-snmp"`
	SourceAddress	[]string	`path:"source-address" module:"srl_nokia-snmp"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Snmp_NetworkInstance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Snmp_NetworkInstance) IsYANGGoStruct() {}


// SrlNokiaSystem_System_SshServer represents the /srl_nokia-system/system/ssh-server YANG schema element.
type SrlNokiaSystem_System_SshServer struct {
	NetworkInstance	map[string]*SrlNokiaSystem_System_SshServer_NetworkInstance	`path:"network-instance" module:"srl_nokia-ssh"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_SshServer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_SshServer) IsYANGGoStruct() {}


// SrlNokiaSystem_System_SshServer_NetworkInstance represents the /srl_nokia-system/system/ssh-server/network-instance YANG schema element.
type SrlNokiaSystem_System_SshServer_NetworkInstance struct {
	AdminState	E_SrlNokiaSsh_AdminState	`path:"admin-state" module:"srl_nokia-ssh"`
	Name	*string	`path:"name" module:"srl_nokia-ssh"`
	OperState	E_SrlNokiaSsh_OperState	`path:"oper-state" module:"srl_nokia-ssh"`
	ProtocolVersion	*uint8	`path:"protocol-version" module:"srl_nokia-ssh"`
	RateLimit	*uint8	`path:"rate-limit" module:"srl_nokia-ssh"`
	SourceAddress	[]string	`path:"source-address" module:"srl_nokia-ssh"`
	Timeout	*uint16	`path:"timeout" module:"srl_nokia-ssh"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_SshServer_NetworkInstance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_SshServer_NetworkInstance) IsYANGGoStruct() {}


// SrlNokiaSystem_System_Tls represents the /srl_nokia-system/system/tls YANG schema element.
type SrlNokiaSystem_System_Tls struct {
	ServerProfile	map[string]*SrlNokiaSystem_System_Tls_ServerProfile	`path:"server-profile" module:"srl_nokia-tls"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Tls implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Tls) IsYANGGoStruct() {}


// SrlNokiaSystem_System_Tls_ServerProfile represents the /srl_nokia-system/system/tls/server-profile YANG schema element.
type SrlNokiaSystem_System_Tls_ServerProfile struct {
	AuthenticateClient	*bool	`path:"authenticate-client" module:"srl_nokia-tls"`
	Certificate	*string	`path:"certificate" module:"srl_nokia-tls"`
	CipherList	[]E_SrlNokiaTls_CipherType	`path:"cipher-list" module:"srl_nokia-tls"`
	Key	*string	`path:"key" module:"srl_nokia-tls"`
	Name	*string	`path:"name" module:"srl_nokia-tls"`
	TrustAnchor	*string	`path:"trust-anchor" module:"srl_nokia-tls"`
}

// IsYANGGoStruct ensures that SrlNokiaSystem_System_Tls_ServerProfile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*SrlNokiaSystem_System_Tls_ServerProfile) IsYANGGoStruct() {}


