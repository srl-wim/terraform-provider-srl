/*
Package srl_yang is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /Users/henderiw/CodeProjects/go/pkg/mod/github.com/openconfig/ygot@v0.8.3/genutil/names.go
using the following YANG input files:
	- ../yang/srl/srl_nokia-aaa-tacacs.yang
	- ../yang/srl/srl_nokia-aaa-types.yang
	- ../yang/srl/srl_nokia-aaa.yang
	- ../yang/srl/srl_nokia-acl.yang
	- ../yang/srl/srl_nokia-aft.yang
	- ../yang/srl/srl_nokia-aggregate-routes.yang
	- ../yang/srl/srl_nokia-app-mgmt.yang
	- ../yang/srl/srl_nokia-bfd.yang
	- ../yang/srl/srl_nokia-bgp.yang
	- ../yang/srl/srl_nokia-boot.yang
	- ../yang/srl/srl_nokia-common.yang
	- ../yang/srl/srl_nokia-configuration.yang
	- ../yang/srl/srl_nokia-dns.yang
	- ../yang/srl/srl_nokia-extensions.yang
	- ../yang/srl/srl_nokia-ftp.yang
	- ../yang/srl/srl_nokia-gnmi-server.yang
	- ../yang/srl/srl_nokia-icmp.yang
	- ../yang/srl/srl_nokia-if-ip.yang
	- ../yang/srl/srl_nokia-interfaces-ip-dhcp.yang
	- ../yang/srl/srl_nokia-interfaces-nbr.yang
	- ../yang/srl/srl_nokia-interfaces-vlans.yang
	- ../yang/srl/srl_nokia-interfaces.yang
	- ../yang/srl/srl_nokia-ip-route-tables.yang
	- ../yang/srl/srl_nokia-json-rpc.yang
	- ../yang/srl/srl_nokia-linux.yang
	- ../yang/srl/srl_nokia-lldp-types.yang
	- ../yang/srl/srl_nokia-lldp.yang
	- ../yang/srl/srl_nokia-load-balancing.yang
	- ../yang/srl/srl_nokia-logging.yang
	- ../yang/srl/srl_nokia-maintenance-mode.yang
	- ../yang/srl/srl_nokia-mpls-route-tables.yang
	- ../yang/srl/srl_nokia-mpls.yang
	- ../yang/srl/srl_nokia-mtu.yang
	- ../yang/srl/srl_nokia-network-instance-mtu.yang
	- ../yang/srl/srl_nokia-network-instance.yang
	- ../yang/srl/srl_nokia-next-hop-groups.yang
	- ../yang/srl/srl_nokia-ntp.yang
	- ../yang/srl/srl_nokia-packet-match-types.yang
	- ../yang/srl/srl_nokia-platform-acl.yang
	- ../yang/srl/srl_nokia-platform-chassis.yang
	- ../yang/srl/srl_nokia-platform-control.yang
	- ../yang/srl/srl_nokia-platform-cpu.yang
	- ../yang/srl/srl_nokia-platform-disk.yang
	- ../yang/srl/srl_nokia-platform-fabric.yang
	- ../yang/srl/srl_nokia-platform-fan.yang
	- ../yang/srl/srl_nokia-platform-ip-mpls-fwd-resources.yang
	- ../yang/srl/srl_nokia-platform-lc.yang
	- ../yang/srl/srl_nokia-platform-memory.yang
	- ../yang/srl/srl_nokia-platform-mtu.yang
	- ../yang/srl/srl_nokia-platform-psu.yang
	- ../yang/srl/srl_nokia-platform-qos.yang
	- ../yang/srl/srl_nokia-platform-redundancy.yang
	- ../yang/srl/srl_nokia-platform-resource-monitoring.yang
	- ../yang/srl/srl_nokia-platform.yang
	- ../yang/srl/srl_nokia-policy-types.yang
	- ../yang/srl/srl_nokia-qos.yang
	- ../yang/srl/srl_nokia-rib-bgp.yang
	- ../yang/srl/srl_nokia-routing-policy.yang
	- ../yang/srl/srl_nokia-sflow.yang
	- ../yang/srl/srl_nokia-snmp-trace.yang
	- ../yang/srl/srl_nokia-snmp.yang
	- ../yang/srl/srl_nokia-ssh.yang
	- ../yang/srl/srl_nokia-static-routes.yang
	- ../yang/srl/srl_nokia-system-banner.yang
	- ../yang/srl/srl_nokia-system-info.yang
	- ../yang/srl/srl_nokia-system-name.yang
	- ../yang/srl/srl_nokia-system.yang
	- ../yang/srl/srl_nokia-tcp-udp.yang
	- ../yang/srl/srl_nokia-tls.yang
Imported modules were sourced from:
	- ../yang/ietf/...
*/
package srl_yang

import (
	"fmt"
)

// SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Protocol_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/capture-filter/ipv4-filter/entry/match/protocol within the YANG schema.
type SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Protocol_Union interface {
	Is_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Protocol_Union()
}

// SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Protocol_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Protocol is used when /srl_nokia-acl/acl/capture-filter/ipv4-filter/entry/match/protocol
// is to be set to a E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Protocol value.
type SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Protocol_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Protocol struct {
	E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Protocol	E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Protocol
}

// Is_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Protocol_Union ensures that SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Protocol_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Protocol
// implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Protocol_Union interface.
func (*SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Protocol_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Protocol) Is_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Protocol_Union() {}

// SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Protocol_Union_Uint8 is used when /srl_nokia-acl/acl/capture-filter/ipv4-filter/entry/match/protocol
// is to be set to a uint8 value.
type SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Protocol_Union_Uint8 struct {
	Uint8	uint8
}

// Is_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Protocol_Union ensures that SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Protocol_Union_Uint8
// implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Protocol_Union interface.
func (*SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Protocol_Union_Uint8) Is_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Protocol_Union() {}

// To_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Protocol_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Protocol_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match) To_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Protocol_Union(i interface{}) (SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Protocol_Union, error) {
	switch v := i.(type) {
	case E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Protocol:
		return &SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Protocol_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Protocol{v}, nil
	case uint8:
		return &SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Protocol_Union_Uint8{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Protocol_Union, unknown union type, got: %T, want any of [E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Protocol, uint8]", i, i)
	}
}


// SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/capture-filter/ipv4-filter/entry/match/destination-port/value within the YANG schema.
type SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value_Union interface {
	Is_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value_Union()
}

// SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value is used when /srl_nokia-acl/acl/capture-filter/ipv4-filter/entry/match/destination-port/value
// is to be set to a E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value value.
type SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value struct {
	E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value	E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value
}

// Is_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value_Union ensures that SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value
// implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value_Union interface.
func (*SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value) Is_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value_Union() {}

// SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value_Union_Uint16 is used when /srl_nokia-acl/acl/capture-filter/ipv4-filter/entry/match/destination-port/value
// is to be set to a uint16 value.
type SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value_Union_Uint16 struct {
	Uint16	uint16
}

// Is_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value_Union ensures that SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value_Union_Uint16
// implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value_Union interface.
func (*SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value_Union_Uint16) Is_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value_Union() {}

// To_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort) To_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value_Union(i interface{}) (SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value_Union, error) {
	switch v := i.(type) {
	case E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value:
		return &SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value{v}, nil
	case uint16:
		return &SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value_Union_Uint16{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value_Union, unknown union type, got: %T, want any of [E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value, uint16]", i, i)
	}
}


// SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/capture-filter/ipv4-filter/entry/match/destination-port/range/end within the YANG schema.
type SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union interface {
	Is_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union()
}

// SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End is used when /srl_nokia-acl/acl/capture-filter/ipv4-filter/entry/match/destination-port/range/end
// is to be set to a E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End value.
type SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End struct {
	E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End	E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End
}

// Is_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union ensures that SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End
// implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union interface.
func (*SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End) Is_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union() {}

// SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union_Uint16 is used when /srl_nokia-acl/acl/capture-filter/ipv4-filter/entry/match/destination-port/range/end
// is to be set to a uint16 value.
type SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union_Uint16 struct {
	Uint16	uint16
}

// Is_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union ensures that SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union_Uint16
// implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union interface.
func (*SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union_Uint16) Is_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union() {}

// To_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range) To_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union(i interface{}) (SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union, error) {
	switch v := i.(type) {
	case E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End:
		return &SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End{v}, nil
	case uint16:
		return &SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union_Uint16{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union, unknown union type, got: %T, want any of [E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End, uint16]", i, i)
	}
}

// SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/capture-filter/ipv4-filter/entry/match/destination-port/range/start within the YANG schema.
type SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union interface {
	Is_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union()
}

// SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start is used when /srl_nokia-acl/acl/capture-filter/ipv4-filter/entry/match/destination-port/range/start
// is to be set to a E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start value.
type SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start struct {
	E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start	E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start
}

// Is_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union ensures that SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start
// implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union interface.
func (*SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start) Is_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union() {}

// SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union_Uint16 is used when /srl_nokia-acl/acl/capture-filter/ipv4-filter/entry/match/destination-port/range/start
// is to be set to a uint16 value.
type SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union_Uint16 struct {
	Uint16	uint16
}

// Is_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union ensures that SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union_Uint16
// implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union interface.
func (*SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union_Uint16) Is_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union() {}

// To_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range) To_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union(i interface{}) (SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union, error) {
	switch v := i.(type) {
	case E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start:
		return &SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start{v}, nil
	case uint16:
		return &SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union_Uint16{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union, unknown union type, got: %T, want any of [E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start, uint16]", i, i)
	}
}


// SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Icmp_Type_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/capture-filter/ipv4-filter/entry/match/icmp/type within the YANG schema.
type SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Icmp_Type_Union interface {
	Is_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Icmp_Type_Union()
}

// SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Icmp_Type_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Icmp_Type is used when /srl_nokia-acl/acl/capture-filter/ipv4-filter/entry/match/icmp/type
// is to be set to a E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Icmp_Type value.
type SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Icmp_Type_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Icmp_Type struct {
	E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Icmp_Type	E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Icmp_Type
}

// Is_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Icmp_Type_Union ensures that SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Icmp_Type_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Icmp_Type
// implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Icmp_Type_Union interface.
func (*SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Icmp_Type_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Icmp_Type) Is_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Icmp_Type_Union() {}

// SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Icmp_Type_Union_Uint8 is used when /srl_nokia-acl/acl/capture-filter/ipv4-filter/entry/match/icmp/type
// is to be set to a uint8 value.
type SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Icmp_Type_Union_Uint8 struct {
	Uint8	uint8
}

// Is_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Icmp_Type_Union ensures that SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Icmp_Type_Union_Uint8
// implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Icmp_Type_Union interface.
func (*SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Icmp_Type_Union_Uint8) Is_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Icmp_Type_Union() {}

// To_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Icmp_Type_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Icmp_Type_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Icmp) To_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Icmp_Type_Union(i interface{}) (SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Icmp_Type_Union, error) {
	switch v := i.(type) {
	case E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Icmp_Type:
		return &SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Icmp_Type_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Icmp_Type{v}, nil
	case uint8:
		return &SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Icmp_Type_Union_Uint8{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Icmp_Type_Union, unknown union type, got: %T, want any of [E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Icmp_Type, uint8]", i, i)
	}
}


// SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/capture-filter/ipv4-filter/entry/match/source-port/value within the YANG schema.
type SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value_Union interface {
	Is_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value_Union()
}

// SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value is used when /srl_nokia-acl/acl/capture-filter/ipv4-filter/entry/match/source-port/value
// is to be set to a E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value value.
type SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value struct {
	E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value	E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value
}

// Is_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value_Union ensures that SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value
// implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value_Union interface.
func (*SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value) Is_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value_Union() {}

// SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value_Union_Uint16 is used when /srl_nokia-acl/acl/capture-filter/ipv4-filter/entry/match/source-port/value
// is to be set to a uint16 value.
type SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value_Union_Uint16 struct {
	Uint16	uint16
}

// Is_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value_Union ensures that SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value_Union_Uint16
// implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value_Union interface.
func (*SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value_Union_Uint16) Is_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value_Union() {}

// To_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort) To_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value_Union(i interface{}) (SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value_Union, error) {
	switch v := i.(type) {
	case E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value:
		return &SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value{v}, nil
	case uint16:
		return &SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value_Union_Uint16{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value_Union, unknown union type, got: %T, want any of [E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value, uint16]", i, i)
	}
}


// SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/capture-filter/ipv4-filter/entry/match/source-port/range/end within the YANG schema.
type SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union interface {
	Is_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union()
}

// SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End is used when /srl_nokia-acl/acl/capture-filter/ipv4-filter/entry/match/source-port/range/end
// is to be set to a E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End value.
type SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End struct {
	E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End	E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End
}

// Is_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union ensures that SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End
// implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union interface.
func (*SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End) Is_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union() {}

// SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union_Uint16 is used when /srl_nokia-acl/acl/capture-filter/ipv4-filter/entry/match/source-port/range/end
// is to be set to a uint16 value.
type SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union_Uint16 struct {
	Uint16	uint16
}

// Is_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union ensures that SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union_Uint16
// implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union interface.
func (*SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union_Uint16) Is_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union() {}

// To_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range) To_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union(i interface{}) (SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union, error) {
	switch v := i.(type) {
	case E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End:
		return &SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End{v}, nil
	case uint16:
		return &SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union_Uint16{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union, unknown union type, got: %T, want any of [E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End, uint16]", i, i)
	}
}

// SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/capture-filter/ipv4-filter/entry/match/source-port/range/start within the YANG schema.
type SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union interface {
	Is_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union()
}

// SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start is used when /srl_nokia-acl/acl/capture-filter/ipv4-filter/entry/match/source-port/range/start
// is to be set to a E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start value.
type SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start struct {
	E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start	E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start
}

// Is_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union ensures that SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start
// implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union interface.
func (*SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start) Is_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union() {}

// SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union_Uint16 is used when /srl_nokia-acl/acl/capture-filter/ipv4-filter/entry/match/source-port/range/start
// is to be set to a uint16 value.
type SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union_Uint16 struct {
	Uint16	uint16
}

// Is_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union ensures that SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union_Uint16
// implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union interface.
func (*SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union_Uint16) Is_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union() {}

// To_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range) To_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union(i interface{}) (SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union, error) {
	switch v := i.(type) {
	case E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start:
		return &SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start{v}, nil
	case uint16:
		return &SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union_Uint16{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union, unknown union type, got: %T, want any of [E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start, uint16]", i, i)
	}
}







// SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_NextHeader_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/capture-filter/ipv6-filter/entry/match/next-header within the YANG schema.
type SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_NextHeader_Union interface {
	Is_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_NextHeader_Union()
}

// SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_NextHeader_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_NextHeader is used when /srl_nokia-acl/acl/capture-filter/ipv6-filter/entry/match/next-header
// is to be set to a E_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_NextHeader value.
type SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_NextHeader_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_NextHeader struct {
	E_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_NextHeader	E_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_NextHeader
}

// Is_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_NextHeader_Union ensures that SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_NextHeader_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_NextHeader
// implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_NextHeader_Union interface.
func (*SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_NextHeader_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_NextHeader) Is_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_NextHeader_Union() {}

// SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_NextHeader_Union_Uint8 is used when /srl_nokia-acl/acl/capture-filter/ipv6-filter/entry/match/next-header
// is to be set to a uint8 value.
type SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_NextHeader_Union_Uint8 struct {
	Uint8	uint8
}

// Is_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_NextHeader_Union ensures that SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_NextHeader_Union_Uint8
// implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_NextHeader_Union interface.
func (*SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_NextHeader_Union_Uint8) Is_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_NextHeader_Union() {}

// To_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_NextHeader_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_NextHeader_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match) To_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_NextHeader_Union(i interface{}) (SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_NextHeader_Union, error) {
	switch v := i.(type) {
	case E_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_NextHeader:
		return &SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_NextHeader_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_NextHeader{v}, nil
	case uint8:
		return &SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_NextHeader_Union_Uint8{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_NextHeader_Union, unknown union type, got: %T, want any of [E_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_NextHeader, uint8]", i, i)
	}
}


// SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Value_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/capture-filter/ipv6-filter/entry/match/destination-port/value within the YANG schema.
type SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Value_Union interface {
	Is_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Value_Union()
}

// SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Value_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value is used when /srl_nokia-acl/acl/capture-filter/ipv6-filter/entry/match/destination-port/value
// is to be set to a E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value value.
type SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Value_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value struct {
	E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value	E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value
}

// Is_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Value_Union ensures that SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Value_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value
// implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Value_Union interface.
func (*SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Value_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value) Is_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Value_Union() {}

// SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Value_Union_Uint16 is used when /srl_nokia-acl/acl/capture-filter/ipv6-filter/entry/match/destination-port/value
// is to be set to a uint16 value.
type SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Value_Union_Uint16 struct {
	Uint16	uint16
}

// Is_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Value_Union ensures that SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Value_Union_Uint16
// implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Value_Union interface.
func (*SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Value_Union_Uint16) Is_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Value_Union() {}

// To_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Value_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Value_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort) To_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Value_Union(i interface{}) (SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Value_Union, error) {
	switch v := i.(type) {
	case E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value:
		return &SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Value_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value{v}, nil
	case uint16:
		return &SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Value_Union_Uint16{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Value_Union, unknown union type, got: %T, want any of [E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value, uint16]", i, i)
	}
}


// SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/capture-filter/ipv6-filter/entry/match/destination-port/range/end within the YANG schema.
type SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union interface {
	Is_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union()
}

// SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End is used when /srl_nokia-acl/acl/capture-filter/ipv6-filter/entry/match/destination-port/range/end
// is to be set to a E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End value.
type SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End struct {
	E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End	E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End
}

// Is_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union ensures that SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End
// implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union interface.
func (*SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End) Is_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union() {}

// SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union_Uint16 is used when /srl_nokia-acl/acl/capture-filter/ipv6-filter/entry/match/destination-port/range/end
// is to be set to a uint16 value.
type SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union_Uint16 struct {
	Uint16	uint16
}

// Is_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union ensures that SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union_Uint16
// implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union interface.
func (*SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union_Uint16) Is_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union() {}

// To_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Range) To_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union(i interface{}) (SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union, error) {
	switch v := i.(type) {
	case E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End:
		return &SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End{v}, nil
	case uint16:
		return &SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union_Uint16{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union, unknown union type, got: %T, want any of [E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End, uint16]", i, i)
	}
}

// SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/capture-filter/ipv6-filter/entry/match/destination-port/range/start within the YANG schema.
type SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union interface {
	Is_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union()
}

// SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start is used when /srl_nokia-acl/acl/capture-filter/ipv6-filter/entry/match/destination-port/range/start
// is to be set to a E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start value.
type SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start struct {
	E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start	E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start
}

// Is_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union ensures that SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start
// implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union interface.
func (*SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start) Is_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union() {}

// SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union_Uint16 is used when /srl_nokia-acl/acl/capture-filter/ipv6-filter/entry/match/destination-port/range/start
// is to be set to a uint16 value.
type SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union_Uint16 struct {
	Uint16	uint16
}

// Is_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union ensures that SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union_Uint16
// implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union interface.
func (*SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union_Uint16) Is_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union() {}

// To_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Range) To_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union(i interface{}) (SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union, error) {
	switch v := i.(type) {
	case E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start:
		return &SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start{v}, nil
	case uint16:
		return &SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union_Uint16{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union, unknown union type, got: %T, want any of [E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start, uint16]", i, i)
	}
}


// SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_Icmp6_Type_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/capture-filter/ipv6-filter/entry/match/icmp6/type within the YANG schema.
type SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_Icmp6_Type_Union interface {
	Is_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_Icmp6_Type_Union()
}

// SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_Icmp6_Type_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_Icmp6_Type is used when /srl_nokia-acl/acl/capture-filter/ipv6-filter/entry/match/icmp6/type
// is to be set to a E_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_Icmp6_Type value.
type SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_Icmp6_Type_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_Icmp6_Type struct {
	E_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_Icmp6_Type	E_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_Icmp6_Type
}

// Is_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_Icmp6_Type_Union ensures that SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_Icmp6_Type_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_Icmp6_Type
// implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_Icmp6_Type_Union interface.
func (*SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_Icmp6_Type_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_Icmp6_Type) Is_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_Icmp6_Type_Union() {}

// SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_Icmp6_Type_Union_Uint8 is used when /srl_nokia-acl/acl/capture-filter/ipv6-filter/entry/match/icmp6/type
// is to be set to a uint8 value.
type SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_Icmp6_Type_Union_Uint8 struct {
	Uint8	uint8
}

// Is_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_Icmp6_Type_Union ensures that SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_Icmp6_Type_Union_Uint8
// implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_Icmp6_Type_Union interface.
func (*SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_Icmp6_Type_Union_Uint8) Is_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_Icmp6_Type_Union() {}

// To_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_Icmp6_Type_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_Icmp6_Type_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_Icmp6) To_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_Icmp6_Type_Union(i interface{}) (SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_Icmp6_Type_Union, error) {
	switch v := i.(type) {
	case E_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_Icmp6_Type:
		return &SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_Icmp6_Type_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_Icmp6_Type{v}, nil
	case uint8:
		return &SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_Icmp6_Type_Union_Uint8{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_Icmp6_Type_Union, unknown union type, got: %T, want any of [E_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_Icmp6_Type, uint8]", i, i)
	}
}


// SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Value_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/capture-filter/ipv6-filter/entry/match/source-port/value within the YANG schema.
type SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Value_Union interface {
	Is_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Value_Union()
}

// SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Value_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value is used when /srl_nokia-acl/acl/capture-filter/ipv6-filter/entry/match/source-port/value
// is to be set to a E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value value.
type SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Value_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value struct {
	E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value	E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value
}

// Is_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Value_Union ensures that SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Value_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value
// implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Value_Union interface.
func (*SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Value_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value) Is_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Value_Union() {}

// SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Value_Union_Uint16 is used when /srl_nokia-acl/acl/capture-filter/ipv6-filter/entry/match/source-port/value
// is to be set to a uint16 value.
type SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Value_Union_Uint16 struct {
	Uint16	uint16
}

// Is_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Value_Union ensures that SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Value_Union_Uint16
// implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Value_Union interface.
func (*SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Value_Union_Uint16) Is_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Value_Union() {}

// To_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Value_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Value_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort) To_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Value_Union(i interface{}) (SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Value_Union, error) {
	switch v := i.(type) {
	case E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value:
		return &SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Value_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value{v}, nil
	case uint16:
		return &SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Value_Union_Uint16{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Value_Union, unknown union type, got: %T, want any of [E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value, uint16]", i, i)
	}
}


// SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/capture-filter/ipv6-filter/entry/match/source-port/range/end within the YANG schema.
type SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union interface {
	Is_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union()
}

// SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End is used when /srl_nokia-acl/acl/capture-filter/ipv6-filter/entry/match/source-port/range/end
// is to be set to a E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End value.
type SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End struct {
	E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End	E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End
}

// Is_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union ensures that SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End
// implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union interface.
func (*SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End) Is_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union() {}

// SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union_Uint16 is used when /srl_nokia-acl/acl/capture-filter/ipv6-filter/entry/match/source-port/range/end
// is to be set to a uint16 value.
type SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union_Uint16 struct {
	Uint16	uint16
}

// Is_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union ensures that SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union_Uint16
// implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union interface.
func (*SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union_Uint16) Is_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union() {}

// To_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Range) To_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union(i interface{}) (SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union, error) {
	switch v := i.(type) {
	case E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End:
		return &SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End{v}, nil
	case uint16:
		return &SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union_Uint16{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union, unknown union type, got: %T, want any of [E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End, uint16]", i, i)
	}
}

// SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/capture-filter/ipv6-filter/entry/match/source-port/range/start within the YANG schema.
type SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union interface {
	Is_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union()
}

// SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start is used when /srl_nokia-acl/acl/capture-filter/ipv6-filter/entry/match/source-port/range/start
// is to be set to a E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start value.
type SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start struct {
	E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start	E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start
}

// Is_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union ensures that SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start
// implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union interface.
func (*SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start) Is_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union() {}

// SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union_Uint16 is used when /srl_nokia-acl/acl/capture-filter/ipv6-filter/entry/match/source-port/range/start
// is to be set to a uint16 value.
type SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union_Uint16 struct {
	Uint16	uint16
}

// Is_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union ensures that SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union_Uint16
// implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union interface.
func (*SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union_Uint16) Is_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union() {}

// To_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Range) To_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union(i interface{}) (SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union, error) {
	switch v := i.(type) {
	case E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start:
		return &SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start{v}, nil
	case uint16:
		return &SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union_Uint16{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union, unknown union type, got: %T, want any of [E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start, uint16]", i, i)
	}
}









// SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_Protocol_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/cpm-filter/ipv4-filter/entry/match/protocol within the YANG schema.
type SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_Protocol_Union interface {
	Is_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_Protocol_Union()
}

// SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_Protocol_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Protocol is used when /srl_nokia-acl/acl/cpm-filter/ipv4-filter/entry/match/protocol
// is to be set to a E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Protocol value.
type SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_Protocol_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Protocol struct {
	E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Protocol	E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Protocol
}

// Is_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_Protocol_Union ensures that SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_Protocol_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Protocol
// implements the SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_Protocol_Union interface.
func (*SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_Protocol_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Protocol) Is_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_Protocol_Union() {}

// SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_Protocol_Union_Uint8 is used when /srl_nokia-acl/acl/cpm-filter/ipv4-filter/entry/match/protocol
// is to be set to a uint8 value.
type SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_Protocol_Union_Uint8 struct {
	Uint8	uint8
}

// Is_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_Protocol_Union ensures that SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_Protocol_Union_Uint8
// implements the SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_Protocol_Union interface.
func (*SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_Protocol_Union_Uint8) Is_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_Protocol_Union() {}

// To_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_Protocol_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_Protocol_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match) To_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_Protocol_Union(i interface{}) (SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_Protocol_Union, error) {
	switch v := i.(type) {
	case E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Protocol:
		return &SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_Protocol_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Protocol{v}, nil
	case uint8:
		return &SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_Protocol_Union_Uint8{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_Protocol_Union, unknown union type, got: %T, want any of [E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Protocol, uint8]", i, i)
	}
}


// SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Value_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/cpm-filter/ipv4-filter/entry/match/destination-port/value within the YANG schema.
type SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Value_Union interface {
	Is_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Value_Union()
}

// SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Value_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value is used when /srl_nokia-acl/acl/cpm-filter/ipv4-filter/entry/match/destination-port/value
// is to be set to a E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value value.
type SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Value_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value struct {
	E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value	E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value
}

// Is_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Value_Union ensures that SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Value_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value
// implements the SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Value_Union interface.
func (*SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Value_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value) Is_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Value_Union() {}

// SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Value_Union_Uint16 is used when /srl_nokia-acl/acl/cpm-filter/ipv4-filter/entry/match/destination-port/value
// is to be set to a uint16 value.
type SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Value_Union_Uint16 struct {
	Uint16	uint16
}

// Is_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Value_Union ensures that SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Value_Union_Uint16
// implements the SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Value_Union interface.
func (*SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Value_Union_Uint16) Is_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Value_Union() {}

// To_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Value_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Value_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort) To_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Value_Union(i interface{}) (SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Value_Union, error) {
	switch v := i.(type) {
	case E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value:
		return &SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Value_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value{v}, nil
	case uint16:
		return &SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Value_Union_Uint16{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Value_Union, unknown union type, got: %T, want any of [E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value, uint16]", i, i)
	}
}


// SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/cpm-filter/ipv4-filter/entry/match/destination-port/range/end within the YANG schema.
type SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union interface {
	Is_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union()
}

// SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End is used when /srl_nokia-acl/acl/cpm-filter/ipv4-filter/entry/match/destination-port/range/end
// is to be set to a E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End value.
type SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End struct {
	E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End	E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End
}

// Is_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union ensures that SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End
// implements the SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union interface.
func (*SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End) Is_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union() {}

// SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union_Uint16 is used when /srl_nokia-acl/acl/cpm-filter/ipv4-filter/entry/match/destination-port/range/end
// is to be set to a uint16 value.
type SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union_Uint16 struct {
	Uint16	uint16
}

// Is_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union ensures that SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union_Uint16
// implements the SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union interface.
func (*SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union_Uint16) Is_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union() {}

// To_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Range) To_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union(i interface{}) (SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union, error) {
	switch v := i.(type) {
	case E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End:
		return &SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End{v}, nil
	case uint16:
		return &SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union_Uint16{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union, unknown union type, got: %T, want any of [E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End, uint16]", i, i)
	}
}

// SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/cpm-filter/ipv4-filter/entry/match/destination-port/range/start within the YANG schema.
type SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union interface {
	Is_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union()
}

// SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start is used when /srl_nokia-acl/acl/cpm-filter/ipv4-filter/entry/match/destination-port/range/start
// is to be set to a E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start value.
type SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start struct {
	E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start	E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start
}

// Is_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union ensures that SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start
// implements the SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union interface.
func (*SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start) Is_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union() {}

// SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union_Uint16 is used when /srl_nokia-acl/acl/cpm-filter/ipv4-filter/entry/match/destination-port/range/start
// is to be set to a uint16 value.
type SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union_Uint16 struct {
	Uint16	uint16
}

// Is_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union ensures that SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union_Uint16
// implements the SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union interface.
func (*SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union_Uint16) Is_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union() {}

// To_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Range) To_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union(i interface{}) (SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union, error) {
	switch v := i.(type) {
	case E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start:
		return &SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start{v}, nil
	case uint16:
		return &SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union_Uint16{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union, unknown union type, got: %T, want any of [E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start, uint16]", i, i)
	}
}


// SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_Icmp_Type_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/cpm-filter/ipv4-filter/entry/match/icmp/type within the YANG schema.
type SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_Icmp_Type_Union interface {
	Is_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_Icmp_Type_Union()
}

// SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_Icmp_Type_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Icmp_Type is used when /srl_nokia-acl/acl/cpm-filter/ipv4-filter/entry/match/icmp/type
// is to be set to a E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Icmp_Type value.
type SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_Icmp_Type_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Icmp_Type struct {
	E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Icmp_Type	E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Icmp_Type
}

// Is_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_Icmp_Type_Union ensures that SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_Icmp_Type_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Icmp_Type
// implements the SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_Icmp_Type_Union interface.
func (*SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_Icmp_Type_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Icmp_Type) Is_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_Icmp_Type_Union() {}

// SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_Icmp_Type_Union_Uint8 is used when /srl_nokia-acl/acl/cpm-filter/ipv4-filter/entry/match/icmp/type
// is to be set to a uint8 value.
type SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_Icmp_Type_Union_Uint8 struct {
	Uint8	uint8
}

// Is_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_Icmp_Type_Union ensures that SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_Icmp_Type_Union_Uint8
// implements the SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_Icmp_Type_Union interface.
func (*SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_Icmp_Type_Union_Uint8) Is_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_Icmp_Type_Union() {}

// To_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_Icmp_Type_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_Icmp_Type_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_Icmp) To_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_Icmp_Type_Union(i interface{}) (SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_Icmp_Type_Union, error) {
	switch v := i.(type) {
	case E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Icmp_Type:
		return &SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_Icmp_Type_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Icmp_Type{v}, nil
	case uint8:
		return &SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_Icmp_Type_Union_Uint8{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_Icmp_Type_Union, unknown union type, got: %T, want any of [E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Icmp_Type, uint8]", i, i)
	}
}


// SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Value_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/cpm-filter/ipv4-filter/entry/match/source-port/value within the YANG schema.
type SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Value_Union interface {
	Is_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Value_Union()
}

// SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Value_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value is used when /srl_nokia-acl/acl/cpm-filter/ipv4-filter/entry/match/source-port/value
// is to be set to a E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value value.
type SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Value_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value struct {
	E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value	E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value
}

// Is_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Value_Union ensures that SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Value_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value
// implements the SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Value_Union interface.
func (*SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Value_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value) Is_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Value_Union() {}

// SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Value_Union_Uint16 is used when /srl_nokia-acl/acl/cpm-filter/ipv4-filter/entry/match/source-port/value
// is to be set to a uint16 value.
type SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Value_Union_Uint16 struct {
	Uint16	uint16
}

// Is_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Value_Union ensures that SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Value_Union_Uint16
// implements the SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Value_Union interface.
func (*SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Value_Union_Uint16) Is_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Value_Union() {}

// To_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Value_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Value_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort) To_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Value_Union(i interface{}) (SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Value_Union, error) {
	switch v := i.(type) {
	case E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value:
		return &SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Value_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value{v}, nil
	case uint16:
		return &SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Value_Union_Uint16{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Value_Union, unknown union type, got: %T, want any of [E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value, uint16]", i, i)
	}
}


// SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/cpm-filter/ipv4-filter/entry/match/source-port/range/end within the YANG schema.
type SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union interface {
	Is_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union()
}

// SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End is used when /srl_nokia-acl/acl/cpm-filter/ipv4-filter/entry/match/source-port/range/end
// is to be set to a E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End value.
type SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End struct {
	E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End	E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End
}

// Is_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union ensures that SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End
// implements the SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union interface.
func (*SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End) Is_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union() {}

// SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union_Uint16 is used when /srl_nokia-acl/acl/cpm-filter/ipv4-filter/entry/match/source-port/range/end
// is to be set to a uint16 value.
type SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union_Uint16 struct {
	Uint16	uint16
}

// Is_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union ensures that SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union_Uint16
// implements the SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union interface.
func (*SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union_Uint16) Is_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union() {}

// To_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Range) To_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union(i interface{}) (SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union, error) {
	switch v := i.(type) {
	case E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End:
		return &SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End{v}, nil
	case uint16:
		return &SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union_Uint16{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union, unknown union type, got: %T, want any of [E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End, uint16]", i, i)
	}
}

// SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/cpm-filter/ipv4-filter/entry/match/source-port/range/start within the YANG schema.
type SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union interface {
	Is_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union()
}

// SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start is used when /srl_nokia-acl/acl/cpm-filter/ipv4-filter/entry/match/source-port/range/start
// is to be set to a E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start value.
type SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start struct {
	E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start	E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start
}

// Is_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union ensures that SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start
// implements the SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union interface.
func (*SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start) Is_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union() {}

// SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union_Uint16 is used when /srl_nokia-acl/acl/cpm-filter/ipv4-filter/entry/match/source-port/range/start
// is to be set to a uint16 value.
type SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union_Uint16 struct {
	Uint16	uint16
}

// Is_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union ensures that SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union_Uint16
// implements the SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union interface.
func (*SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union_Uint16) Is_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union() {}

// To_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Range) To_SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union(i interface{}) (SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union, error) {
	switch v := i.(type) {
	case E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start:
		return &SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start{v}, nil
	case uint16:
		return &SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union_Uint16{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_CpmFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union, unknown union type, got: %T, want any of [E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start, uint16]", i, i)
	}
}









// SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_NextHeader_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/cpm-filter/ipv6-filter/entry/match/next-header within the YANG schema.
type SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_NextHeader_Union interface {
	Is_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_NextHeader_Union()
}

// SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_NextHeader_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_NextHeader is used when /srl_nokia-acl/acl/cpm-filter/ipv6-filter/entry/match/next-header
// is to be set to a E_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_NextHeader value.
type SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_NextHeader_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_NextHeader struct {
	E_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_NextHeader	E_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_NextHeader
}

// Is_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_NextHeader_Union ensures that SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_NextHeader_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_NextHeader
// implements the SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_NextHeader_Union interface.
func (*SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_NextHeader_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_NextHeader) Is_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_NextHeader_Union() {}

// SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_NextHeader_Union_Uint8 is used when /srl_nokia-acl/acl/cpm-filter/ipv6-filter/entry/match/next-header
// is to be set to a uint8 value.
type SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_NextHeader_Union_Uint8 struct {
	Uint8	uint8
}

// Is_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_NextHeader_Union ensures that SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_NextHeader_Union_Uint8
// implements the SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_NextHeader_Union interface.
func (*SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_NextHeader_Union_Uint8) Is_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_NextHeader_Union() {}

// To_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_NextHeader_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_NextHeader_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match) To_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_NextHeader_Union(i interface{}) (SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_NextHeader_Union, error) {
	switch v := i.(type) {
	case E_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_NextHeader:
		return &SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_NextHeader_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_NextHeader{v}, nil
	case uint8:
		return &SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_NextHeader_Union_Uint8{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_NextHeader_Union, unknown union type, got: %T, want any of [E_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_NextHeader, uint8]", i, i)
	}
}


// SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Value_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/cpm-filter/ipv6-filter/entry/match/destination-port/value within the YANG schema.
type SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Value_Union interface {
	Is_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Value_Union()
}

// SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Value_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value is used when /srl_nokia-acl/acl/cpm-filter/ipv6-filter/entry/match/destination-port/value
// is to be set to a E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value value.
type SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Value_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value struct {
	E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value	E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value
}

// Is_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Value_Union ensures that SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Value_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value
// implements the SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Value_Union interface.
func (*SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Value_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value) Is_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Value_Union() {}

// SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Value_Union_Uint16 is used when /srl_nokia-acl/acl/cpm-filter/ipv6-filter/entry/match/destination-port/value
// is to be set to a uint16 value.
type SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Value_Union_Uint16 struct {
	Uint16	uint16
}

// Is_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Value_Union ensures that SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Value_Union_Uint16
// implements the SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Value_Union interface.
func (*SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Value_Union_Uint16) Is_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Value_Union() {}

// To_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Value_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Value_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort) To_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Value_Union(i interface{}) (SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Value_Union, error) {
	switch v := i.(type) {
	case E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value:
		return &SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Value_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value{v}, nil
	case uint16:
		return &SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Value_Union_Uint16{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Value_Union, unknown union type, got: %T, want any of [E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value, uint16]", i, i)
	}
}


// SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/cpm-filter/ipv6-filter/entry/match/destination-port/range/end within the YANG schema.
type SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union interface {
	Is_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union()
}

// SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End is used when /srl_nokia-acl/acl/cpm-filter/ipv6-filter/entry/match/destination-port/range/end
// is to be set to a E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End value.
type SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End struct {
	E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End	E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End
}

// Is_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union ensures that SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End
// implements the SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union interface.
func (*SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End) Is_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union() {}

// SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union_Uint16 is used when /srl_nokia-acl/acl/cpm-filter/ipv6-filter/entry/match/destination-port/range/end
// is to be set to a uint16 value.
type SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union_Uint16 struct {
	Uint16	uint16
}

// Is_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union ensures that SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union_Uint16
// implements the SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union interface.
func (*SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union_Uint16) Is_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union() {}

// To_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Range) To_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union(i interface{}) (SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union, error) {
	switch v := i.(type) {
	case E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End:
		return &SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End{v}, nil
	case uint16:
		return &SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union_Uint16{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union, unknown union type, got: %T, want any of [E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End, uint16]", i, i)
	}
}

// SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/cpm-filter/ipv6-filter/entry/match/destination-port/range/start within the YANG schema.
type SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union interface {
	Is_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union()
}

// SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start is used when /srl_nokia-acl/acl/cpm-filter/ipv6-filter/entry/match/destination-port/range/start
// is to be set to a E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start value.
type SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start struct {
	E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start	E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start
}

// Is_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union ensures that SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start
// implements the SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union interface.
func (*SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start) Is_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union() {}

// SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union_Uint16 is used when /srl_nokia-acl/acl/cpm-filter/ipv6-filter/entry/match/destination-port/range/start
// is to be set to a uint16 value.
type SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union_Uint16 struct {
	Uint16	uint16
}

// Is_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union ensures that SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union_Uint16
// implements the SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union interface.
func (*SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union_Uint16) Is_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union() {}

// To_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Range) To_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union(i interface{}) (SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union, error) {
	switch v := i.(type) {
	case E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start:
		return &SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start{v}, nil
	case uint16:
		return &SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union_Uint16{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union, unknown union type, got: %T, want any of [E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start, uint16]", i, i)
	}
}


// SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_Icmp6_Type_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/cpm-filter/ipv6-filter/entry/match/icmp6/type within the YANG schema.
type SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_Icmp6_Type_Union interface {
	Is_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_Icmp6_Type_Union()
}

// SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_Icmp6_Type_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_Icmp6_Type is used when /srl_nokia-acl/acl/cpm-filter/ipv6-filter/entry/match/icmp6/type
// is to be set to a E_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_Icmp6_Type value.
type SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_Icmp6_Type_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_Icmp6_Type struct {
	E_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_Icmp6_Type	E_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_Icmp6_Type
}

// Is_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_Icmp6_Type_Union ensures that SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_Icmp6_Type_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_Icmp6_Type
// implements the SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_Icmp6_Type_Union interface.
func (*SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_Icmp6_Type_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_Icmp6_Type) Is_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_Icmp6_Type_Union() {}

// SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_Icmp6_Type_Union_Uint8 is used when /srl_nokia-acl/acl/cpm-filter/ipv6-filter/entry/match/icmp6/type
// is to be set to a uint8 value.
type SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_Icmp6_Type_Union_Uint8 struct {
	Uint8	uint8
}

// Is_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_Icmp6_Type_Union ensures that SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_Icmp6_Type_Union_Uint8
// implements the SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_Icmp6_Type_Union interface.
func (*SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_Icmp6_Type_Union_Uint8) Is_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_Icmp6_Type_Union() {}

// To_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_Icmp6_Type_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_Icmp6_Type_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_Icmp6) To_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_Icmp6_Type_Union(i interface{}) (SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_Icmp6_Type_Union, error) {
	switch v := i.(type) {
	case E_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_Icmp6_Type:
		return &SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_Icmp6_Type_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_Icmp6_Type{v}, nil
	case uint8:
		return &SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_Icmp6_Type_Union_Uint8{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_Icmp6_Type_Union, unknown union type, got: %T, want any of [E_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_Icmp6_Type, uint8]", i, i)
	}
}


// SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Value_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/cpm-filter/ipv6-filter/entry/match/source-port/value within the YANG schema.
type SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Value_Union interface {
	Is_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Value_Union()
}

// SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Value_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value is used when /srl_nokia-acl/acl/cpm-filter/ipv6-filter/entry/match/source-port/value
// is to be set to a E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value value.
type SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Value_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value struct {
	E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value	E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value
}

// Is_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Value_Union ensures that SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Value_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value
// implements the SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Value_Union interface.
func (*SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Value_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value) Is_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Value_Union() {}

// SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Value_Union_Uint16 is used when /srl_nokia-acl/acl/cpm-filter/ipv6-filter/entry/match/source-port/value
// is to be set to a uint16 value.
type SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Value_Union_Uint16 struct {
	Uint16	uint16
}

// Is_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Value_Union ensures that SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Value_Union_Uint16
// implements the SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Value_Union interface.
func (*SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Value_Union_Uint16) Is_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Value_Union() {}

// To_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Value_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Value_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort) To_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Value_Union(i interface{}) (SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Value_Union, error) {
	switch v := i.(type) {
	case E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value:
		return &SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Value_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value{v}, nil
	case uint16:
		return &SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Value_Union_Uint16{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Value_Union, unknown union type, got: %T, want any of [E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value, uint16]", i, i)
	}
}


// SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/cpm-filter/ipv6-filter/entry/match/source-port/range/end within the YANG schema.
type SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union interface {
	Is_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union()
}

// SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End is used when /srl_nokia-acl/acl/cpm-filter/ipv6-filter/entry/match/source-port/range/end
// is to be set to a E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End value.
type SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End struct {
	E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End	E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End
}

// Is_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union ensures that SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End
// implements the SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union interface.
func (*SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End) Is_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union() {}

// SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union_Uint16 is used when /srl_nokia-acl/acl/cpm-filter/ipv6-filter/entry/match/source-port/range/end
// is to be set to a uint16 value.
type SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union_Uint16 struct {
	Uint16	uint16
}

// Is_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union ensures that SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union_Uint16
// implements the SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union interface.
func (*SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union_Uint16) Is_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union() {}

// To_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Range) To_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union(i interface{}) (SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union, error) {
	switch v := i.(type) {
	case E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End:
		return &SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End{v}, nil
	case uint16:
		return &SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union_Uint16{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union, unknown union type, got: %T, want any of [E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End, uint16]", i, i)
	}
}

// SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/cpm-filter/ipv6-filter/entry/match/source-port/range/start within the YANG schema.
type SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union interface {
	Is_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union()
}

// SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start is used when /srl_nokia-acl/acl/cpm-filter/ipv6-filter/entry/match/source-port/range/start
// is to be set to a E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start value.
type SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start struct {
	E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start	E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start
}

// Is_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union ensures that SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start
// implements the SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union interface.
func (*SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start) Is_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union() {}

// SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union_Uint16 is used when /srl_nokia-acl/acl/cpm-filter/ipv6-filter/entry/match/source-port/range/start
// is to be set to a uint16 value.
type SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union_Uint16 struct {
	Uint16	uint16
}

// Is_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union ensures that SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union_Uint16
// implements the SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union interface.
func (*SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union_Uint16) Is_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union() {}

// To_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Range) To_SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union(i interface{}) (SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union, error) {
	switch v := i.(type) {
	case E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start:
		return &SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start{v}, nil
	case uint16:
		return &SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union_Uint16{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_CpmFilter_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union, unknown union type, got: %T, want any of [E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start, uint16]", i, i)
	}
}








// SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Protocol_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/ipv4-filter/entry/match/protocol within the YANG schema.
type SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Protocol_Union interface {
	Is_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Protocol_Union()
}

// SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Protocol_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Protocol is used when /srl_nokia-acl/acl/ipv4-filter/entry/match/protocol
// is to be set to a E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Protocol value.
type SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Protocol_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Protocol struct {
	E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Protocol	E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Protocol
}

// Is_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Protocol_Union ensures that SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Protocol_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Protocol
// implements the SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Protocol_Union interface.
func (*SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Protocol_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Protocol) Is_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Protocol_Union() {}

// SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Protocol_Union_Uint8 is used when /srl_nokia-acl/acl/ipv4-filter/entry/match/protocol
// is to be set to a uint8 value.
type SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Protocol_Union_Uint8 struct {
	Uint8	uint8
}

// Is_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Protocol_Union ensures that SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Protocol_Union_Uint8
// implements the SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Protocol_Union interface.
func (*SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Protocol_Union_Uint8) Is_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Protocol_Union() {}

// To_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Protocol_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Protocol_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match) To_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Protocol_Union(i interface{}) (SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Protocol_Union, error) {
	switch v := i.(type) {
	case E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Protocol:
		return &SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Protocol_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Protocol{v}, nil
	case uint8:
		return &SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Protocol_Union_Uint8{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Protocol_Union, unknown union type, got: %T, want any of [E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Protocol, uint8]", i, i)
	}
}


// SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Value_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/ipv4-filter/entry/match/destination-port/value within the YANG schema.
type SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Value_Union interface {
	Is_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Value_Union()
}

// SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Value_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value is used when /srl_nokia-acl/acl/ipv4-filter/entry/match/destination-port/value
// is to be set to a E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value value.
type SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Value_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value struct {
	E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value	E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value
}

// Is_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Value_Union ensures that SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Value_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value
// implements the SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Value_Union interface.
func (*SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Value_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value) Is_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Value_Union() {}

// SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Value_Union_Uint16 is used when /srl_nokia-acl/acl/ipv4-filter/entry/match/destination-port/value
// is to be set to a uint16 value.
type SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Value_Union_Uint16 struct {
	Uint16	uint16
}

// Is_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Value_Union ensures that SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Value_Union_Uint16
// implements the SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Value_Union interface.
func (*SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Value_Union_Uint16) Is_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Value_Union() {}

// To_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Value_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Value_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort) To_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Value_Union(i interface{}) (SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Value_Union, error) {
	switch v := i.(type) {
	case E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value:
		return &SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Value_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value{v}, nil
	case uint16:
		return &SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Value_Union_Uint16{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Value_Union, unknown union type, got: %T, want any of [E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value, uint16]", i, i)
	}
}


// SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/ipv4-filter/entry/match/destination-port/range/end within the YANG schema.
type SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union interface {
	Is_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union()
}

// SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End is used when /srl_nokia-acl/acl/ipv4-filter/entry/match/destination-port/range/end
// is to be set to a E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End value.
type SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End struct {
	E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End	E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End
}

// Is_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union ensures that SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End
// implements the SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union interface.
func (*SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End) Is_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union() {}

// SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union_Uint16 is used when /srl_nokia-acl/acl/ipv4-filter/entry/match/destination-port/range/end
// is to be set to a uint16 value.
type SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union_Uint16 struct {
	Uint16	uint16
}

// Is_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union ensures that SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union_Uint16
// implements the SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union interface.
func (*SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union_Uint16) Is_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union() {}

// To_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range) To_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union(i interface{}) (SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union, error) {
	switch v := i.(type) {
	case E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End:
		return &SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End{v}, nil
	case uint16:
		return &SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union_Uint16{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range_End_Union, unknown union type, got: %T, want any of [E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End, uint16]", i, i)
	}
}

// SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/ipv4-filter/entry/match/destination-port/range/start within the YANG schema.
type SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union interface {
	Is_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union()
}

// SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start is used when /srl_nokia-acl/acl/ipv4-filter/entry/match/destination-port/range/start
// is to be set to a E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start value.
type SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start struct {
	E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start	E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start
}

// Is_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union ensures that SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start
// implements the SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union interface.
func (*SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start) Is_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union() {}

// SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union_Uint16 is used when /srl_nokia-acl/acl/ipv4-filter/entry/match/destination-port/range/start
// is to be set to a uint16 value.
type SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union_Uint16 struct {
	Uint16	uint16
}

// Is_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union ensures that SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union_Uint16
// implements the SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union interface.
func (*SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union_Uint16) Is_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union() {}

// To_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range) To_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union(i interface{}) (SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union, error) {
	switch v := i.(type) {
	case E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start:
		return &SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start{v}, nil
	case uint16:
		return &SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union_Uint16{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_DestinationPort_Range_Start_Union, unknown union type, got: %T, want any of [E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start, uint16]", i, i)
	}
}


// SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Icmp_Type_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/ipv4-filter/entry/match/icmp/type within the YANG schema.
type SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Icmp_Type_Union interface {
	Is_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Icmp_Type_Union()
}

// SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Icmp_Type_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Icmp_Type is used when /srl_nokia-acl/acl/ipv4-filter/entry/match/icmp/type
// is to be set to a E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Icmp_Type value.
type SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Icmp_Type_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Icmp_Type struct {
	E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Icmp_Type	E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Icmp_Type
}

// Is_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Icmp_Type_Union ensures that SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Icmp_Type_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Icmp_Type
// implements the SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Icmp_Type_Union interface.
func (*SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Icmp_Type_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Icmp_Type) Is_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Icmp_Type_Union() {}

// SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Icmp_Type_Union_Uint8 is used when /srl_nokia-acl/acl/ipv4-filter/entry/match/icmp/type
// is to be set to a uint8 value.
type SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Icmp_Type_Union_Uint8 struct {
	Uint8	uint8
}

// Is_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Icmp_Type_Union ensures that SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Icmp_Type_Union_Uint8
// implements the SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Icmp_Type_Union interface.
func (*SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Icmp_Type_Union_Uint8) Is_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Icmp_Type_Union() {}

// To_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Icmp_Type_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Icmp_Type_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Icmp) To_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Icmp_Type_Union(i interface{}) (SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Icmp_Type_Union, error) {
	switch v := i.(type) {
	case E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Icmp_Type:
		return &SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Icmp_Type_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Icmp_Type{v}, nil
	case uint8:
		return &SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Icmp_Type_Union_Uint8{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_Icmp_Type_Union, unknown union type, got: %T, want any of [E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_Icmp_Type, uint8]", i, i)
	}
}


// SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Value_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/ipv4-filter/entry/match/source-port/value within the YANG schema.
type SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Value_Union interface {
	Is_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Value_Union()
}

// SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Value_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value is used when /srl_nokia-acl/acl/ipv4-filter/entry/match/source-port/value
// is to be set to a E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value value.
type SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Value_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value struct {
	E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value	E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value
}

// Is_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Value_Union ensures that SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Value_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value
// implements the SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Value_Union interface.
func (*SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Value_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value) Is_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Value_Union() {}

// SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Value_Union_Uint16 is used when /srl_nokia-acl/acl/ipv4-filter/entry/match/source-port/value
// is to be set to a uint16 value.
type SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Value_Union_Uint16 struct {
	Uint16	uint16
}

// Is_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Value_Union ensures that SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Value_Union_Uint16
// implements the SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Value_Union interface.
func (*SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Value_Union_Uint16) Is_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Value_Union() {}

// To_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Value_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Value_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort) To_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Value_Union(i interface{}) (SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Value_Union, error) {
	switch v := i.(type) {
	case E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value:
		return &SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Value_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value{v}, nil
	case uint16:
		return &SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Value_Union_Uint16{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Value_Union, unknown union type, got: %T, want any of [E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value, uint16]", i, i)
	}
}


// SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/ipv4-filter/entry/match/source-port/range/end within the YANG schema.
type SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union interface {
	Is_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union()
}

// SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End is used when /srl_nokia-acl/acl/ipv4-filter/entry/match/source-port/range/end
// is to be set to a E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End value.
type SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End struct {
	E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End	E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End
}

// Is_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union ensures that SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End
// implements the SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union interface.
func (*SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End) Is_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union() {}

// SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union_Uint16 is used when /srl_nokia-acl/acl/ipv4-filter/entry/match/source-port/range/end
// is to be set to a uint16 value.
type SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union_Uint16 struct {
	Uint16	uint16
}

// Is_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union ensures that SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union_Uint16
// implements the SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union interface.
func (*SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union_Uint16) Is_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union() {}

// To_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range) To_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union(i interface{}) (SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union, error) {
	switch v := i.(type) {
	case E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End:
		return &SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End{v}, nil
	case uint16:
		return &SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union_Uint16{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range_End_Union, unknown union type, got: %T, want any of [E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End, uint16]", i, i)
	}
}

// SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/ipv4-filter/entry/match/source-port/range/start within the YANG schema.
type SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union interface {
	Is_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union()
}

// SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start is used when /srl_nokia-acl/acl/ipv4-filter/entry/match/source-port/range/start
// is to be set to a E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start value.
type SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start struct {
	E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start	E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start
}

// Is_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union ensures that SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start
// implements the SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union interface.
func (*SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start) Is_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union() {}

// SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union_Uint16 is used when /srl_nokia-acl/acl/ipv4-filter/entry/match/source-port/range/start
// is to be set to a uint16 value.
type SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union_Uint16 struct {
	Uint16	uint16
}

// Is_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union ensures that SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union_Uint16
// implements the SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union interface.
func (*SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union_Uint16) Is_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union() {}

// To_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range) To_SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union(i interface{}) (SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union, error) {
	switch v := i.(type) {
	case E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start:
		return &SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start{v}, nil
	case uint16:
		return &SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union_Uint16{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_Ipv4Filter_Entry_Match_SourcePort_Range_Start_Union, unknown union type, got: %T, want any of [E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start, uint16]", i, i)
	}
}














// SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_NextHeader_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/ipv6-filter/entry/match/next-header within the YANG schema.
type SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_NextHeader_Union interface {
	Is_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_NextHeader_Union()
}

// SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_NextHeader_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_NextHeader is used when /srl_nokia-acl/acl/ipv6-filter/entry/match/next-header
// is to be set to a E_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_NextHeader value.
type SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_NextHeader_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_NextHeader struct {
	E_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_NextHeader	E_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_NextHeader
}

// Is_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_NextHeader_Union ensures that SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_NextHeader_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_NextHeader
// implements the SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_NextHeader_Union interface.
func (*SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_NextHeader_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_NextHeader) Is_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_NextHeader_Union() {}

// SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_NextHeader_Union_Uint8 is used when /srl_nokia-acl/acl/ipv6-filter/entry/match/next-header
// is to be set to a uint8 value.
type SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_NextHeader_Union_Uint8 struct {
	Uint8	uint8
}

// Is_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_NextHeader_Union ensures that SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_NextHeader_Union_Uint8
// implements the SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_NextHeader_Union interface.
func (*SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_NextHeader_Union_Uint8) Is_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_NextHeader_Union() {}

// To_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_NextHeader_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_NextHeader_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match) To_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_NextHeader_Union(i interface{}) (SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_NextHeader_Union, error) {
	switch v := i.(type) {
	case E_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_NextHeader:
		return &SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_NextHeader_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_NextHeader{v}, nil
	case uint8:
		return &SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_NextHeader_Union_Uint8{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_NextHeader_Union, unknown union type, got: %T, want any of [E_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_NextHeader, uint8]", i, i)
	}
}


// SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Value_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/ipv6-filter/entry/match/destination-port/value within the YANG schema.
type SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Value_Union interface {
	Is_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Value_Union()
}

// SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Value_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value is used when /srl_nokia-acl/acl/ipv6-filter/entry/match/destination-port/value
// is to be set to a E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value value.
type SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Value_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value struct {
	E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value	E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value
}

// Is_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Value_Union ensures that SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Value_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value
// implements the SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Value_Union interface.
func (*SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Value_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value) Is_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Value_Union() {}

// SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Value_Union_Uint16 is used when /srl_nokia-acl/acl/ipv6-filter/entry/match/destination-port/value
// is to be set to a uint16 value.
type SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Value_Union_Uint16 struct {
	Uint16	uint16
}

// Is_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Value_Union ensures that SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Value_Union_Uint16
// implements the SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Value_Union interface.
func (*SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Value_Union_Uint16) Is_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Value_Union() {}

// To_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Value_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Value_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort) To_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Value_Union(i interface{}) (SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Value_Union, error) {
	switch v := i.(type) {
	case E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value:
		return &SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Value_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value{v}, nil
	case uint16:
		return &SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Value_Union_Uint16{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Value_Union, unknown union type, got: %T, want any of [E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Value, uint16]", i, i)
	}
}


// SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/ipv6-filter/entry/match/destination-port/range/end within the YANG schema.
type SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union interface {
	Is_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union()
}

// SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End is used when /srl_nokia-acl/acl/ipv6-filter/entry/match/destination-port/range/end
// is to be set to a E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End value.
type SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End struct {
	E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End	E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End
}

// Is_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union ensures that SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End
// implements the SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union interface.
func (*SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End) Is_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union() {}

// SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union_Uint16 is used when /srl_nokia-acl/acl/ipv6-filter/entry/match/destination-port/range/end
// is to be set to a uint16 value.
type SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union_Uint16 struct {
	Uint16	uint16
}

// Is_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union ensures that SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union_Uint16
// implements the SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union interface.
func (*SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union_Uint16) Is_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union() {}

// To_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range) To_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union(i interface{}) (SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union, error) {
	switch v := i.(type) {
	case E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End:
		return &SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End{v}, nil
	case uint16:
		return &SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union_Uint16{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range_End_Union, unknown union type, got: %T, want any of [E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_End, uint16]", i, i)
	}
}

// SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/ipv6-filter/entry/match/destination-port/range/start within the YANG schema.
type SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union interface {
	Is_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union()
}

// SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start is used when /srl_nokia-acl/acl/ipv6-filter/entry/match/destination-port/range/start
// is to be set to a E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start value.
type SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start struct {
	E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start	E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start
}

// Is_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union ensures that SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start
// implements the SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union interface.
func (*SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start) Is_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union() {}

// SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union_Uint16 is used when /srl_nokia-acl/acl/ipv6-filter/entry/match/destination-port/range/start
// is to be set to a uint16 value.
type SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union_Uint16 struct {
	Uint16	uint16
}

// Is_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union ensures that SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union_Uint16
// implements the SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union interface.
func (*SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union_Uint16) Is_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union() {}

// To_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range) To_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union(i interface{}) (SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union, error) {
	switch v := i.(type) {
	case E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start:
		return &SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start{v}, nil
	case uint16:
		return &SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union_Uint16{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_DestinationPort_Range_Start_Union, unknown union type, got: %T, want any of [E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_DestinationPort_Range_Start, uint16]", i, i)
	}
}


// SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_Icmp6_Type_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/ipv6-filter/entry/match/icmp6/type within the YANG schema.
type SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_Icmp6_Type_Union interface {
	Is_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_Icmp6_Type_Union()
}

// SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_Icmp6_Type_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_Icmp6_Type is used when /srl_nokia-acl/acl/ipv6-filter/entry/match/icmp6/type
// is to be set to a E_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_Icmp6_Type value.
type SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_Icmp6_Type_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_Icmp6_Type struct {
	E_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_Icmp6_Type	E_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_Icmp6_Type
}

// Is_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_Icmp6_Type_Union ensures that SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_Icmp6_Type_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_Icmp6_Type
// implements the SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_Icmp6_Type_Union interface.
func (*SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_Icmp6_Type_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_Icmp6_Type) Is_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_Icmp6_Type_Union() {}

// SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_Icmp6_Type_Union_Uint8 is used when /srl_nokia-acl/acl/ipv6-filter/entry/match/icmp6/type
// is to be set to a uint8 value.
type SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_Icmp6_Type_Union_Uint8 struct {
	Uint8	uint8
}

// Is_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_Icmp6_Type_Union ensures that SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_Icmp6_Type_Union_Uint8
// implements the SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_Icmp6_Type_Union interface.
func (*SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_Icmp6_Type_Union_Uint8) Is_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_Icmp6_Type_Union() {}

// To_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_Icmp6_Type_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_Icmp6_Type_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_Icmp6) To_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_Icmp6_Type_Union(i interface{}) (SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_Icmp6_Type_Union, error) {
	switch v := i.(type) {
	case E_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_Icmp6_Type:
		return &SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_Icmp6_Type_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_Icmp6_Type{v}, nil
	case uint8:
		return &SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_Icmp6_Type_Union_Uint8{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_Icmp6_Type_Union, unknown union type, got: %T, want any of [E_SrlNokiaAcl_Acl_CaptureFilter_Ipv6Filter_Entry_Match_Icmp6_Type, uint8]", i, i)
	}
}


// SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Value_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/ipv6-filter/entry/match/source-port/value within the YANG schema.
type SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Value_Union interface {
	Is_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Value_Union()
}

// SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Value_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value is used when /srl_nokia-acl/acl/ipv6-filter/entry/match/source-port/value
// is to be set to a E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value value.
type SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Value_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value struct {
	E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value	E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value
}

// Is_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Value_Union ensures that SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Value_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value
// implements the SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Value_Union interface.
func (*SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Value_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value) Is_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Value_Union() {}

// SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Value_Union_Uint16 is used when /srl_nokia-acl/acl/ipv6-filter/entry/match/source-port/value
// is to be set to a uint16 value.
type SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Value_Union_Uint16 struct {
	Uint16	uint16
}

// Is_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Value_Union ensures that SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Value_Union_Uint16
// implements the SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Value_Union interface.
func (*SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Value_Union_Uint16) Is_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Value_Union() {}

// To_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Value_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Value_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort) To_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Value_Union(i interface{}) (SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Value_Union, error) {
	switch v := i.(type) {
	case E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value:
		return &SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Value_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value{v}, nil
	case uint16:
		return &SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Value_Union_Uint16{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Value_Union, unknown union type, got: %T, want any of [E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Value, uint16]", i, i)
	}
}


// SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/ipv6-filter/entry/match/source-port/range/end within the YANG schema.
type SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union interface {
	Is_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union()
}

// SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End is used when /srl_nokia-acl/acl/ipv6-filter/entry/match/source-port/range/end
// is to be set to a E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End value.
type SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End struct {
	E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End	E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End
}

// Is_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union ensures that SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End
// implements the SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union interface.
func (*SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End) Is_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union() {}

// SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union_Uint16 is used when /srl_nokia-acl/acl/ipv6-filter/entry/match/source-port/range/end
// is to be set to a uint16 value.
type SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union_Uint16 struct {
	Uint16	uint16
}

// Is_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union ensures that SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union_Uint16
// implements the SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union interface.
func (*SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union_Uint16) Is_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union() {}

// To_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range) To_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union(i interface{}) (SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union, error) {
	switch v := i.(type) {
	case E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End:
		return &SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End{v}, nil
	case uint16:
		return &SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union_Uint16{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range_End_Union, unknown union type, got: %T, want any of [E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_End, uint16]", i, i)
	}
}

// SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-acl/acl/ipv6-filter/entry/match/source-port/range/start within the YANG schema.
type SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union interface {
	Is_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union()
}

// SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start is used when /srl_nokia-acl/acl/ipv6-filter/entry/match/source-port/range/start
// is to be set to a E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start value.
type SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start struct {
	E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start	E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start
}

// Is_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union ensures that SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start
// implements the SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union interface.
func (*SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start) Is_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union() {}

// SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union_Uint16 is used when /srl_nokia-acl/acl/ipv6-filter/entry/match/source-port/range/start
// is to be set to a uint16 value.
type SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union_Uint16 struct {
	Uint16	uint16
}

// Is_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union ensures that SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union_Uint16
// implements the SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union interface.
func (*SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union_Uint16) Is_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union() {}

// To_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range) To_SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union(i interface{}) (SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union, error) {
	switch v := i.(type) {
	case E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start:
		return &SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union_E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start{v}, nil
	case uint16:
		return &SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union_Uint16{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to SrlNokiaAcl_Acl_Ipv6Filter_Entry_Match_SourcePort_Range_Start_Union, unknown union type, got: %T, want any of [E_SrlNokiaAcl_Acl_CaptureFilter_Ipv4Filter_Entry_Match_SourcePort_Range_Start, uint16]", i, i)
	}
}








































































// SrlNokiaNetworkInstance_NetworkInstance_Aft_Entries_Entry_NextHop_State_OriginProtocol_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-network-instance/network-instance/aft/entries/entry/next-hop/state/origin-protocol within the YANG schema.
type SrlNokiaNetworkInstance_NetworkInstance_Aft_Entries_Entry_NextHop_State_OriginProtocol_Union interface {
	Is_SrlNokiaNetworkInstance_NetworkInstance_Aft_Entries_Entry_NextHop_State_OriginProtocol_Union()
}

// SrlNokiaNetworkInstance_NetworkInstance_Aft_Entries_Entry_NextHop_State_OriginProtocol_Union_E_SrlNokiaAft_InstallProtocolType is used when /srl_nokia-network-instance/network-instance/aft/entries/entry/next-hop/state/origin-protocol
// is to be set to a E_SrlNokiaAft_InstallProtocolType value.
type SrlNokiaNetworkInstance_NetworkInstance_Aft_Entries_Entry_NextHop_State_OriginProtocol_Union_E_SrlNokiaAft_InstallProtocolType struct {
	E_SrlNokiaAft_InstallProtocolType	E_SrlNokiaAft_InstallProtocolType
}

// Is_SrlNokiaNetworkInstance_NetworkInstance_Aft_Entries_Entry_NextHop_State_OriginProtocol_Union ensures that SrlNokiaNetworkInstance_NetworkInstance_Aft_Entries_Entry_NextHop_State_OriginProtocol_Union_E_SrlNokiaAft_InstallProtocolType
// implements the SrlNokiaNetworkInstance_NetworkInstance_Aft_Entries_Entry_NextHop_State_OriginProtocol_Union interface.
func (*SrlNokiaNetworkInstance_NetworkInstance_Aft_Entries_Entry_NextHop_State_OriginProtocol_Union_E_SrlNokiaAft_InstallProtocolType) Is_SrlNokiaNetworkInstance_NetworkInstance_Aft_Entries_Entry_NextHop_State_OriginProtocol_Union() {}

// SrlNokiaNetworkInstance_NetworkInstance_Aft_Entries_Entry_NextHop_State_OriginProtocol_Union_String is used when /srl_nokia-network-instance/network-instance/aft/entries/entry/next-hop/state/origin-protocol
// is to be set to a string value.
type SrlNokiaNetworkInstance_NetworkInstance_Aft_Entries_Entry_NextHop_State_OriginProtocol_Union_String struct {
	String	string
}

// Is_SrlNokiaNetworkInstance_NetworkInstance_Aft_Entries_Entry_NextHop_State_OriginProtocol_Union ensures that SrlNokiaNetworkInstance_NetworkInstance_Aft_Entries_Entry_NextHop_State_OriginProtocol_Union_String
// implements the SrlNokiaNetworkInstance_NetworkInstance_Aft_Entries_Entry_NextHop_State_OriginProtocol_Union interface.
func (*SrlNokiaNetworkInstance_NetworkInstance_Aft_Entries_Entry_NextHop_State_OriginProtocol_Union_String) Is_SrlNokiaNetworkInstance_NetworkInstance_Aft_Entries_Entry_NextHop_State_OriginProtocol_Union() {}

// To_SrlNokiaNetworkInstance_NetworkInstance_Aft_Entries_Entry_NextHop_State_OriginProtocol_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaNetworkInstance_NetworkInstance_Aft_Entries_Entry_NextHop_State_OriginProtocol_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Aft_Entries_Entry_NextHop_State) To_SrlNokiaNetworkInstance_NetworkInstance_Aft_Entries_Entry_NextHop_State_OriginProtocol_Union(i interface{}) (SrlNokiaNetworkInstance_NetworkInstance_Aft_Entries_Entry_NextHop_State_OriginProtocol_Union, error) {
	switch v := i.(type) {
	case E_SrlNokiaAft_InstallProtocolType:
		return &SrlNokiaNetworkInstance_NetworkInstance_Aft_Entries_Entry_NextHop_State_OriginProtocol_Union_E_SrlNokiaAft_InstallProtocolType{v}, nil
	case string:
		return &SrlNokiaNetworkInstance_NetworkInstance_Aft_Entries_Entry_NextHop_State_OriginProtocol_Union_String{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to SrlNokiaNetworkInstance_NetworkInstance_Aft_Entries_Entry_NextHop_State_OriginProtocol_Union, unknown union type, got: %T, want any of [E_SrlNokiaAft_InstallProtocolType, string]", i, i)
	}
}





// SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route_Communities_Add_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-network-instance/network-instance/aggregate-routes/route/communities/add within the YANG schema.
type SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route_Communities_Add_Union interface {
	Is_SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route_Communities_Add_Union()
}

// SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route_Communities_Add_Union_E_SrlNokiaPolicyTypes_BgpWellKnownCommunity is used when /srl_nokia-network-instance/network-instance/aggregate-routes/route/communities/add
// is to be set to a E_SrlNokiaPolicyTypes_BgpWellKnownCommunity value.
type SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route_Communities_Add_Union_E_SrlNokiaPolicyTypes_BgpWellKnownCommunity struct {
	E_SrlNokiaPolicyTypes_BgpWellKnownCommunity	E_SrlNokiaPolicyTypes_BgpWellKnownCommunity
}

// Is_SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route_Communities_Add_Union ensures that SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route_Communities_Add_Union_E_SrlNokiaPolicyTypes_BgpWellKnownCommunity
// implements the SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route_Communities_Add_Union interface.
func (*SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route_Communities_Add_Union_E_SrlNokiaPolicyTypes_BgpWellKnownCommunity) Is_SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route_Communities_Add_Union() {}

// SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route_Communities_Add_Union_String is used when /srl_nokia-network-instance/network-instance/aggregate-routes/route/communities/add
// is to be set to a string value.
type SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route_Communities_Add_Union_String struct {
	String	string
}

// Is_SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route_Communities_Add_Union ensures that SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route_Communities_Add_Union_String
// implements the SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route_Communities_Add_Union interface.
func (*SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route_Communities_Add_Union_String) Is_SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route_Communities_Add_Union() {}

// To_SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route_Communities_Add_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route_Communities_Add_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route_Communities) To_SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route_Communities_Add_Union(i interface{}) (SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route_Communities_Add_Union, error) {
	switch v := i.(type) {
	case E_SrlNokiaPolicyTypes_BgpWellKnownCommunity:
		return &SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route_Communities_Add_Union_E_SrlNokiaPolicyTypes_BgpWellKnownCommunity{v}, nil
	case string:
		return &SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route_Communities_Add_Union_String{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to SrlNokiaNetworkInstance_NetworkInstance_AggregateRoutes_Route_Communities_Add_Union, unknown union type, got: %T, want any of [E_SrlNokiaPolicyTypes_BgpWellKnownCommunity, string]", i, i)
	}
}
















































// SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticMplsEntry_TopLabel_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-network-instance/network-instance/mpls/static-mpls-entry/top-label within the YANG schema.
type SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticMplsEntry_TopLabel_Union interface {
	Is_SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticMplsEntry_TopLabel_Union()
}

// SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticMplsEntry_TopLabel_Union_E_SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticMplsEntry_TopLabel is used when /srl_nokia-network-instance/network-instance/mpls/static-mpls-entry/top-label
// is to be set to a E_SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticMplsEntry_TopLabel value.
type SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticMplsEntry_TopLabel_Union_E_SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticMplsEntry_TopLabel struct {
	E_SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticMplsEntry_TopLabel	E_SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticMplsEntry_TopLabel
}

// Is_SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticMplsEntry_TopLabel_Union ensures that SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticMplsEntry_TopLabel_Union_E_SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticMplsEntry_TopLabel
// implements the SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticMplsEntry_TopLabel_Union interface.
func (*SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticMplsEntry_TopLabel_Union_E_SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticMplsEntry_TopLabel) Is_SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticMplsEntry_TopLabel_Union() {}

// SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticMplsEntry_TopLabel_Union_Uint32 is used when /srl_nokia-network-instance/network-instance/mpls/static-mpls-entry/top-label
// is to be set to a uint32 value.
type SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticMplsEntry_TopLabel_Union_Uint32 struct {
	Uint32	uint32
}

// Is_SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticMplsEntry_TopLabel_Union ensures that SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticMplsEntry_TopLabel_Union_Uint32
// implements the SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticMplsEntry_TopLabel_Union interface.
func (*SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticMplsEntry_TopLabel_Union_Uint32) Is_SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticMplsEntry_TopLabel_Union() {}

// To_SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticMplsEntry_TopLabel_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticMplsEntry_TopLabel_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticMplsEntry) To_SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticMplsEntry_TopLabel_Union(i interface{}) (SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticMplsEntry_TopLabel_Union, error) {
	switch v := i.(type) {
	case E_SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticMplsEntry_TopLabel:
		return &SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticMplsEntry_TopLabel_Union_E_SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticMplsEntry_TopLabel{v}, nil
	case uint32:
		return &SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticMplsEntry_TopLabel_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticMplsEntry_TopLabel_Union, unknown union type, got: %T, want any of [E_SrlNokiaNetworkInstance_NetworkInstance_Mpls_StaticMplsEntry_TopLabel, uint32]", i, i)
	}
}






// SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_PushedMplsLabelStack_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-network-instance/network-instance/next-hop-groups/group/nexthop/pushed-mpls-label-stack within the YANG schema.
type SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_PushedMplsLabelStack_Union interface {
	Is_SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_PushedMplsLabelStack_Union()
}

// SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_PushedMplsLabelStack_Union_E_SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_PushedMplsLabelStack is used when /srl_nokia-network-instance/network-instance/next-hop-groups/group/nexthop/pushed-mpls-label-stack
// is to be set to a E_SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_PushedMplsLabelStack value.
type SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_PushedMplsLabelStack_Union_E_SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_PushedMplsLabelStack struct {
	E_SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_PushedMplsLabelStack	E_SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_PushedMplsLabelStack
}

// Is_SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_PushedMplsLabelStack_Union ensures that SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_PushedMplsLabelStack_Union_E_SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_PushedMplsLabelStack
// implements the SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_PushedMplsLabelStack_Union interface.
func (*SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_PushedMplsLabelStack_Union_E_SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_PushedMplsLabelStack) Is_SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_PushedMplsLabelStack_Union() {}

// SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_PushedMplsLabelStack_Union_Uint32 is used when /srl_nokia-network-instance/network-instance/next-hop-groups/group/nexthop/pushed-mpls-label-stack
// is to be set to a uint32 value.
type SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_PushedMplsLabelStack_Union_Uint32 struct {
	Uint32	uint32
}

// Is_SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_PushedMplsLabelStack_Union ensures that SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_PushedMplsLabelStack_Union_Uint32
// implements the SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_PushedMplsLabelStack_Union interface.
func (*SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_PushedMplsLabelStack_Union_Uint32) Is_SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_PushedMplsLabelStack_Union() {}

// To_SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_PushedMplsLabelStack_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_PushedMplsLabelStack_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop) To_SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_PushedMplsLabelStack_Union(i interface{}) (SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_PushedMplsLabelStack_Union, error) {
	switch v := i.(type) {
	case E_SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_PushedMplsLabelStack:
		return &SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_PushedMplsLabelStack_Union_E_SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_PushedMplsLabelStack{v}, nil
	case uint32:
		return &SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_PushedMplsLabelStack_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_PushedMplsLabelStack_Union, unknown union type, got: %T, want any of [E_SrlNokiaNetworkInstance_NetworkInstance_NextHopGroups_Group_Nexthop_PushedMplsLabelStack, uint32]", i, i)
	}
}







































































// SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Mpls_Route_Label_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-network-instance/network-instance/route-table/mpls/route/label within the YANG schema.
type SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Mpls_Route_Label_Union interface {
	Is_SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Mpls_Route_Label_Union()
}

// SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Mpls_Route_Label_Union_E_SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Mpls_Route_Label is used when /srl_nokia-network-instance/network-instance/route-table/mpls/route/label
// is to be set to a E_SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Mpls_Route_Label value.
type SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Mpls_Route_Label_Union_E_SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Mpls_Route_Label struct {
	E_SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Mpls_Route_Label	E_SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Mpls_Route_Label
}

// Is_SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Mpls_Route_Label_Union ensures that SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Mpls_Route_Label_Union_E_SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Mpls_Route_Label
// implements the SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Mpls_Route_Label_Union interface.
func (*SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Mpls_Route_Label_Union_E_SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Mpls_Route_Label) Is_SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Mpls_Route_Label_Union() {}

// SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Mpls_Route_Label_Union_Uint32 is used when /srl_nokia-network-instance/network-instance/route-table/mpls/route/label
// is to be set to a uint32 value.
type SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Mpls_Route_Label_Union_Uint32 struct {
	Uint32	uint32
}

// Is_SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Mpls_Route_Label_Union ensures that SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Mpls_Route_Label_Union_Uint32
// implements the SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Mpls_Route_Label_Union interface.
func (*SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Mpls_Route_Label_Union_Uint32) Is_SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Mpls_Route_Label_Union() {}

// To_SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Mpls_Route_Label_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Mpls_Route_Label_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Mpls_Route) To_SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Mpls_Route_Label_Union(i interface{}) (SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Mpls_Route_Label_Union, error) {
	switch v := i.(type) {
	case E_SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Mpls_Route_Label:
		return &SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Mpls_Route_Label_Union_E_SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Mpls_Route_Label{v}, nil
	case uint32:
		return &SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Mpls_Route_Label_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Mpls_Route_Label_Union, unknown union type, got: %T, want any of [E_SrlNokiaNetworkInstance_NetworkInstance_RouteTable_Mpls_Route_Label, uint32]", i, i)
	}
}



// SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_PushedMplsLabelStack_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-network-instance/network-instance/route-table/next-hop/pushed-mpls-label-stack within the YANG schema.
type SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_PushedMplsLabelStack_Union interface {
	Is_SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_PushedMplsLabelStack_Union()
}

// SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_PushedMplsLabelStack_Union_E_SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_PushedMplsLabelStack is used when /srl_nokia-network-instance/network-instance/route-table/next-hop/pushed-mpls-label-stack
// is to be set to a E_SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_PushedMplsLabelStack value.
type SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_PushedMplsLabelStack_Union_E_SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_PushedMplsLabelStack struct {
	E_SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_PushedMplsLabelStack	E_SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_PushedMplsLabelStack
}

// Is_SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_PushedMplsLabelStack_Union ensures that SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_PushedMplsLabelStack_Union_E_SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_PushedMplsLabelStack
// implements the SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_PushedMplsLabelStack_Union interface.
func (*SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_PushedMplsLabelStack_Union_E_SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_PushedMplsLabelStack) Is_SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_PushedMplsLabelStack_Union() {}

// SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_PushedMplsLabelStack_Union_Uint32 is used when /srl_nokia-network-instance/network-instance/route-table/next-hop/pushed-mpls-label-stack
// is to be set to a uint32 value.
type SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_PushedMplsLabelStack_Union_Uint32 struct {
	Uint32	uint32
}

// Is_SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_PushedMplsLabelStack_Union ensures that SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_PushedMplsLabelStack_Union_Uint32
// implements the SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_PushedMplsLabelStack_Union interface.
func (*SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_PushedMplsLabelStack_Union_Uint32) Is_SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_PushedMplsLabelStack_Union() {}

// To_SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_PushedMplsLabelStack_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_PushedMplsLabelStack_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop) To_SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_PushedMplsLabelStack_Union(i interface{}) (SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_PushedMplsLabelStack_Union, error) {
	switch v := i.(type) {
	case E_SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_PushedMplsLabelStack:
		return &SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_PushedMplsLabelStack_Union_E_SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_PushedMplsLabelStack{v}, nil
	case uint32:
		return &SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_PushedMplsLabelStack_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_PushedMplsLabelStack_Union, unknown union type, got: %T, want any of [E_SrlNokiaNetworkInstance_NetworkInstance_RouteTable_NextHop_PushedMplsLabelStack, uint32]", i, i)
	}
}























// SrlNokiaPlatform_Platform_Control_Cpu_Index_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-platform/platform/control/cpu/index within the YANG schema.
type SrlNokiaPlatform_Platform_Control_Cpu_Index_Union interface {
	Is_SrlNokiaPlatform_Platform_Control_Cpu_Index_Union()
}

// SrlNokiaPlatform_Platform_Control_Cpu_Index_Union_E_SrlNokiaPlatform_Platform_Control_Cpu_Index is used when /srl_nokia-platform/platform/control/cpu/index
// is to be set to a E_SrlNokiaPlatform_Platform_Control_Cpu_Index value.
type SrlNokiaPlatform_Platform_Control_Cpu_Index_Union_E_SrlNokiaPlatform_Platform_Control_Cpu_Index struct {
	E_SrlNokiaPlatform_Platform_Control_Cpu_Index	E_SrlNokiaPlatform_Platform_Control_Cpu_Index
}

// Is_SrlNokiaPlatform_Platform_Control_Cpu_Index_Union ensures that SrlNokiaPlatform_Platform_Control_Cpu_Index_Union_E_SrlNokiaPlatform_Platform_Control_Cpu_Index
// implements the SrlNokiaPlatform_Platform_Control_Cpu_Index_Union interface.
func (*SrlNokiaPlatform_Platform_Control_Cpu_Index_Union_E_SrlNokiaPlatform_Platform_Control_Cpu_Index) Is_SrlNokiaPlatform_Platform_Control_Cpu_Index_Union() {}

// SrlNokiaPlatform_Platform_Control_Cpu_Index_Union_Uint32 is used when /srl_nokia-platform/platform/control/cpu/index
// is to be set to a uint32 value.
type SrlNokiaPlatform_Platform_Control_Cpu_Index_Union_Uint32 struct {
	Uint32	uint32
}

// Is_SrlNokiaPlatform_Platform_Control_Cpu_Index_Union ensures that SrlNokiaPlatform_Platform_Control_Cpu_Index_Union_Uint32
// implements the SrlNokiaPlatform_Platform_Control_Cpu_Index_Union interface.
func (*SrlNokiaPlatform_Platform_Control_Cpu_Index_Union_Uint32) Is_SrlNokiaPlatform_Platform_Control_Cpu_Index_Union() {}

// To_SrlNokiaPlatform_Platform_Control_Cpu_Index_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaPlatform_Platform_Control_Cpu_Index_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaPlatform_Platform_Control_Cpu) To_SrlNokiaPlatform_Platform_Control_Cpu_Index_Union(i interface{}) (SrlNokiaPlatform_Platform_Control_Cpu_Index_Union, error) {
	switch v := i.(type) {
	case E_SrlNokiaPlatform_Platform_Control_Cpu_Index:
		return &SrlNokiaPlatform_Platform_Control_Cpu_Index_Union_E_SrlNokiaPlatform_Platform_Control_Cpu_Index{v}, nil
	case uint32:
		return &SrlNokiaPlatform_Platform_Control_Cpu_Index_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to SrlNokiaPlatform_Platform_Control_Cpu_Index_Union, unknown union type, got: %T, want any of [E_SrlNokiaPlatform_Platform_Control_Cpu_Index, uint32]", i, i)
	}
}
































































// SrlNokiaQos_Qos_RewriteRules_DscpPolicy_Map_Dscp_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-qos/qos/rewrite-rules/dscp-policy/map/dscp within the YANG schema.
type SrlNokiaQos_Qos_RewriteRules_DscpPolicy_Map_Dscp_Union interface {
	Is_SrlNokiaQos_Qos_RewriteRules_DscpPolicy_Map_Dscp_Union()
}

// SrlNokiaQos_Qos_RewriteRules_DscpPolicy_Map_Dscp_Union_E_SrlNokiaQos_DscpName_Enum is used when /srl_nokia-qos/qos/rewrite-rules/dscp-policy/map/dscp
// is to be set to a E_SrlNokiaQos_DscpName_Enum value.
type SrlNokiaQos_Qos_RewriteRules_DscpPolicy_Map_Dscp_Union_E_SrlNokiaQos_DscpName_Enum struct {
	E_SrlNokiaQos_DscpName_Enum	E_SrlNokiaQos_DscpName_Enum
}

// Is_SrlNokiaQos_Qos_RewriteRules_DscpPolicy_Map_Dscp_Union ensures that SrlNokiaQos_Qos_RewriteRules_DscpPolicy_Map_Dscp_Union_E_SrlNokiaQos_DscpName_Enum
// implements the SrlNokiaQos_Qos_RewriteRules_DscpPolicy_Map_Dscp_Union interface.
func (*SrlNokiaQos_Qos_RewriteRules_DscpPolicy_Map_Dscp_Union_E_SrlNokiaQos_DscpName_Enum) Is_SrlNokiaQos_Qos_RewriteRules_DscpPolicy_Map_Dscp_Union() {}

// SrlNokiaQos_Qos_RewriteRules_DscpPolicy_Map_Dscp_Union_Uint8 is used when /srl_nokia-qos/qos/rewrite-rules/dscp-policy/map/dscp
// is to be set to a uint8 value.
type SrlNokiaQos_Qos_RewriteRules_DscpPolicy_Map_Dscp_Union_Uint8 struct {
	Uint8	uint8
}

// Is_SrlNokiaQos_Qos_RewriteRules_DscpPolicy_Map_Dscp_Union ensures that SrlNokiaQos_Qos_RewriteRules_DscpPolicy_Map_Dscp_Union_Uint8
// implements the SrlNokiaQos_Qos_RewriteRules_DscpPolicy_Map_Dscp_Union interface.
func (*SrlNokiaQos_Qos_RewriteRules_DscpPolicy_Map_Dscp_Union_Uint8) Is_SrlNokiaQos_Qos_RewriteRules_DscpPolicy_Map_Dscp_Union() {}

// To_SrlNokiaQos_Qos_RewriteRules_DscpPolicy_Map_Dscp_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaQos_Qos_RewriteRules_DscpPolicy_Map_Dscp_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaQos_Qos_RewriteRules_DscpPolicy_Map) To_SrlNokiaQos_Qos_RewriteRules_DscpPolicy_Map_Dscp_Union(i interface{}) (SrlNokiaQos_Qos_RewriteRules_DscpPolicy_Map_Dscp_Union, error) {
	switch v := i.(type) {
	case E_SrlNokiaQos_DscpName_Enum:
		return &SrlNokiaQos_Qos_RewriteRules_DscpPolicy_Map_Dscp_Union_E_SrlNokiaQos_DscpName_Enum{v}, nil
	case uint8:
		return &SrlNokiaQos_Qos_RewriteRules_DscpPolicy_Map_Dscp_Union_Uint8{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to SrlNokiaQos_Qos_RewriteRules_DscpPolicy_Map_Dscp_Union, unknown union type, got: %T, want any of [E_SrlNokiaQos_DscpName_Enum, uint8]", i, i)
	}
}






// SrlNokiaRoutingPolicy_RoutingPolicy_CommunitySet_Member_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-routing-policy/routing-policy/community-set/member within the YANG schema.
type SrlNokiaRoutingPolicy_RoutingPolicy_CommunitySet_Member_Union interface {
	Is_SrlNokiaRoutingPolicy_RoutingPolicy_CommunitySet_Member_Union()
}

// SrlNokiaRoutingPolicy_RoutingPolicy_CommunitySet_Member_Union_E_SrlNokiaPolicyTypes_BgpWellKnownCommunity is used when /srl_nokia-routing-policy/routing-policy/community-set/member
// is to be set to a E_SrlNokiaPolicyTypes_BgpWellKnownCommunity value.
type SrlNokiaRoutingPolicy_RoutingPolicy_CommunitySet_Member_Union_E_SrlNokiaPolicyTypes_BgpWellKnownCommunity struct {
	E_SrlNokiaPolicyTypes_BgpWellKnownCommunity	E_SrlNokiaPolicyTypes_BgpWellKnownCommunity
}

// Is_SrlNokiaRoutingPolicy_RoutingPolicy_CommunitySet_Member_Union ensures that SrlNokiaRoutingPolicy_RoutingPolicy_CommunitySet_Member_Union_E_SrlNokiaPolicyTypes_BgpWellKnownCommunity
// implements the SrlNokiaRoutingPolicy_RoutingPolicy_CommunitySet_Member_Union interface.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_CommunitySet_Member_Union_E_SrlNokiaPolicyTypes_BgpWellKnownCommunity) Is_SrlNokiaRoutingPolicy_RoutingPolicy_CommunitySet_Member_Union() {}

// SrlNokiaRoutingPolicy_RoutingPolicy_CommunitySet_Member_Union_String is used when /srl_nokia-routing-policy/routing-policy/community-set/member
// is to be set to a string value.
type SrlNokiaRoutingPolicy_RoutingPolicy_CommunitySet_Member_Union_String struct {
	String	string
}

// Is_SrlNokiaRoutingPolicy_RoutingPolicy_CommunitySet_Member_Union ensures that SrlNokiaRoutingPolicy_RoutingPolicy_CommunitySet_Member_Union_String
// implements the SrlNokiaRoutingPolicy_RoutingPolicy_CommunitySet_Member_Union interface.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_CommunitySet_Member_Union_String) Is_SrlNokiaRoutingPolicy_RoutingPolicy_CommunitySet_Member_Union() {}

// To_SrlNokiaRoutingPolicy_RoutingPolicy_CommunitySet_Member_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaRoutingPolicy_RoutingPolicy_CommunitySet_Member_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_CommunitySet) To_SrlNokiaRoutingPolicy_RoutingPolicy_CommunitySet_Member_Union(i interface{}) (SrlNokiaRoutingPolicy_RoutingPolicy_CommunitySet_Member_Union, error) {
	switch v := i.(type) {
	case E_SrlNokiaPolicyTypes_BgpWellKnownCommunity:
		return &SrlNokiaRoutingPolicy_RoutingPolicy_CommunitySet_Member_Union_E_SrlNokiaPolicyTypes_BgpWellKnownCommunity{v}, nil
	case string:
		return &SrlNokiaRoutingPolicy_RoutingPolicy_CommunitySet_Member_Union_String{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to SrlNokiaRoutingPolicy_RoutingPolicy_CommunitySet_Member_Union, unknown union type, got: %T, want any of [E_SrlNokiaPolicyTypes_BgpWellKnownCommunity, string]", i, i)
	}
}







// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-routing-policy/routing-policy/policy/default-action/accept/bgp/as-path/prepend/as-number within the YANG schema.
type SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber_Union interface {
	Is_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber_Union()
}

// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber_Union_E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber is used when /srl_nokia-routing-policy/routing-policy/policy/default-action/accept/bgp/as-path/prepend/as-number
// is to be set to a E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber value.
type SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber_Union_E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber struct {
	E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber	E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber
}

// Is_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber_Union ensures that SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber_Union_E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber
// implements the SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber_Union interface.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber_Union_E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber) Is_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber_Union() {}

// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber_Union_Uint32 is used when /srl_nokia-routing-policy/routing-policy/policy/default-action/accept/bgp/as-path/prepend/as-number
// is to be set to a uint32 value.
type SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber_Union_Uint32 struct {
	Uint32	uint32
}

// Is_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber_Union ensures that SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber_Union_Uint32
// implements the SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber_Union interface.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber_Union_Uint32) Is_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber_Union() {}

// To_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend) To_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber_Union(i interface{}) (SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber_Union, error) {
	switch v := i.(type) {
	case E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber:
		return &SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber_Union_E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber{v}, nil
	case uint32:
		return &SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber_Union, unknown union type, got: %T, want any of [E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber, uint32]", i, i)
	}
}













// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_AsPath_Prepend_AsNumber_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-routing-policy/routing-policy/policy/statement/action/accept/bgp/as-path/prepend/as-number within the YANG schema.
type SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_AsPath_Prepend_AsNumber_Union interface {
	Is_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_AsPath_Prepend_AsNumber_Union()
}

// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_AsPath_Prepend_AsNumber_Union_E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber is used when /srl_nokia-routing-policy/routing-policy/policy/statement/action/accept/bgp/as-path/prepend/as-number
// is to be set to a E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber value.
type SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_AsPath_Prepend_AsNumber_Union_E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber struct {
	E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber	E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber
}

// Is_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_AsPath_Prepend_AsNumber_Union ensures that SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_AsPath_Prepend_AsNumber_Union_E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber
// implements the SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_AsPath_Prepend_AsNumber_Union interface.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_AsPath_Prepend_AsNumber_Union_E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber) Is_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_AsPath_Prepend_AsNumber_Union() {}

// SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_AsPath_Prepend_AsNumber_Union_Uint32 is used when /srl_nokia-routing-policy/routing-policy/policy/statement/action/accept/bgp/as-path/prepend/as-number
// is to be set to a uint32 value.
type SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_AsPath_Prepend_AsNumber_Union_Uint32 struct {
	Uint32	uint32
}

// Is_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_AsPath_Prepend_AsNumber_Union ensures that SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_AsPath_Prepend_AsNumber_Union_Uint32
// implements the SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_AsPath_Prepend_AsNumber_Union interface.
func (*SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_AsPath_Prepend_AsNumber_Union_Uint32) Is_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_AsPath_Prepend_AsNumber_Union() {}

// To_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_AsPath_Prepend_AsNumber_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_AsPath_Prepend_AsNumber_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_AsPath_Prepend) To_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_AsPath_Prepend_AsNumber_Union(i interface{}) (SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_AsPath_Prepend_AsNumber_Union, error) {
	switch v := i.(type) {
	case E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber:
		return &SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_AsPath_Prepend_AsNumber_Union_E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber{v}, nil
	case uint32:
		return &SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_AsPath_Prepend_AsNumber_Union_Uint32{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to SrlNokiaRoutingPolicy_RoutingPolicy_Policy_Statement_Action_Accept_Bgp_AsPath_Prepend_AsNumber_Union, unknown union type, got: %T, want any of [E_SrlNokiaRoutingPolicy_RoutingPolicy_Policy_DefaultAction_Accept_Bgp_AsPath_Prepend_AsNumber, uint32]", i, i)
	}
}























































// SrlNokiaSystem_System_Lldp_Interface_Neighbor_PortId_Union is an interface that is implemented by valid types for the union
// for the leaf /srl_nokia-system/system/lldp/interface/neighbor/port-id within the YANG schema.
type SrlNokiaSystem_System_Lldp_Interface_Neighbor_PortId_Union interface {
	Is_SrlNokiaSystem_System_Lldp_Interface_Neighbor_PortId_Union()
}

// SrlNokiaSystem_System_Lldp_Interface_Neighbor_PortId_Union_Binary is used when /srl_nokia-system/system/lldp/interface/neighbor/port-id
// is to be set to a Binary value.
type SrlNokiaSystem_System_Lldp_Interface_Neighbor_PortId_Union_Binary struct {
	Binary	Binary
}

// Is_SrlNokiaSystem_System_Lldp_Interface_Neighbor_PortId_Union ensures that SrlNokiaSystem_System_Lldp_Interface_Neighbor_PortId_Union_Binary
// implements the SrlNokiaSystem_System_Lldp_Interface_Neighbor_PortId_Union interface.
func (*SrlNokiaSystem_System_Lldp_Interface_Neighbor_PortId_Union_Binary) Is_SrlNokiaSystem_System_Lldp_Interface_Neighbor_PortId_Union() {}

// SrlNokiaSystem_System_Lldp_Interface_Neighbor_PortId_Union_String is used when /srl_nokia-system/system/lldp/interface/neighbor/port-id
// is to be set to a string value.
type SrlNokiaSystem_System_Lldp_Interface_Neighbor_PortId_Union_String struct {
	String	string
}

// Is_SrlNokiaSystem_System_Lldp_Interface_Neighbor_PortId_Union ensures that SrlNokiaSystem_System_Lldp_Interface_Neighbor_PortId_Union_String
// implements the SrlNokiaSystem_System_Lldp_Interface_Neighbor_PortId_Union interface.
func (*SrlNokiaSystem_System_Lldp_Interface_Neighbor_PortId_Union_String) Is_SrlNokiaSystem_System_Lldp_Interface_Neighbor_PortId_Union() {}

// To_SrlNokiaSystem_System_Lldp_Interface_Neighbor_PortId_Union takes an input interface{} and attempts to convert it to a struct
// which implements the SrlNokiaSystem_System_Lldp_Interface_Neighbor_PortId_Union union. It returns an error if the interface{} supplied
// cannot be converted to a type within the union.
func (t *SrlNokiaSystem_System_Lldp_Interface_Neighbor) To_SrlNokiaSystem_System_Lldp_Interface_Neighbor_PortId_Union(i interface{}) (SrlNokiaSystem_System_Lldp_Interface_Neighbor_PortId_Union, error) {
	switch v := i.(type) {
	case Binary:
		return &SrlNokiaSystem_System_Lldp_Interface_Neighbor_PortId_Union_Binary{v}, nil
	case string:
		return &SrlNokiaSystem_System_Lldp_Interface_Neighbor_PortId_Union_String{v}, nil
	default:
		return nil, fmt.Errorf("cannot convert %v to SrlNokiaSystem_System_Lldp_Interface_Neighbor_PortId_Union, unknown union type, got: %T, want any of [Binary, string]", i, i)
	}
}






















































