/*
Package tfsrl is a generated package which contains definitions
of structs which represent a Terraform resource. 

This package was generated by ygocodegen
using the following YANG input files:
	- yang/srl
Imported modules were sourced from:
	- yang/ietf
*/
package tfsrl

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/google/gnxi/utils/xpath"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/openconfig/gnmi/proto/gnmi"
	"google.golang.org/grpc/metadata"
)

// resourceAclIpv4FilterString function
func resourceAclIpv4FilterString(d resourceIDStringer) string {
	return resourceIDString(d, "acl_ipv4_filter")
}

// resourceAclIpv4Filter function
func resourceAclIpv4Filter() *schema.Resource {
	return &schema.Resource{
		CreateContext: resourceAclIpv4FilterCreate,
		ReadContext:   resourceAclIpv4FilterRead,
		UpdateContext: resourceAclIpv4FilterUpdate,
		DeleteContext: resourceAclIpv4FilterDelete,

		Importer: &schema.ResourceImporter{
			StateContext: schema.ImportStatePassthroughContext,
		},

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(5 * time.Minute),
			Read:   schema.DefaultTimeout(5 * time.Minute),
			Update: schema.DefaultTimeout(5 * time.Minute),
			Delete: schema.DefaultTimeout(5 * time.Minute),
		},
		Schema: map[string]*schema.Schema{
            "description": {
                Type:     schema.TypeString,
                Optional: true,
            },
            "entry": {
                Type:     schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                	Schema: map[string]*schema.Schema{
                        "action": {
                            Type:     schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                            	Schema: map[string]*schema.Schema{
                                    "accept": {
                                        Type:     schema.TypeList,
                                        Optional: true,
                                        MaxItems: 1,
                                        Elem: &schema.Resource{
                                        	Schema: map[string]*schema.Schema{
                                                "log": {
                                                    Type:     schema.TypeBool,
                                                    Optional: true,
                                                    Default: false,
                                                },
                                            },
                                        },
                                    },
                                    "drop": {
                                        Type:     schema.TypeList,
                                        Optional: true,
                                        MaxItems: 1,
                                        Elem: &schema.Resource{
                                        	Schema: map[string]*schema.Schema{
                                                "log": {
                                                    Type:     schema.TypeBool,
                                                    Optional: true,
                                                    Default: false,
                                                },
                                            },
                                        },
                                    },
                                },
                            },
                        },
                        "description": {
                            Type:     schema.TypeString,
                            Optional: true,
                        },
                        "match": {
                            Type:     schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                            	Schema: map[string]*schema.Schema{
                                    "destination_address": {
                                        Type:     schema.TypeString,
                                        Optional: true,
                                    },
                                    "destination_port": {
                                        Type:     schema.TypeList,
                                        Optional: true,
                                        MaxItems: 1,
                                        Elem: &schema.Resource{
                                        	Schema: map[string]*schema.Schema{
                                                "operator": {
                                                    Type:     schema.TypeString,
                                                    Optional: true,
                                                },
                                                "range": {
                                                    Type:     schema.TypeList,
                                                    Optional: true,
                                                    MaxItems: 1,
                                                    Elem: &schema.Resource{
                                                    	Schema: map[string]*schema.Schema{
                                                            "end": {
                                                                Type:     schema.TypeString,
                                                                Optional: true,
                                                            },
                                                            "start": {
                                                                Type:     schema.TypeString,
                                                                Optional: true,
                                                            },
                                                        },
                                                    },
                                                },
                                                "value": {
                                                    Type:     schema.TypeString,
                                                    Optional: true,
                                                },
                                            },
                                        },
                                    },
                                    "first_fragment": {
                                        Type:     schema.TypeBool,
                                        Optional: true,
                                    },
                                    "fragment": {
                                        Type:     schema.TypeBool,
                                        Optional: true,
                                    },
                                    "icmp": {
                                        Type:     schema.TypeList,
                                        Optional: true,
                                        MaxItems: 1,
                                        Elem: &schema.Resource{
                                        	Schema: map[string]*schema.Schema{
                                                "code": {
                                                    Type:     schema.TypeInt,
                                                    Optional: true,
                                                },
                                                "type": {
                                                    Type:     schema.TypeString,
                                                    Optional: true,
                                                },
                                            },
                                        },
                                    },
                                    "protocol": {
                                        Type:     schema.TypeString,
                                        Optional: true,
                                    },
                                    "source_address": {
                                        Type:     schema.TypeString,
                                        Optional: true,
                                    },
                                    "source_port": {
                                        Type:     schema.TypeList,
                                        Optional: true,
                                        MaxItems: 1,
                                        Elem: &schema.Resource{
                                        	Schema: map[string]*schema.Schema{
                                                "operator": {
                                                    Type:     schema.TypeString,
                                                    Optional: true,
                                                },
                                                "range": {
                                                    Type:     schema.TypeList,
                                                    Optional: true,
                                                    MaxItems: 1,
                                                    Elem: &schema.Resource{
                                                    	Schema: map[string]*schema.Schema{
                                                            "end": {
                                                                Type:     schema.TypeString,
                                                                Optional: true,
                                                            },
                                                            "start": {
                                                                Type:     schema.TypeString,
                                                                Optional: true,
                                                            },
                                                        },
                                                    },
                                                },
                                                "value": {
                                                    Type:     schema.TypeString,
                                                    Optional: true,
                                                },
                                            },
                                        },
                                    },
                                    "tcp_flags": {
                                        Type:     schema.TypeString,
                                        Optional: true,
                                    },
                                },
                            },
                        },
                        "sequence_id": {
                            Type:     schema.TypeInt,
                            Required: true,
                        },
                    },
                },
            },
            "name": {
                Type:     schema.TypeString,
                Required: true,
            },
            "statistics_per_entry": {
                Type:     schema.TypeBool,
                Optional: true,
            },
            "subinterface_specific": {
                Type:     schema.TypeString,
                Optional: true,
                Default: "disabled",
            },

        },
    }
}

func resourceAclIpv4FilterCreate(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	log.Printf("[DEBUG] %s: beginning create", resourceAclIpv4FilterString(d))
	diagnostics := make([]diag.Diagnostic, 0)
	config := meta.(BaseConfig)

	conn, err := createGrpcConn(meta)
	if err != nil {
		log.Printf("[ERROR] Dialing to %q failed: %v", config.target, err)
		return diagnostics
	}

	client := gnmi.NewGNMIClient(conn)

	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()
	ctx = metadata.AppendToOutgoingContext(ctx, "username", config.username, "password", config.password)

	path := "/acl/ipv4-filter"
	gnmiPath, err := ParsePath(strings.TrimSpace(path))
	if err != nil {
		log.Printf("[ERROR] Path parsing failed : %v", err)
		return diagnostics
	}

	log.Printf("[DEBUG] %s: get", d.Get("ipv4-filter"))
	specBytes, _ := json.Marshal(d.Get("ipv4-filter"))
	fmt.Printf("bytes: %s \n", specBytes)
	value := new(gnmi.TypedValue)
	value.Value = &gnmi.TypedValue_JsonIetfVal{
		JsonIetfVal: bytes.Trim(specBytes, " \r\n\t"),
	}

	gnmiPrefix, err := CreatePrefix("", config.target)
	if err != nil {
		log.Printf("[ERROR] Path prefix failed : %v", err)
		return diagnostics
	}

	req := &gnmi.SetRequest{
		Prefix:  gnmiPrefix,
		Delete:  make([]*gnmi.Path, 0, 0),
		Replace: make([]*gnmi.Update, 0),
		Update:  make([]*gnmi.Update, 0),
	}

	req.Update = append(req.Update, &gnmi.Update{
		Path: gnmiPath,
		Val:  value,
	})

	log.Printf("[DEBUG] %s: get", d.Get("ipv4-filter"))

	log.Printf("[DEBUG] : Req: %v", req)
	response, err := client.Set(ctx, req)
	if err != nil {
		log.Printf("[ERROR] : Set failed: %v", err)
	}

	log.Printf("[DEBUG] %v: set response", response)

	d.SetId("ipv4-filter")
	return resourceAclIpv4FilterRead(ctx, d, meta)
}

func resourceAclIpv4FilterRead(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	log.Printf("[DEBUG] %s: beginning read", resourceAclIpv4FilterString(d))
	diagnostics := make([]diag.Diagnostic, 0)
	config := meta.(BaseConfig)

	conn, err := createGrpcConn(meta)
	if err != nil {
		log.Printf("[ERROR] Dialing to %q failed: %v", config.target, err)
		return diagnostics
	}

	client := gnmi.NewGNMIClient(conn)

	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()
	ctx = metadata.AppendToOutgoingContext(ctx, "username", config.username, "password", config.password)

	encodingVal, ok := gnmi.Encoding_value[strings.Replace(strings.ToUpper(config.encoding), "-", "_", -1)]
	if !ok {
		var gnmiEncodingList []string
		for _, name := range gnmi.Encoding_name {
			gnmiEncodingList = append(gnmiEncodingList, name)
		}
		log.Printf("[ERROR] Supported encodings: %s", strings.Join(gnmiEncodingList, ", "))
	}

	req := &gnmi.GetRequest{
		UseModels: make([]*gnmi.ModelData, 0),
		Path:      make([]*gnmi.Path, 0),
		Encoding:  gnmi.Encoding(encodingVal),
	}
	paths := make([]string, 0)
	paths = append(paths, "/acl/ipv4-filter")

	for _, path := range paths {
		gnmiPath, err := xpath.ToGNMIPath(path)
		if err != nil {
			log.Printf("[ERROR] Error in parsing xpath %q to gnmi path", path)
		}
		req.Path = append(req.Path, gnmiPath)
	}

	response, err := client.Get(ctx, req)
	if err != nil {
		log.Printf("[ERROR] : get failed: %v", err)
	}

	log.Printf("[DEBUG] %v: get response", response)

	return nil
}

func resourceAclIpv4FilterUpdate(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	log.Printf("[DEBUG] %s: beginning update", resourceAclIpv4FilterString(d))
	diagnostics := make([]diag.Diagnostic, 0)
	config := meta.(BaseConfig)

	conn, err := createGrpcConn(meta)
	if err != nil {
		log.Printf("[ERROR] Dialing to %q failed: %v", config.target, err)
		return diagnostics
	}

	client := gnmi.NewGNMIClient(conn)

	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()
	ctx = metadata.AppendToOutgoingContext(ctx, "username", config.username, "password", config.password)

	path := "/acl/ipv4-filter"
	gnmiPath, err := ParsePath(strings.TrimSpace(path))
	if err != nil {
		log.Printf("[ERROR] Path parsing failed : %v", err)
		return diagnostics
	}

	log.Printf("[DEBUG] %s: get", d.Get("ipv4-filter"))
	specBytes, _ := json.Marshal(d.Get("ipv4-filter"))
	fmt.Printf("bytes: %s \n", specBytes)
	value := new(gnmi.TypedValue)
	value.Value = &gnmi.TypedValue_JsonIetfVal{
		JsonIetfVal: bytes.Trim(specBytes, " \r\n\t"),
	}

	gnmiPrefix, err := CreatePrefix("", config.target)
	if err != nil {
		log.Printf("[ERROR] Path prefix failed : %v", err)
		return diagnostics
	}

	req := &gnmi.SetRequest{
		Prefix:  gnmiPrefix,
		Delete:  make([]*gnmi.Path, 0, 0),
		Replace: make([]*gnmi.Update, 0),
		Update:  make([]*gnmi.Update, 0),
	}

	req.Update = append(req.Update, &gnmi.Update{
		Path: gnmiPath,
		Val:  value,
	})

	log.Printf("[DEBUG] %s: get", d.Get("ipv4-filter"))

	log.Printf("[DEBUG] : Req: %v", req)
	response, err := client.Set(ctx, req)
	if err != nil {
		log.Printf("[ERROR] : Set failed: %v", err)
	}

	log.Printf("[DEBUG] %v: set response", response)

	d.SetId("ipv4-filter")
	return resourceAclIpv4FilterRead(ctx, d, meta)
}

func resourceAclIpv4FilterDelete(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	log.Printf("[DEBUG] %s: beginning delete", resourceAclIpv4FilterString(d))
	diagnostics := make([]diag.Diagnostic, 0)
	config := meta.(BaseConfig)

	conn, err := createGrpcConn(meta)
	if err != nil {
		log.Printf("[ERROR] Dialing to %q failed: %v", config.target, err)
		return diagnostics
	}

	client := gnmi.NewGNMIClient(conn)

	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()
	ctx = metadata.AppendToOutgoingContext(ctx, "username", config.username, "password", config.password)

	var deleteList []*gnmi.Path

	path := "/acl/ipv4-filter"

	gnmiPath, err := xpath.ToGNMIPath(path)
	if err != nil {
		log.Printf("[ERROR] Error in parsing xpath %q to gnmi path", path)
	}
	deleteList = append(deleteList, gnmiPath)

	req := &gnmi.SetRequest{
		Delete: deleteList,
	}

	log.Printf("[DEBUG] : Delete Req: %v", req)
	response, err := client.Set(ctx, req)
	if err != nil {
		log.Printf("[ERROR] : Delete Set failed: %v", err)
	}

	log.Printf("[DEBUG] %v: delete set response", response)

	d.SetId("")
	return nil
}
