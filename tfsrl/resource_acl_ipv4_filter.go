/*
Package tfsrl is a generated package which contains definitions
of structs which represent a Terraform resource. 

This package was generated by ygocodegen
using the following YANG input files:
	- yang/20_06_2/srl/
Imported modules were sourced from:
	- yang/20_06_2/ietf/
*/
package tfsrl

import (
	"context"
	"strings"
	"regexp"
	
	
	
	"fmt"
	
	
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	log "github.com/sirupsen/logrus"
)

// resourceAclIpv4FilterString function
func resourceAclIpv4FilterString(d resourceIDStringer) string {
	return resourceIDString(d, "acl_ipv4_filter")
}

// resourceAclIpv4Filter function
func resourceAclIpv4Filter() *schema.Resource {
	return &schema.Resource{
		CreateContext: resourceAclIpv4FilterCreate,
		ReadContext:   resourceAclIpv4FilterRead,
		UpdateContext: resourceAclIpv4FilterUpdate,
		DeleteContext: resourceAclIpv4FilterDelete,

		Importer: &schema.ResourceImporter{
			StateContext: schema.ImportStatePassthroughContext,
		},

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(5 * time.Minute),
			Read:   schema.DefaultTimeout(5 * time.Minute),
			Update: schema.DefaultTimeout(5 * time.Minute),
			Delete: schema.DefaultTimeout(5 * time.Minute),
		},
		Schema: map[string]*schema.Schema{
        "ipv4_filter": {
            Type:     schema.TypeList,
            Optional: true,
            MaxItems: 1,
            Elem: &schema.Resource{
            	Schema: map[string]*schema.Schema{
                    "description": {
                        Type:     schema.TypeString,
                        Optional: true,
                        ValidateFunc: validation.All(
                            validation.StringLenBetween(1, 255),
                            validation.StringMatch(regexp.MustCompile("[A-Za-z0-9 !@#$%!^(MISSING)&()|+=`~.,'/_:;?-]*"), "must match regex"),
                        ),
                    },
                    "entry": {
                        Type:     schema.TypeList,
                        Optional: true,
                        MaxItems: 65535,
                        Elem: &schema.Resource{
                        	Schema: map[string]*schema.Schema{
                                "action": {
                                    Type:     schema.TypeList,
                                    Optional: true,
                                    MaxItems: 1,
                                    Elem: &schema.Resource{
                                    	Schema: map[string]*schema.Schema{
                                            "accept": {
                                                Type:     schema.TypeList,
                                                Optional: true,
                                                MaxItems: 1,
                                                Elem: &schema.Resource{
                                                	Schema: map[string]*schema.Schema{
                                                        "log": {
                                                            Type:     schema.TypeBool,
                                                            Optional: true,
                                                            Default: false,
                                                        },
                                                    },
                                                },
                                            },
                                            "drop": {
                                                Type:     schema.TypeList,
                                                Optional: true,
                                                MaxItems: 1,
                                                Elem: &schema.Resource{
                                                	Schema: map[string]*schema.Schema{
                                                        "log": {
                                                            Type:     schema.TypeBool,
                                                            Optional: true,
                                                            Default: false,
                                                        },
                                                    },
                                                },
                                            },
                                        },
                                    },
                                },
                                "description": {
                                    Type:     schema.TypeString,
                                    Optional: true,
                                    ValidateFunc: validation.All(
                                        validation.StringLenBetween(1, 255),
                                        validation.StringMatch(regexp.MustCompile("[A-Za-z0-9 !@#$%!^(MISSING)&()|+=`~.,'/_:;?-]*"), "must match regex"),
                                    ),
                                },
                                "match": {
                                    Type:     schema.TypeList,
                                    Optional: true,
                                    MaxItems: 1,
                                    Elem: &schema.Resource{
                                    	Schema: map[string]*schema.Schema{
                                            "destination_address": {
                                                Type:     schema.TypeString,
                                                Optional: true,
                                                ValidateFunc: validation.All(
                                                    validation.StringMatch(regexp.MustCompile(`(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))`), "must match regex"),
                                                ),
                                            },
                                            "destination_port": {
                                                Type:     schema.TypeList,
                                                Optional: true,
                                                MaxItems: 1,
                                                Elem: &schema.Resource{
                                                	Schema: map[string]*schema.Schema{
                                                        "operator": {
                                                            Type:     schema.TypeString,
                                                            Optional: true,
                                                        },
                                                        "range": {
                                                            Type:     schema.TypeList,
                                                            Optional: true,
                                                            MaxItems: 1,
                                                            Elem: &schema.Resource{
                                                            	Schema: map[string]*schema.Schema{
                                                                    "end": {
                                                                        Type:     schema.TypeString,
                                                                        Optional: true,
                                                                    },
                                                                    "start": {
                                                                        Type:     schema.TypeString,
                                                                        Optional: true,
                                                                    },
                                                                },
                                                            },
                                                        },
                                                        "value": {
                                                            Type:     schema.TypeString,
                                                            Optional: true,
                                                        },
                                                    },
                                                },
                                            },
                                            "first_fragment": {
                                                Type:     schema.TypeBool,
                                                Optional: true,
                                            },
                                            "fragment": {
                                                Type:     schema.TypeBool,
                                                Optional: true,
                                            },
                                            "icmp": {
                                                Type:     schema.TypeList,
                                                Optional: true,
                                                MaxItems: 1,
                                                Elem: &schema.Resource{
                                                	Schema: map[string]*schema.Schema{
                                                        "code": {
                                                            Type:     schema.TypeInt,
                                                            Optional: true,
                                                            ValidateFunc: validation.All(
                                                                validation.IntBetween(0, 255),
                                                            ),
                                                        },
                                                        "type": {
                                                            Type:     schema.TypeString,
                                                            Optional: true,
                                                        },
                                                    },
                                                },
                                            },
                                            "protocol": {
                                                Type:     schema.TypeString,
                                                Optional: true,
                                            },
                                            "source_address": {
                                                Type:     schema.TypeString,
                                                Optional: true,
                                                ValidateFunc: validation.All(
                                                    validation.StringMatch(regexp.MustCompile(`(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))`), "must match regex"),
                                                ),
                                            },
                                            "source_port": {
                                                Type:     schema.TypeList,
                                                Optional: true,
                                                MaxItems: 1,
                                                Elem: &schema.Resource{
                                                	Schema: map[string]*schema.Schema{
                                                        "operator": {
                                                            Type:     schema.TypeString,
                                                            Optional: true,
                                                        },
                                                        "range": {
                                                            Type:     schema.TypeList,
                                                            Optional: true,
                                                            MaxItems: 1,
                                                            Elem: &schema.Resource{
                                                            	Schema: map[string]*schema.Schema{
                                                                    "end": {
                                                                        Type:     schema.TypeString,
                                                                        Optional: true,
                                                                    },
                                                                    "start": {
                                                                        Type:     schema.TypeString,
                                                                        Optional: true,
                                                                    },
                                                                },
                                                            },
                                                        },
                                                        "value": {
                                                            Type:     schema.TypeString,
                                                            Optional: true,
                                                        },
                                                    },
                                                },
                                            },
                                            "tcp_flags": {
                                                Type:     schema.TypeString,
                                                Optional: true,
                                                ValidateFunc: validation.All(
                                                    validation.StringMatch(regexp.MustCompile(`(\(|\)|&|\||!|ack|rst|syn)+`), "must match regex"),
                                                ),
                                            },
                                        },
                                    },
                                },
                                "sequence_id": {
                                    Type:     schema.TypeInt,
                                    Required: true,
                                    ForceNew: true,
                                    ValidateFunc: validation.All(
                                        validation.IntBetween(1, 65535),
                                    ),
                                },
                            },
                        },
                    },
                    "name": {
                        Type:     schema.TypeString,
                        Required: true,
                        ForceNew: true,
                        ValidateFunc: validation.All(
                            validation.StringLenBetween(1, 255),
                            validation.StringMatch(regexp.MustCompile("[A-Za-z0-9 !@#$%!^(MISSING)&()|+=`~.,'/_:;?-]*"), "must match regex"),
                        ),
                    },
                    "statistics_per_entry": {
                        Type:     schema.TypeBool,
                        Optional: true,
                    },
                    "subinterface_specific": {
                        Type:     schema.TypeString,
                        Optional: true,
                        Default: "disabled",
                        ValidateFunc: validation.All(
                            validation.StringInSlice([]string{
                                "disabled",
                                "input-and-output",
                                "input-only",
                                "output-only",
                            }, false),
                        ),
                    },
                },
            },
        },

        },
    }
}

func resourceAclIpv4FilterCreate(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	log.Infof("Beginning Create: %s", resourceAclIpv4FilterString(d))
	target := meta.(*Target)
	 
	rn := "ipv4_filter"
	rk := "name"
	key, err := getResourceListKey(&rn, &rk, d)
	if err != nil {
		return diag.FromErr(err)
	}
	
	p := "/acl/"
	
	v := ""
	
	
	hid := make([]string, 0)
	//hid := ""
	req, err := target.CreateSetRequest(&p, &v, &hid, d)
	
	if err != nil {
		return diag.FromErr(err)
	}

	response, err := target.Set(ctx, req)
	if err != nil {
		return diag.FromErr(err)
	}

	replaceInKeys(d.Get(v), "-", "_")
	log.Debugf("Set response: %v", response)

	d.SetId(key)
	return resourceAclIpv4FilterRead(ctx, d, meta)
}

func resourceAclIpv4FilterRead(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	log.Infof("Beginning Read: %s", resourceAclIpv4FilterString(d))
	target := meta.(*Target)

	// Warning or errors can be collected in a slice type
	var diags diag.Diagnostics

	

	 
	//rn := "ipv4_filter"
	rk := "name"
	key:= d.Id()

	
	//p := fmt.Sprintf("fmt.Sprintf("/acl/ipv4-filter[name=%s]", key)", key)
	p := fmt.Sprintf("/acl/ipv4-filter[name=%s]", key)
	
	

	req, err := target.CreateGetRequest(&p, "CONFIG", d)
	if err != nil {
		return diag.FromErr(err)
	}
	log.Infof("Get Request: %v", req)
	response, err := target.Get(ctx, req)
	if err != nil {
		return diag.FromErr(err)
	}
	log.Debugf("Get Gnmi read response: %v", response)

	u, err := target.HandleGetRespone(response)
	if err != nil {
		return diag.FromErr(err)
	}
	for i, upd := range u {
		// we expect a single response in the get since we target the explicit resource
		log.Debugf("get response: index: %d, update: %v", i, upd)
		if i <= 0 {
			data := make([]map[string]interface{}, 0)
			switch x := upd.Values["ipv4-filter"].(type) {
			case map[string]interface{}:
				for k, v := range x {
					log.Debugf("BEFORE KEY: %s, VALUE: %v", k, v)
					sk := strings.Split(k, ":")[len(strings.Split(k, ":"))-1]

					switch sk {
					
					default:
						if k != sk {
							delete(x, k)
							x[sk] = v
						}
					}
                }
                for k, v := range x {
                    log.Debugf("AFTER KEY: %s, VALUE: %v", k, v)
				}
				 
				// add key to the get resp data since it is not returned in the gnmi data
				x[rk] = key
				// append the get resp to data
				
				data = append(data, x)
			}
			log.Debugf("get response: index: %d, data: %v", i, data)
			if err := d.Set("ipv4_filter", data); err != nil {
				return diag.FromErr(err)
			}
			// always run
			 
			d.SetId(key)
			
			return diags
		} else {
			diags = append(diags, diag.Diagnostic{
				Severity: diag.Error,
				Summary:  "Unexpected multiple response",
				Detail:   "We only expect a single response from the read/get response",
			})
			return diags
		}
	}
	// when the response is empty no data exists in the system
	log.Debugf("get response: empty set id to nill")
	d.SetId("")
	return diags
}

func resourceAclIpv4FilterUpdate(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	log.Infof("Beginning Update: %s", resourceAclIpv4FilterString(d))
	target := meta.(*Target)
	 
	rn := "ipv4_filter"
	rk := "name"
	key, err := getResourceListKey(&rn, &rk, d)
	if err != nil {
		return diag.FromErr(err)
	}
	
	p := "/acl/"
	
	v := ""
	
	
	hid := make([]string, 0)
	//hid := ""
	req, err := target.CreateSetRequest(&p, &v, &hid, d)
	
	if err != nil {
		return diag.FromErr(err)
	}

	response, err := target.Set(ctx, req)
	if err != nil {
		return diag.FromErr(err)
	}

	replaceInKeys(d.Get(v), "-", "_")
	log.Debugf("Set response: %v", response)

	d.SetId(key)
	return resourceAclIpv4FilterRead(ctx, d, meta)
}

func resourceAclIpv4FilterDelete(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	log.Debugf("Beginning delete: %s", resourceAclIpv4FilterString(d))
	target := meta.(*Target)

	
	 
	//p := fmt.Sprintf("fmt.Sprintf("/acl/ipv4-filter[name=%s]", d.Id())", d.Id())
	p := fmt.Sprintf("/acl/ipv4-filter[name=%s]", d.Id())
	
	
	req, err := target.CreateDeleteRequest(&p, d)
	if err != nil {
		return diag.FromErr(err)
	}

	response, err := target.Set(ctx, req)
	if err != nil {
		return diag.FromErr(err)
	}

	log.Debugf("Gnmi Delete Response: %v", response)

	d.SetId("")
	return nil
}
