/*
Package tfsrl is a generated package which contains definitions
of structs which represent a Terraform resource. 

This package was generated by ygocodegen
using the following YANG input files:
	- yang/20_06_2/srl/
Imported modules were sourced from:
	- yang/20_06_2/ietf/
*/
package tfsrl

import (
	"context"
	"strings"
	"regexp"
	
	"fmt"
	
	"strconv"
	
	
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	log "github.com/sirupsen/logrus"
)

// resourceInterfacesSubinterfaceIpv6String function
func resourceInterfacesSubinterfaceIpv6String(d resourceIDStringer) string {
	return resourceIDString(d, "interfaces_subinterface_ipv6")
}

// resourceInterfacesSubinterfaceIpv6 function
func resourceInterfacesSubinterfaceIpv6() *schema.Resource {
	return &schema.Resource{
		CreateContext: resourceInterfacesSubinterfaceIpv6Create,
		ReadContext:   resourceInterfacesSubinterfaceIpv6Read,
		UpdateContext: resourceInterfacesSubinterfaceIpv6Update,
		DeleteContext: resourceInterfacesSubinterfaceIpv6Delete,

		Importer: &schema.ResourceImporter{
			StateContext: schema.ImportStatePassthroughContext,
		},

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(5 * time.Minute),
			Read:   schema.DefaultTimeout(5 * time.Minute),
			Update: schema.DefaultTimeout(5 * time.Minute),
			Delete: schema.DefaultTimeout(5 * time.Minute),
		},
		Schema: map[string]*schema.Schema{
        "interface_id": {
            Type:     schema.TypeString,
            Required: true,
            ForceNew: true,
        },
        "subinterface_id": {
            Type:     schema.TypeString,
            Required: true,
            ForceNew: true,
        },
        "ipv6": {
            Type:     schema.TypeList,
            Optional: true,
            MaxItems: 1,
            Elem: &schema.Resource{
            	Schema: map[string]*schema.Schema{
                    "neighbor_discovery": {
                        Type:     schema.TypeList,
                        Optional: true,
                        MaxItems: 1,
                        Elem: &schema.Resource{
                        	Schema: map[string]*schema.Schema{
                                "duplicate_address_detection": {
                                    Type:     schema.TypeBool,
                                    Optional: true,
                                    Default: true,
                                },
                                "neighbor": {
                                    Type:     schema.TypeList,
                                    Optional: true,
                                    MaxItems: 16,
                                    Elem: &schema.Resource{
                                    	Schema: map[string]*schema.Schema{
                                            "ipv6_address": {
                                                Type:     schema.TypeString,
                                                Required: true,
                                                ForceNew: true,
                                                ValidateFunc: validation.All(
                                                    validation.StringMatch(regexp.MustCompile(`((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))`), "must match regex"),
                                                ),
                                            },
                                            "link_layer_address": {
                                                Type:     schema.TypeString,
                                                Optional: true,
                                                ValidateFunc: validation.All(
                                                    validation.StringMatch(regexp.MustCompile(`[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}`), "must match regex"),
                                                ),
                                            },
                                        },
                                    },
                                },
                                "reachable_time": {
                                    Type:     schema.TypeInt,
                                    Optional: true,
                                    Default: "30",
                                    ValidateFunc: validation.All(
                                        validation.IntBetween(30, 3600),
                                    ),
                                },
                                "stale_time": {
                                    Type:     schema.TypeInt,
                                    Optional: true,
                                    Default: "14400",
                                    ValidateFunc: validation.All(
                                        validation.IntBetween(60, 65535),
                                    ),
                                },
                            },
                        },
                    },
                    "router_advertisement": {
                        Type:     schema.TypeList,
                        Optional: true,
                        MaxItems: 1,
                        Elem: &schema.Resource{
                        	Schema: map[string]*schema.Schema{
                                "router_role": {
                                    Type:     schema.TypeList,
                                    Optional: true,
                                    MaxItems: 1,
                                    Elem: &schema.Resource{
                                    	Schema: map[string]*schema.Schema{
                                            "admin_state": {
                                                Type:     schema.TypeString,
                                                Optional: true,
                                            },
                                            "current_hop_limit": {
                                                Type:     schema.TypeInt,
                                                Optional: true,
                                                Default: "64",
                                                ValidateFunc: validation.All(
                                                    validation.IntBetween(0, 255),
                                                ),
                                            },
                                            "ip_mtu": {
                                                Type:     schema.TypeInt,
                                                Optional: true,
                                                ValidateFunc: validation.All(
                                                    validation.IntBetween(1280, 9486),
                                                ),
                                            },
                                            "managed_configuration_flag": {
                                                Type:     schema.TypeBool,
                                                Optional: true,
                                                Default: false,
                                            },
                                            "max_advertisement_interval": {
                                                Type:     schema.TypeInt,
                                                Optional: true,
                                                Default: "600",
                                                ValidateFunc: validation.All(
                                                    validation.IntBetween(4, 1800),
                                                ),
                                            },
                                            "min_advertisement_interval": {
                                                Type:     schema.TypeInt,
                                                Optional: true,
                                                Default: "200",
                                                ValidateFunc: validation.All(
                                                    validation.IntBetween(3, 1350),
                                                ),
                                            },
                                            "other_configuration_flag": {
                                                Type:     schema.TypeBool,
                                                Optional: true,
                                                Default: false,
                                            },
                                            "prefix": {
                                                Type:     schema.TypeList,
                                                Optional: true,
                                                MaxItems: 16,
                                                Elem: &schema.Resource{
                                                	Schema: map[string]*schema.Schema{
                                                        "autonomous_flag": {
                                                            Type:     schema.TypeBool,
                                                            Optional: true,
                                                            Default: false,
                                                        },
                                                        "ipv6_prefix": {
                                                            Type:     schema.TypeString,
                                                            Required: true,
                                                            ForceNew: true,
                                                            ValidateFunc: validation.All(
                                                                validation.StringMatch(regexp.MustCompile(`((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))`), "must match regex"),
                                                            ),
                                                        },
                                                        "on_link_flag": {
                                                            Type:     schema.TypeBool,
                                                            Optional: true,
                                                            Default: false,
                                                        },
                                                        "preferred_lifetime": {
                                                            Type:     schema.TypeString,
                                                            Optional: true,
                                                            Default: "604800",
                                                        },
                                                        "valid_lifetime": {
                                                            Type:     schema.TypeString,
                                                            Optional: true,
                                                            Default: "2592000",
                                                        },
                                                    },
                                                },
                                            },
                                            "reachable_time": {
                                                Type:     schema.TypeInt,
                                                Optional: true,
                                                Default: "0",
                                                ValidateFunc: validation.All(
                                                    validation.IntBetween(0, 3600000),
                                                ),
                                            },
                                            "retransmit_time": {
                                                Type:     schema.TypeInt,
                                                Optional: true,
                                                Default: "0",
                                                ValidateFunc: validation.All(
                                                    validation.IntBetween(0, 1800000),
                                                ),
                                            },
                                            "router_lifetime": {
                                                Type:     schema.TypeInt,
                                                Optional: true,
                                                Default: "1800",
                                                ValidateFunc: validation.All(
                                                    validation.IntBetween(0, 9000),
                                                ),
                                            },
                                        },
                                    },
                                },
                                "trace_options": {
                                    Type:     schema.TypeList,
                                    Optional: true,
                                    MaxItems: 1,
                                    Elem: &schema.Resource{
                                    	Schema: map[string]*schema.Schema{
                                            "trace": {
                                                Type:     schema.TypeString,
                                                Optional: true,
                                                ValidateFunc: validation.All(
                                                    validation.StringInSlice([]string{
                                                        "messages",
                                                    }, false),
                                                ),
                                            },
                                        },
                                    },
                                },
                            },
                        },
                    },
                            },
                        },
                    },

        },
    }
}

func resourceInterfacesSubinterfaceIpv6Create(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	log.Infof("Beginning Create: %s", resourceInterfacesSubinterfaceIpv6String(d))
	target := meta.(*Target)
	
	key := "ipv6"
	
	
	hkey0 := d.Get("interface_id").(string)
    
	hkey1 := d.Get("subinterface_id").(string)
    
	//hkey := d.Get("[interface_id subinterface_id]").(string)
	//p := fmt.Sprintf("fmt.Sprintf("/interface[name=%s]/subinterface[index=%s]/ipv6",hkey0,hkey1)", hkey)
	p := fmt.Sprintf("/interface[name=%s]/subinterface[index=%s]/ipv6",hkey0,hkey1)
	
	v := "ipv6"
	
	
	hid := make([]string, 0)
	
    hid = append(hid, "interface_id")
	
    hid = append(hid, "subinterface_id")
	
	//hid = append(hid, "subinterface_id")
	//hid := "subinterface_id"
	req, err := target.CreateSetRequest(&p, &v, &hid, d)
	
	if err != nil {
		return diag.FromErr(err)
	}

	response, err := target.Set(ctx, req)
	if err != nil {
		return diag.FromErr(err)
	}

	replaceInKeys(d.Get(v), "-", "_")
	log.Debugf("Set response: %v", response)

	d.SetId(key)
	return resourceInterfacesSubinterfaceIpv6Read(ctx, d, meta)
}

func resourceInterfacesSubinterfaceIpv6Read(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	log.Infof("Beginning Read: %s", resourceInterfacesSubinterfaceIpv6String(d))
	target := meta.(*Target)

	// Warning or errors can be collected in a slice type
	var diags diag.Diagnostics

	
	
	hkey0 := d.Get("interface_id").(string)
    
	hkey1 := d.Get("subinterface_id").(string)
    
	//hkey := d.Get("[interface_id subinterface_id]").(string)
	

	
	
	//p := fmt.Sprintf("fmt.Sprintf("/interface[name=%s]/subinterface[index=%s]/ipv6",hkey0,hkey1)", hkey)
	p := fmt.Sprintf("/interface[name=%s]/subinterface[index=%s]/ipv6",hkey0,hkey1)
	
	

	req, err := target.CreateGetRequest(&p, "CONFIG", d)
	if err != nil {
		return diag.FromErr(err)
	}
	log.Infof("Get Request: %v", req)
	response, err := target.Get(ctx, req)
	if err != nil {
		return diag.FromErr(err)
	}
	log.Debugf("Get Gnmi read response: %v", response)

	u, err := target.HandleGetRespone(response)
	if err != nil {
		return diag.FromErr(err)
	}
	for i, upd := range u {
		// we expect a single response in the get since we target the explicit resource
		log.Debugf("get response: index: %d, update: %v", i, upd)
		if i <= 0 {
			data := make([]map[string]interface{}, 0)
			switch x := upd.Values["ipv6"].(type) {
			case map[string]interface{}:
				for k, v := range x {
					log.Debugf("BEFORE KEY: %s, VALUE: %v", k, v)
					sk := strings.Split(k, ":")[len(strings.Split(k, ":"))-1]

					switch sk {
					
					case "neighbor_discovery":
						delete(x, k)
					
					case "dhcp_client":
						delete(x, k)
					
					case "dhcp_relay":
						delete(x, k)
					
					case "vrrp":
						delete(x, k)
					
					case "address":
						delete(x, k)
					
					case "router_advertisement":
						delete(x, k)
					
					default:
						if k != sk {
							delete(x, k)
							x[sk] = v
						}
					}
                }
                for k, v := range x {
                    log.Debugf("AFTER KEY: %s, VALUE: %v", k, v)
				}
				
				data = append(data, x)
			}
			log.Debugf("get response: index: %d, data: %v", i, data)
			if err := d.Set("ipv6", data); err != nil {
				return diag.FromErr(err)
			}
			// always run
			
			d.SetId(strconv.FormatInt(time.Now().Unix(), 10))
			
			return diags
		} else {
			diags = append(diags, diag.Diagnostic{
				Severity: diag.Error,
				Summary:  "Unexpected multiple response",
				Detail:   "We only expect a single response from the read/get response",
			})
			return diags
		}
	}
	// when the response is empty no data exists in the system
	log.Debugf("get response: empty set id to nill")
	d.SetId("")
	return diags
}

func resourceInterfacesSubinterfaceIpv6Update(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	log.Infof("Beginning Update: %s", resourceInterfacesSubinterfaceIpv6String(d))
	target := meta.(*Target)
	
	key := "ipv6"
	
	
	hkey0 := d.Get("interface_id").(string)
    
	hkey1 := d.Get("subinterface_id").(string)
    
	//hkey := d.Get("[interface_id subinterface_id]").(string)
	//p := fmt.Sprintf("fmt.Sprintf("/interface[name=%s]/subinterface[index=%s]/ipv6",hkey0,hkey1)", hkey)
	p := fmt.Sprintf("/interface[name=%s]/subinterface[index=%s]/ipv6",hkey0,hkey1)
	
	v := "ipv6"
	
	
	hid := make([]string, 0)
	
    hid = append(hid, "interface_id")
	
    hid = append(hid, "subinterface_id")
	
	//hid = append(hid, "subinterface_id")
	//hid := "subinterface_id"
	req, err := target.CreateSetRequest(&p, &v, &hid, d)
	
	if err != nil {
		return diag.FromErr(err)
	}

	response, err := target.Set(ctx, req)
	if err != nil {
		return diag.FromErr(err)
	}

	replaceInKeys(d.Get(v), "-", "_")
	log.Debugf("Set response: %v", response)

	d.SetId(key)
	return resourceInterfacesSubinterfaceIpv6Read(ctx, d, meta)
}

func resourceInterfacesSubinterfaceIpv6Delete(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	log.Debugf("Beginning delete: %s", resourceInterfacesSubinterfaceIpv6String(d))
	target := meta.(*Target)

	
	
	hkey0 := d.Get("interface_id").(string)
    
	hkey1 := d.Get("subinterface_id").(string)
    
	//hkey := d.Get("[interface_id subinterface_id]").(string)
	
	//p := fmt.Sprintf("fmt.Sprintf("/interface[name=%s]/subinterface[index=%s]/ipv6",hkey0,hkey1)", hkey)
	p := fmt.Sprintf("/interface[name=%s]/subinterface[index=%s]/ipv6",hkey0,hkey1)
	
	
	req, err := target.CreateDeleteRequest(&p, d)
	if err != nil {
		return diag.FromErr(err)
	}

	response, err := target.Set(ctx, req)
	if err != nil {
		return diag.FromErr(err)
	}

	log.Debugf("Gnmi Delete Response: %v", response)

	d.SetId("")
	return nil
}
