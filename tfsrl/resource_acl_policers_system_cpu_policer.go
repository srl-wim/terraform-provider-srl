/*
Package tfsrl is a generated package which contains definitions
of structs which represent a Terraform resource.

This package was generated by ygocodegen
using the following YANG input files:
	- yang/srl
Imported modules were sourced from:
	- yang/ietf
*/
package tfsrl

import (
	"context"
	"fmt"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	log "github.com/sirupsen/logrus"
)

// resourceAclPolicersSystemCpuPolicerString function
func resourceAclPolicersSystemCpuPolicerString(d resourceIDStringer) string {
	return resourceIDString(d, "acl_policers_system_cpu_policer")
}

// resourceAclPolicersSystemCpuPolicer function
func resourceAclPolicersSystemCpuPolicer() *schema.Resource {
	return &schema.Resource{
		CreateContext: resourceAclPolicersSystemCpuPolicerCreate,
		ReadContext:   resourceAclPolicersSystemCpuPolicerRead,
		UpdateContext: resourceAclPolicersSystemCpuPolicerUpdate,
		DeleteContext: resourceAclPolicersSystemCpuPolicerDelete,

		Importer: &schema.ResourceImporter{
			StateContext: schema.ImportStatePassthroughContext,
		},

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(5 * time.Minute),
			Read:   schema.DefaultTimeout(5 * time.Minute),
			Update: schema.DefaultTimeout(5 * time.Minute),
			Delete: schema.DefaultTimeout(5 * time.Minute),
		},
		Schema: map[string]*schema.Schema{
			"system_cpu_policer": {
				Type:     schema.TypeList,
				Optional: true,
				MaxItems: 1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"entry_specific": {
							Type:     schema.TypeBool,
							Optional: true,
							Default:  false,
						},
						"max_packet_burst": {
							Type:     schema.TypeInt,
							Optional: true,
							Default:  "16",
						},
						"name": {
							Type:     schema.TypeString,
							Required: true,
							ForceNew: true,
						},
						"peak_packet_rate": {
							Type:     schema.TypeInt,
							Optional: true,
						},
					},
				},
			},
		},
	}
}

func resourceAclPolicersSystemCpuPolicerCreate(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	log.Infof("Beginning Create: %s", resourceAclPolicersSystemCpuPolicerString(d))
	target := meta.(*Target)

	rn := "system-cpu-policer"
	rk := "name"
	key, err := getResourceListKey(&rn, &rk, d)
	if err != nil {
		return diag.FromErr(err)
	}
	p := "/acl/policers/"
	v := ""

	req, err := target.CreateSetRequest(&p, &v, d)
	if err != nil {
		return diag.FromErr(err)
	}

	response, err := target.Set(ctx, req)
	if err != nil {
		return diag.FromErr(err)
	}

	replaceInKeys(d.Get(v), "-", "_")
	log.Debugf("Set response: %v", response)

	d.SetId(key)
	return resourceAclPolicersSystemCpuPolicerRead(ctx, d, meta)
}

func resourceAclPolicersSystemCpuPolicerRead(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	log.Infof("Beginning Read: %s", resourceAclPolicersSystemCpuPolicerString(d))
	target := meta.(*Target)

	p := fmt.Sprintf("/acl/policers/system-cpu-policer[name=%s]", d.Id())

	req, err := target.CreateGetRequest(&p, d)
	if err != nil {
		return diag.FromErr(err)
	}
	response, err := target.Get(ctx, req)
	if err != nil {
		return diag.FromErr(err)
	}

	log.Debugf("Get Gnmi read response: %v", response)

	return nil
}

func resourceAclPolicersSystemCpuPolicerUpdate(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	log.Infof("Beginning Update: %s", resourceAclPolicersSystemCpuPolicerString(d))
	target := meta.(*Target)

	rn := "system-cpu-policer"
	rk := "name"
	key, err := getResourceListKey(&rn, &rk, d)
	if err != nil {
		return diag.FromErr(err)
	}
	p := "/acl/policers/"
	v := ""

	req, err := target.CreateSetRequest(&p, &v, d)
	if err != nil {
		return diag.FromErr(err)
	}

	response, err := target.Set(ctx, req)
	if err != nil {
		return diag.FromErr(err)
	}

	replaceInKeys(d.Get(v), "-", "_")
	log.Debugf("Set response: %v", response)

	d.SetId(key)
	return resourceAclPolicersSystemCpuPolicerRead(ctx, d, meta)
}

func resourceAclPolicersSystemCpuPolicerDelete(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	log.Debugf("Beginning delete: %s", resourceAclPolicersSystemCpuPolicerString(d))
	target := meta.(*Target)

	p := fmt.Sprintf("/acl/policers/system-cpu-policer[name=%s]", d.Id())

	req, err := target.CreateDeleteRequest(&p, d)
	if err != nil {
		return diag.FromErr(err)
	}

	response, err := target.Set(ctx, req)
	if err != nil {
		return diag.FromErr(err)
	}

	log.Debugf("Gnmi Delete Response: %v", response)

	d.SetId("")
	return nil
}
