/*
Package tfsrl is a generated package which contains definitions
of structs which represent a Terraform resource. 

This package was generated by ygocodegen
using the following YANG input files:
	- yang/20_06_2/srl/
Imported modules were sourced from:
	- yang/20_06_2/ietf/
*/
package tfsrl

import (
	"context"
	"strings"
	"regexp"
	
	"fmt"
	
	"strconv"
	
	
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	log "github.com/sirupsen/logrus"
)

// resourceNetworkInstanceInstanceProtocolsIsisString function
func resourceNetworkInstanceInstanceProtocolsIsisString(d resourceIDStringer) string {
	return resourceIDString(d, "network_instance_instance_protocols_isis")
}

// resourceNetworkInstanceInstanceProtocolsIsis function
func resourceNetworkInstanceInstanceProtocolsIsis() *schema.Resource {
	return &schema.Resource{
		CreateContext: resourceNetworkInstanceInstanceProtocolsIsisCreate,
		ReadContext:   resourceNetworkInstanceInstanceProtocolsIsisRead,
		UpdateContext: resourceNetworkInstanceInstanceProtocolsIsisUpdate,
		DeleteContext: resourceNetworkInstanceInstanceProtocolsIsisDelete,

		Importer: &schema.ResourceImporter{
			StateContext: schema.ImportStatePassthroughContext,
		},

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(5 * time.Minute),
			Read:   schema.DefaultTimeout(5 * time.Minute),
			Update: schema.DefaultTimeout(5 * time.Minute),
			Delete: schema.DefaultTimeout(5 * time.Minute),
		},
		Schema: map[string]*schema.Schema{
        "network_instance_id": {
            Type:     schema.TypeString,
            Required: true,
            ForceNew: true,
        },
        "isis": {
            Type:     schema.TypeList,
            Optional: true,
            MaxItems: 1,
            Elem: &schema.Resource{
            	Schema: map[string]*schema.Schema{
                    "instance": {
                        Type:     schema.TypeList,
                        Optional: true,
                        MaxItems: 16,
                        Elem: &schema.Resource{
                        	Schema: map[string]*schema.Schema{
                                "admin_state": {
                                    Type:     schema.TypeString,
                                    Optional: true,
                                    Default: "disable",
                                },
                                "attached_bit": {
                                    Type:     schema.TypeList,
                                    Optional: true,
                                    MaxItems: 1,
                                    Elem: &schema.Resource{
                                    	Schema: map[string]*schema.Schema{
                                            "ignore": {
                                                Type:     schema.TypeBool,
                                                Optional: true,
                                                Default: false,
                                            },
                                            "suppress": {
                                                Type:     schema.TypeBool,
                                                Optional: true,
                                                Default: false,
                                            },
                                        },
                                    },
                                },
                                "authentication": {
                                    Type:     schema.TypeList,
                                    Optional: true,
                                    MaxItems: 1,
                                    Elem: &schema.Resource{
                                    	Schema: map[string]*schema.Schema{
                                            "csnp_authentication": {
                                                Type:     schema.TypeBool,
                                                Optional: true,
                                            },
                                            "hello_authentication": {
                                                Type:     schema.TypeBool,
                                                Optional: true,
                                            },
                                            "keychain": {
                                                Type:     schema.TypeString,
                                                Optional: true,
                                            },
                                            "psnp_authentication": {
                                                Type:     schema.TypeBool,
                                                Optional: true,
                                            },
                                        },
                                    },
                                },
                                "auto_cost": {
                                    Type:     schema.TypeList,
                                    Optional: true,
                                    MaxItems: 1,
                                    Elem: &schema.Resource{
                                    	Schema: map[string]*schema.Schema{
                                            "reference_bandwidth": {
                                                Type:     schema.TypeInt,
                                                Optional: true,
                                                ValidateFunc: validation.All(
                                                    validation.IntBetween(1, 100000000),
                                                ),
                                            },
                                        },
                                    },
                                },
                                "export_policy": {
                                    Type:     schema.TypeString,
                                    Optional: true,
                                },
                                "graceful_restart": {
                                    Type:     schema.TypeList,
                                    Optional: true,
                                    MaxItems: 1,
                                    Elem: &schema.Resource{
                                    	Schema: map[string]*schema.Schema{
                                            "helper_mode": {
                                                Type:     schema.TypeBool,
                                                Optional: true,
                                                Default: false,
                                            },
                                        },
                                    },
                                },
                                "inter_level_propagation_policies": {
                                    Type:     schema.TypeList,
                                    Optional: true,
                                    MaxItems: 1,
                                    Elem: &schema.Resource{
                                    	Schema: map[string]*schema.Schema{
                                            "level1_to_level2": {
                                                Type:     schema.TypeList,
                                                Optional: true,
                                                MaxItems: 1,
                                                Elem: &schema.Resource{
                                                	Schema: map[string]*schema.Schema{
                                                        "summary_address": {
                                                            Type:     schema.TypeList,
                                                            Optional: true,
                                                            MaxItems: 16,
                                                            Elem: &schema.Resource{
                                                            	Schema: map[string]*schema.Schema{
                                                                    "ip_prefix": {
                                                                        Type:     schema.TypeString,
                                                                        Required: true,
                                                                        ForceNew: true,
                                                                        ValidateFunc: validation.Any(
                                                                            validation.StringMatch(regexp.MustCompile(`(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))`), "must match regex"),
                                                                            validation.StringMatch(regexp.MustCompile(`((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))`), "must match regex"),
                                                                        ),
                                                                    },
                                                                    "route_tag": {
                                                                        Type:     schema.TypeInt,
                                                                        Optional: true,
                                                                        ValidateFunc: validation.All(
                                                                            validation.IntBetween(1, 4294967295),
                                                                        ),
                                                                    },
                                                                },
                                                            },
                                                        },
                                                    },
                                                },
                                            },
                                        },
                                    },
                                },
                                "interface": {
                                    Type:     schema.TypeList,
                                    Optional: true,
                                    MaxItems: 1,
                                    Elem: &schema.Resource{
                                    	Schema: map[string]*schema.Schema{
                                            "admin_state": {
                                                Type:     schema.TypeString,
                                                Optional: true,
                                                Default: "enable",
                                            },
                                            "authentication": {
                                                Type:     schema.TypeList,
                                                Optional: true,
                                                MaxItems: 1,
                                                Elem: &schema.Resource{
                                                	Schema: map[string]*schema.Schema{
                                                        "hello_authentication": {
                                                            Type:     schema.TypeBool,
                                                            Optional: true,
                                                        },
                                                        "keychain": {
                                                            Type:     schema.TypeString,
                                                            Optional: true,
                                                        },
                                                    },
                                                },
                                            },
                                            "circuit_type": {
                                                Type:     schema.TypeString,
                                                Optional: true,
                                            },
                                            "hello_padding": {
                                                Type:     schema.TypeString,
                                                Optional: true,
                                                Default: "disable",
                                            },
                                            "interface_name": {
                                                Type:     schema.TypeString,
                                                Required: true,
                                                ForceNew: true,
                                            },
                                            "ipv4_unicast": {
                                                Type:     schema.TypeList,
                                                Optional: true,
                                                MaxItems: 1,
                                                Elem: &schema.Resource{
                                                	Schema: map[string]*schema.Schema{
                                                        "admin_state": {
                                                            Type:     schema.TypeString,
                                                            Optional: true,
                                                            Default: "enable",
                                                        },
                                                        "enable_bfd": {
                                                            Type:     schema.TypeBool,
                                                            Optional: true,
                                                            Default: false,
                                                        },
                                                        "include_bfd_tlv": {
                                                            Type:     schema.TypeBool,
                                                            Optional: true,
                                                            Default: false,
                                                        },
                                                    },
                                                },
                                            },
                                            "ipv6_unicast": {
                                                Type:     schema.TypeList,
                                                Optional: true,
                                                MaxItems: 1,
                                                Elem: &schema.Resource{
                                                	Schema: map[string]*schema.Schema{
                                                        "admin_state": {
                                                            Type:     schema.TypeString,
                                                            Optional: true,
                                                            Default: "enable",
                                                        },
                                                    },
                                                },
                                            },
                                            "level": {
                                                Type:     schema.TypeList,
                                                Optional: true,
                                                MaxItems: 2,
                                                Elem: &schema.Resource{
                                                	Schema: map[string]*schema.Schema{
                                                        "authentication": {
                                                            Type:     schema.TypeList,
                                                            Optional: true,
                                                            MaxItems: 1,
                                                            Elem: &schema.Resource{
                                                            	Schema: map[string]*schema.Schema{
                                                                    "keychain": {
                                                                        Type:     schema.TypeString,
                                                                        Optional: true,
                                                                    },
                                                                },
                                                            },
                                                        },
                                                        "disable": {
                                                            Type:     schema.TypeBool,
                                                            Optional: true,
                                                            Default: false,
                                                        },
                                                        "ipv6_unicast_metric": {
                                                            Type:     schema.TypeInt,
                                                            Optional: true,
                                                            ValidateFunc: validation.All(
                                                                validation.IntBetween(1, 16777215),
                                                            ),
                                                        },
                                                        "level_number": {
                                                            Type:     schema.TypeInt,
                                                            Required: true,
                                                            ForceNew: true,
                                                            ValidateFunc: validation.All(
                                                                validation.IntBetween(1, 2),
                                                            ),
                                                        },
                                                        "metric": {
                                                            Type:     schema.TypeInt,
                                                            Optional: true,
                                                            ValidateFunc: validation.All(
                                                                validation.IntBetween(1, 16777215),
                                                            ),
                                                        },
                                                        "priority": {
                                                            Type:     schema.TypeInt,
                                                            Optional: true,
                                                            Default: "64",
                                                            ValidateFunc: validation.All(
                                                                validation.IntBetween(0, 127),
                                                            ),
                                                        },
                                                        "timers": {
                                                            Type:     schema.TypeList,
                                                            Optional: true,
                                                            MaxItems: 1,
                                                            Elem: &schema.Resource{
                                                            	Schema: map[string]*schema.Schema{
                                                                    "hello_interval": {
                                                                        Type:     schema.TypeInt,
                                                                        Optional: true,
                                                                        Default: "9",
                                                                        ValidateFunc: validation.All(
                                                                            validation.IntBetween(1, 20000),
                                                                        ),
                                                                    },
                                                                    "hello_multiplier": {
                                                                        Type:     schema.TypeInt,
                                                                        Optional: true,
                                                                        Default: "3",
                                                                        ValidateFunc: validation.All(
                                                                            validation.IntBetween(2, 100),
                                                                        ),
                                                                    },
                                                                },
                                                            },
                                                        },
                                                    },
                                                },
                                            },
                                            "passive": {
                                                Type:     schema.TypeBool,
                                                Optional: true,
                                                Default: false,
                                            },
                                            "timers": {
                                                Type:     schema.TypeList,
                                                Optional: true,
                                                MaxItems: 1,
                                                Elem: &schema.Resource{
                                                	Schema: map[string]*schema.Schema{
                                                        "csnp_interval": {
                                                            Type:     schema.TypeInt,
                                                            Optional: true,
                                                            Default: "10",
                                                            ValidateFunc: validation.All(
                                                                validation.IntBetween(1, 65535),
                                                            ),
                                                        },
                                                        "lsp_pacing_interval": {
                                                            Type:     schema.TypeInt,
                                                            Optional: true,
                                                            Default: "100",
                                                            ValidateFunc: validation.All(
                                                                validation.IntBetween(0, 100000),
                                                            ),
                                                        },
                                                    },
                                                },
                                            },
                                            "trace_options": {
                                                Type:     schema.TypeList,
                                                Optional: true,
                                                MaxItems: 1,
                                                Elem: &schema.Resource{
                                                	Schema: map[string]*schema.Schema{
                                                        "trace": {
                                                            Type:     schema.TypeString,
                                                            Optional: true,
                                                            ValidateFunc: validation.All(
                                                                validation.StringInSlice([]string{
                                                                    "adjacencies",
                                                                    "packets-all",
                                                                    "packets-l1-csnp",
                                                                    "packets-l1-hello",
                                                                    "packets-l1-lsp",
                                                                    "packets-l1-psnp",
                                                                    "packets-l2-csnp",
                                                                    "packets-l2-hello",
                                                                    "packets-l2-lsp",
                                                                    "packets-l2-psnp",
                                                                    "packets-p2p-hello",
                                                                }, false),
                                                            ),
                                                        },
                                                    },
                                                },
                                            },
                                        },
                                    },
                                },
                                "ipv4_unicast": {
                                    Type:     schema.TypeList,
                                    Optional: true,
                                    MaxItems: 1,
                                    Elem: &schema.Resource{
                                    	Schema: map[string]*schema.Schema{
                                            "admin_state": {
                                                Type:     schema.TypeString,
                                                Optional: true,
                                                Default: "enable",
                                            },
                                        },
                                    },
                                },
                                "ipv6_unicast": {
                                    Type:     schema.TypeList,
                                    Optional: true,
                                    MaxItems: 1,
                                    Elem: &schema.Resource{
                                    	Schema: map[string]*schema.Schema{
                                            "admin_state": {
                                                Type:     schema.TypeString,
                                                Optional: true,
                                                Default: "enable",
                                            },
                                        },
                                    },
                                },
                                "level": {
                                    Type:     schema.TypeList,
                                    Optional: true,
                                    MaxItems: 2,
                                    Elem: &schema.Resource{
                                    	Schema: map[string]*schema.Schema{
                                            "authentication": {
                                                Type:     schema.TypeList,
                                                Optional: true,
                                                MaxItems: 1,
                                                Elem: &schema.Resource{
                                                	Schema: map[string]*schema.Schema{
                                                        "csnp_authentication": {
                                                            Type:     schema.TypeBool,
                                                            Optional: true,
                                                        },
                                                        "hello_authentication": {
                                                            Type:     schema.TypeBool,
                                                            Optional: true,
                                                        },
                                                        "keychain": {
                                                            Type:     schema.TypeString,
                                                            Optional: true,
                                                        },
                                                        "psnp_authentication": {
                                                            Type:     schema.TypeBool,
                                                            Optional: true,
                                                        },
                                                    },
                                                },
                                            },
                                            "level_number": {
                                                Type:     schema.TypeInt,
                                                Required: true,
                                                ForceNew: true,
                                                ValidateFunc: validation.All(
                                                    validation.IntBetween(1, 2),
                                                ),
                                            },
                                            "metric_style": {
                                                Type:     schema.TypeString,
                                                Optional: true,
                                                Default: "wide",
                                            },
                                            "route_preference": {
                                                Type:     schema.TypeList,
                                                Optional: true,
                                                MaxItems: 1,
                                                Elem: &schema.Resource{
                                                	Schema: map[string]*schema.Schema{
                                                        "external": {
                                                            Type:     schema.TypeInt,
                                                            Optional: true,
                                                            ValidateFunc: validation.All(
                                                                validation.IntBetween(1, 255),
                                                            ),
                                                        },
                                                        "internal": {
                                                            Type:     schema.TypeInt,
                                                            Optional: true,
                                                            ValidateFunc: validation.All(
                                                                validation.IntBetween(1, 255),
                                                            ),
                                                        },
                                                    },
                                                },
                                            },
                                            "trace_options": {
                                                Type:     schema.TypeList,
                                                Optional: true,
                                                MaxItems: 1,
                                                Elem: &schema.Resource{
                                                	Schema: map[string]*schema.Schema{
                                                        "trace": {
                                                            Type:     schema.TypeString,
                                                            Optional: true,
                                                            ValidateFunc: validation.All(
                                                                validation.StringInSlice([]string{
                                                                    "adjacencies",
                                                                    "lsdb",
                                                                    "routes",
                                                                    "spf",
                                                                }, false),
                                                            ),
                                                        },
                                                    },
                                                },
                                            },
                                        },
                                    },
                                },
                                "level_capability": {
                                    Type:     schema.TypeString,
                                    Optional: true,
                                    Default: "L2",
                                },
                                "max_ecmp_paths": {
                                    Type:     schema.TypeInt,
                                    Optional: true,
                                    Default: "1",
                                    ValidateFunc: validation.All(
                                        validation.IntBetween(1, 64),
                                    ),
                                },
                                "name": {
                                    Type:     schema.TypeString,
                                    Required: true,
                                    ForceNew: true,
                                    ValidateFunc: validation.All(
                                        validation.StringLenBetween(1, 255),
                                        validation.StringMatch(regexp.MustCompile("[A-Za-z0-9 !@#$%!^(MISSING)&()|+=`~.,'/_:;?-]*"), "must match regex"),
                                    ),
                                },
                                "net": {
                                    Type:     schema.TypeString,
                                    Optional: true,
                                    ValidateFunc: validation.All(
                                        validation.StringMatch(regexp.MustCompile(`[a-fA-F0-9]{2}(\.[a-fA-F0-9]{4}){3,9}\.[0]{2}`), "must match regex"),
                                    ),
                                },
                                "overload": {
                                    Type:     schema.TypeList,
                                    Optional: true,
                                    MaxItems: 1,
                                    Elem: &schema.Resource{
                                    	Schema: map[string]*schema.Schema{
                                            "advertise_external": {
                                                Type:     schema.TypeBool,
                                                Optional: true,
                                                Default: false,
                                            },
                                            "advertise_interlevel": {
                                                Type:     schema.TypeBool,
                                                Optional: true,
                                                Default: false,
                                            },
                                            "immediate": {
                                                Type:     schema.TypeList,
                                                Optional: true,
                                                MaxItems: 1,
                                                Elem: &schema.Resource{
                                                	Schema: map[string]*schema.Schema{
                                                        "max_metric": {
                                                            Type:     schema.TypeBool,
                                                            Optional: true,
                                                            Default: false,
                                                        },
                                                        "set_bit": {
                                                            Type:     schema.TypeBool,
                                                            Optional: true,
                                                            Default: false,
                                                        },
                                                    },
                                                },
                                            },
                                            "on_boot": {
                                                Type:     schema.TypeList,
                                                Optional: true,
                                                MaxItems: 1,
                                                Elem: &schema.Resource{
                                                	Schema: map[string]*schema.Schema{
                                                        "max_metric": {
                                                            Type:     schema.TypeBool,
                                                            Optional: true,
                                                        },
                                                        "set_bit": {
                                                            Type:     schema.TypeBool,
                                                            Optional: true,
                                                        },
                                                        "timeout": {
                                                            Type:     schema.TypeInt,
                                                            Optional: true,
                                                            ValidateFunc: validation.All(
                                                                validation.IntBetween(60, 1800),
                                                            ),
                                                        },
                                                    },
                                                },
                                            },
                                        },
                                    },
                                },
                                "poi_tlv": {
                                    Type:     schema.TypeBool,
                                    Optional: true,
                                    Default: false,
                                },
                                "timers": {
                                    Type:     schema.TypeList,
                                    Optional: true,
                                    MaxItems: 1,
                                    Elem: &schema.Resource{
                                    	Schema: map[string]*schema.Schema{
                                            "lsp_generation": {
                                                Type:     schema.TypeList,
                                                Optional: true,
                                                MaxItems: 1,
                                                Elem: &schema.Resource{
                                                	Schema: map[string]*schema.Schema{
                                                        "initial_wait": {
                                                            Type:     schema.TypeInt,
                                                            Optional: true,
                                                            Default: "10",
                                                            ValidateFunc: validation.All(
                                                                validation.IntBetween(10, 100000),
                                                            ),
                                                        },
                                                        "max_wait": {
                                                            Type:     schema.TypeInt,
                                                            Optional: true,
                                                            Default: "5000",
                                                            ValidateFunc: validation.All(
                                                                validation.IntBetween(10, 120000),
                                                            ),
                                                        },
                                                        "second_wait": {
                                                            Type:     schema.TypeInt,
                                                            Optional: true,
                                                            Default: "1000",
                                                            ValidateFunc: validation.All(
                                                                validation.IntBetween(10, 100000),
                                                            ),
                                                        },
                                                    },
                                                },
                                            },
                                            "lsp_lifetime": {
                                                Type:     schema.TypeInt,
                                                Optional: true,
                                                Default: "1200",
                                                ValidateFunc: validation.All(
                                                    validation.IntBetween(350, 65535),
                                                ),
                                            },
                                            "lsp_refresh": {
                                                Type:     schema.TypeList,
                                                Optional: true,
                                                MaxItems: 1,
                                                Elem: &schema.Resource{
                                                	Schema: map[string]*schema.Schema{
                                                        "half_lifetime": {
                                                            Type:     schema.TypeBool,
                                                            Optional: true,
                                                            Default: true,
                                                        },
                                                        "interval": {
                                                            Type:     schema.TypeInt,
                                                            Optional: true,
                                                            Default: "600",
                                                            ValidateFunc: validation.All(
                                                                validation.IntBetween(150, 65535),
                                                            ),
                                                        },
                                                    },
                                                },
                                            },
                                            "spf": {
                                                Type:     schema.TypeList,
                                                Optional: true,
                                                MaxItems: 1,
                                                Elem: &schema.Resource{
                                                	Schema: map[string]*schema.Schema{
                                                        "initial_wait": {
                                                            Type:     schema.TypeInt,
                                                            Optional: true,
                                                            Default: "1000",
                                                            ValidateFunc: validation.All(
                                                                validation.IntBetween(10, 100000),
                                                            ),
                                                        },
                                                        "max_wait": {
                                                            Type:     schema.TypeInt,
                                                            Optional: true,
                                                            Default: "10000",
                                                            ValidateFunc: validation.All(
                                                                validation.IntBetween(10, 120000),
                                                            ),
                                                        },
                                                        "second_wait": {
                                                            Type:     schema.TypeInt,
                                                            Optional: true,
                                                            Default: "1000",
                                                            ValidateFunc: validation.All(
                                                                validation.IntBetween(10, 100000),
                                                            ),
                                                        },
                                                    },
                                                },
                                            },
                                        },
                                    },
                                },
                                "trace_options": {
                                    Type:     schema.TypeList,
                                    Optional: true,
                                    MaxItems: 1,
                                    Elem: &schema.Resource{
                                    	Schema: map[string]*schema.Schema{
                                            "trace": {
                                                Type:     schema.TypeString,
                                                Optional: true,
                                                ValidateFunc: validation.All(
                                                    validation.StringInSlice([]string{
                                                        "adjacencies",
                                                        "graceful-restart",
                                                        "interfaces",
                                                        "packets-all",
                                                        "packets-l1-csnp",
                                                        "packets-l1-hello",
                                                        "packets-l1-lsp",
                                                        "packets-l1-psnp",
                                                        "packets-l2-csnp",
                                                        "packets-l2-hello",
                                                        "packets-l2-lsp",
                                                        "packets-l2-psnp",
                                                        "packets-p2p-hello",
                                                        "routes",
                                                        "summary-addresses",
                                                    }, false),
                                                ),
                                            },
                                        },
                                    },
                                },
                                "transport": {
                                    Type:     schema.TypeList,
                                    Optional: true,
                                    MaxItems: 1,
                                    Elem: &schema.Resource{
                                    	Schema: map[string]*schema.Schema{
                                            "lsp_mtu_size": {
                                                Type:     schema.TypeInt,
                                                Optional: true,
                                                Default: "1492",
                                                ValidateFunc: validation.All(
                                                    validation.IntBetween(490, 9490),
                                                ),
                                            },
                                        },
                                    },
                                },
                            },
                        },
                    },
                },
            },
        },

        },
    }
}

func resourceNetworkInstanceInstanceProtocolsIsisCreate(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	log.Infof("Beginning Create: %s", resourceNetworkInstanceInstanceProtocolsIsisString(d))
	target := meta.(*Target)
	
	key := "isis"
	
	
	hkey0 := d.Get("network_instance_id").(string)
    
	//hkey := d.Get("[network_instance_id]").(string)
	//p := fmt.Sprintf("fmt.Sprintf("/network-instance[name=%s]/protocols/isis",hkey0)", hkey)
	p := fmt.Sprintf("/network-instance[name=%s]/protocols/isis",hkey0)
	
	v := "isis"
	
	
	hid := make([]string, 0)
	
    hid = append(hid, "network_instance_id")
	
	//hid = append(hid, "network_instance_id")
	//hid := "network_instance_id"
	req, err := target.CreateSetRequest(&p, &v, &hid, d)
	
	if err != nil {
		return diag.FromErr(err)
	}

	response, err := target.Set(ctx, req)
	if err != nil {
		return diag.FromErr(err)
	}

	replaceInKeys(d.Get(v), "-", "_")
	log.Debugf("Set response: %v", response)

	d.SetId(key)
	return resourceNetworkInstanceInstanceProtocolsIsisRead(ctx, d, meta)
}

func resourceNetworkInstanceInstanceProtocolsIsisRead(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	log.Infof("Beginning Read: %s", resourceNetworkInstanceInstanceProtocolsIsisString(d))
	target := meta.(*Target)

	// Warning or errors can be collected in a slice type
	var diags diag.Diagnostics

	
	
	hkey0 := d.Get("network_instance_id").(string)
    
	//hkey := d.Get("[network_instance_id]").(string)
	

	
	
	//p := fmt.Sprintf("fmt.Sprintf("/network-instance[name=%s]/protocols/isis",hkey0)", hkey)
	p := fmt.Sprintf("/network-instance[name=%s]/protocols/isis",hkey0)
	
	

	req, err := target.CreateGetRequest(&p, "CONFIG", d)
	if err != nil {
		return diag.FromErr(err)
	}
	log.Infof("Get Request: %v", req)
	response, err := target.Get(ctx, req)
	if err != nil {
		return diag.FromErr(err)
	}
	log.Debugf("Get Gnmi read response: %v", response)

	u, err := target.HandleGetRespone(response)
	if err != nil {
		return diag.FromErr(err)
	}
	for i, upd := range u {
		// we expect a single response in the get since we target the explicit resource
		log.Debugf("get response: index: %d, update: %v", i, upd)
		if i <= 0 {
			data := make([]map[string]interface{}, 0)
			switch x := upd.Values["isis"].(type) {
			case map[string]interface{}:
				for k, v := range x {
					log.Debugf("BEFORE KEY: %s, VALUE: %v", k, v)
					sk := strings.Split(k, ":")[len(strings.Split(k, ":"))-1]

					switch sk {
					
					default:
						if k != sk {
							delete(x, k)
							x[sk] = v
						}
					}
                }
                for k, v := range x {
                    log.Debugf("AFTER KEY: %s, VALUE: %v", k, v)
				}
				
				data = append(data, x)
			}
			log.Debugf("get response: index: %d, data: %v", i, data)
			if err := d.Set("isis", data); err != nil {
				return diag.FromErr(err)
			}
			// always run
			
			d.SetId(strconv.FormatInt(time.Now().Unix(), 10))
			
			return diags
		} else {
			diags = append(diags, diag.Diagnostic{
				Severity: diag.Error,
				Summary:  "Unexpected multiple response",
				Detail:   "We only expect a single response from the read/get response",
			})
			return diags
		}
	}
	// when the response is empty no data exists in the system
	log.Debugf("get response: empty set id to nill")
	d.SetId("")
	return diags
}

func resourceNetworkInstanceInstanceProtocolsIsisUpdate(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	log.Infof("Beginning Update: %s", resourceNetworkInstanceInstanceProtocolsIsisString(d))
	target := meta.(*Target)
	
	key := "isis"
	
	
	hkey0 := d.Get("network_instance_id").(string)
    
	//hkey := d.Get("[network_instance_id]").(string)
	//p := fmt.Sprintf("fmt.Sprintf("/network-instance[name=%s]/protocols/isis",hkey0)", hkey)
	p := fmt.Sprintf("/network-instance[name=%s]/protocols/isis",hkey0)
	
	v := "isis"
	
	
	hid := make([]string, 0)
	
    hid = append(hid, "network_instance_id")
	
	//hid = append(hid, "network_instance_id")
	//hid := "network_instance_id"
	req, err := target.CreateSetRequest(&p, &v, &hid, d)
	
	if err != nil {
		return diag.FromErr(err)
	}

	response, err := target.Set(ctx, req)
	if err != nil {
		return diag.FromErr(err)
	}

	replaceInKeys(d.Get(v), "-", "_")
	log.Debugf("Set response: %v", response)

	d.SetId(key)
	return resourceNetworkInstanceInstanceProtocolsIsisRead(ctx, d, meta)
}

func resourceNetworkInstanceInstanceProtocolsIsisDelete(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	log.Debugf("Beginning delete: %s", resourceNetworkInstanceInstanceProtocolsIsisString(d))
	target := meta.(*Target)

	
	
	hkey0 := d.Get("network_instance_id").(string)
    
	//hkey := d.Get("[network_instance_id]").(string)
	
	//p := fmt.Sprintf("fmt.Sprintf("/network-instance[name=%s]/protocols/isis",hkey0)", hkey)
	p := fmt.Sprintf("/network-instance[name=%s]/protocols/isis",hkey0)
	
	
	req, err := target.CreateDeleteRequest(&p, d)
	if err != nil {
		return diag.FromErr(err)
	}

	response, err := target.Set(ctx, req)
	if err != nil {
		return diag.FromErr(err)
	}

	log.Debugf("Gnmi Delete Response: %v", response)

	d.SetId("")
	return nil
}
