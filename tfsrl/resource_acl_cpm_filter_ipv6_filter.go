/*
Package tfsrl is a generated package which contains definitions
of structs which represent a Terraform resource. 

This package was generated by ygocodegen
using the following YANG input files:
	- yang/srl
Imported modules were sourced from:
	- yang/ietf
*/
package tfsrl

import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/google/gnxi/utils/xpath"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/openconfig/gnmi/proto/gnmi"
	"google.golang.org/grpc/metadata"	
)

// resourceAclCpmFilterIpv6FilterString function
func resourceAclCpmFilterIpv6FilterString(d resourceIDStringer) string {
	return resourceIDString(d, "filter_ipv6_filter")
}

// resourceAclCpmFilterIpv6Filter function
func resourceAclCpmFilterIpv6Filter() *schema.Resource {
	return &schema.Resource{
		Schema: map[string]*schema.Schema{
            "ipv6_filter": {
                Type:     schema.TypeList,
                Optional: true,
                MaxItems: 1,
                Elem: &schema.Resource{
                	Schema: map[string]*schema.Schema{
                        "entry": {
                            Type:     schema.TypeList,
                            Optional: true,
                            MaxItems: 1,
                            Elem: &schema.Resource{
                            	Schema: map[string]*schema.Schema{
                                    "action": {
                                        Type:     schema.TypeList,
                                        Optional: true,
                                        MaxItems: 1,
                                        Elem: &schema.Resource{
                                        	Schema: map[string]*schema.Schema{
                                                "accept": {
                                                    Type:     schema.TypeList,
                                                    Optional: true,
                                                    MaxItems: 1,
                                                    Elem: &schema.Resource{
                                                    	Schema: map[string]*schema.Schema{
                                                            "log": {
                                                                Type:     schema.TypeBool,
                                                                Optional: true,
                                                                Default: false,
                                                            },
                                                            "rate_limit": {
                                                                Type:     schema.TypeList,
                                                                Optional: true,
                                                                MaxItems: 1,
                                                                Elem: &schema.Resource{
                                                                	Schema: map[string]*schema.Schema{
                                                                        "distributed_policer": {
                                                                            Type:     schema.TypeString,
                                                                            Optional: true,
                                                                        },
                                                                        "system_cpu_policer": {
                                                                            Type:     schema.TypeString,
                                                                            Optional: true,
                                                                        },
                                                                    },
                                                                },
                                                            },
                                                        },
                                                    },
                                                },
                                                "drop": {
                                                    Type:     schema.TypeList,
                                                    Optional: true,
                                                    MaxItems: 1,
                                                    Elem: &schema.Resource{
                                                    	Schema: map[string]*schema.Schema{
                                                            "log": {
                                                                Type:     schema.TypeBool,
                                                                Optional: true,
                                                                Default: false,
                                                            },
                                                        },
                                                    },
                                                },
                                            },
                                        },
                                    },
                                    "description": {
                                        Type:     schema.TypeString,
                                        Optional: true,
                                    },
                                    "match": {
                                        Type:     schema.TypeList,
                                        Optional: true,
                                        MaxItems: 1,
                                        Elem: &schema.Resource{
                                        	Schema: map[string]*schema.Schema{
                                                "destination_address": {
                                                    Type:     schema.TypeString,
                                                    Optional: true,
                                                },
                                                "destination_port": {
                                                    Type:     schema.TypeList,
                                                    Optional: true,
                                                    MaxItems: 1,
                                                    Elem: &schema.Resource{
                                                    	Schema: map[string]*schema.Schema{
                                                            "operator": {
                                                                Type:     schema.TypeString,
                                                                Optional: true,
                                                            },
                                                            "range": {
                                                                Type:     schema.TypeList,
                                                                Optional: true,
                                                                MaxItems: 1,
                                                                Elem: &schema.Resource{
                                                                	Schema: map[string]*schema.Schema{
                                                                        "end": {
                                                                            Type:     schema.TypeString,
                                                                            Optional: true,
                                                                        },
                                                                        "start": {
                                                                            Type:     schema.TypeString,
                                                                            Optional: true,
                                                                        },
                                                                    },
                                                                },
                                                            },
                                                            "value": {
                                                                Type:     schema.TypeString,
                                                                Optional: true,
                                                            },
                                                        },
                                                    },
                                                },
                                                "icmp6": {
                                                    Type:     schema.TypeList,
                                                    Optional: true,
                                                    MaxItems: 1,
                                                    Elem: &schema.Resource{
                                                    	Schema: map[string]*schema.Schema{
                                                            "code": {
                                                                Type:     schema.TypeInt,
                                                                Optional: true,
                                                            },
                                                            "type": {
                                                                Type:     schema.TypeString,
                                                                Optional: true,
                                                            },
                                                        },
                                                    },
                                                },
                                                "next_header": {
                                                    Type:     schema.TypeString,
                                                    Optional: true,
                                                },
                                                "source_address": {
                                                    Type:     schema.TypeString,
                                                    Optional: true,
                                                },
                                                "source_port": {
                                                    Type:     schema.TypeList,
                                                    Optional: true,
                                                    MaxItems: 1,
                                                    Elem: &schema.Resource{
                                                    	Schema: map[string]*schema.Schema{
                                                            "operator": {
                                                                Type:     schema.TypeString,
                                                                Optional: true,
                                                            },
                                                            "range": {
                                                                Type:     schema.TypeList,
                                                                Optional: true,
                                                                MaxItems: 1,
                                                                Elem: &schema.Resource{
                                                                	Schema: map[string]*schema.Schema{
                                                                        "end": {
                                                                            Type:     schema.TypeString,
                                                                            Optional: true,
                                                                        },
                                                                        "start": {
                                                                            Type:     schema.TypeString,
                                                                            Optional: true,
                                                                        },
                                                                    },
                                                                },
                                                            },
                                                            "value": {
                                                                Type:     schema.TypeString,
                                                                Optional: true,
                                                            },
                                                        },
                                                    },
                                                },
                                                "tcp_flags": {
                                                    Type:     schema.TypeString,
                                                    Optional: true,
                                                },
                                            },
                                        },
                                    },
                                    "sequence_id": {
                                        Type:     schema.TypeInt,
                                        Required: true,
                                    },
                                },
                            },
                        },
                        "statistics_per_entry": {
                            Type:     schema.TypeBool,
                            Optional: true,
                        },
                    },
                },
            },

        },
    }
}

func resourceAclCpmFilterIpv6FilterCreate(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	log.Printf("[DEBUG] %s: beginning create", resourceAclCpmFilterIpv6FilterString(d))
	diagnostics := make([]diag.Diagnostic, 0)
	config := meta.(BaseConfig)

	conn, err := createGrpcConn(meta)
	if err != nil {
		log.Printf("[ERROR] Dialing to %q failed: %v", config.target, err)
		return diagnostics
	}

	client := gnmi.NewGNMIClient(conn)

	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()
	ctx = metadata.AppendToOutgoingContext(ctx, "username", config.username, "password", config.password)

	p := fmt.Sprintf("/system/clock/timezone:\"%s\"", d.Get("timezone").(string))
	log.Printf("[DEBUG] %s: path", p)
	path := []string{p}

	updateList, err := buildPbUpdateList(path)

	req := &gnmi.SetRequest{
		Update: updateList,
	}

	log.Printf("[DEBUG] : Req: %v", req)
	response, err := client.Set(ctx, req)
	if err != nil {
		log.Printf("[ERROR] : Set failed: %v", err)
	}

	log.Printf("[DEBUG] %v: set response", response)

	timezone := d.Get("timezone").(string)
	d.SetId(timezone)
	return resourceAclCpmFilterIpv6FilterRead(ctx, d, meta)
}

func resourceAclCpmFilterIpv6FilterRead(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	log.Printf("[DEBUG] %s: beginning read", resourceAclCpmFilterIpv6FilterString(d))
	diagnostics := make([]diag.Diagnostic, 0)
	config := meta.(BaseConfig)

	conn, err := createGrpcConn(meta)
	if err != nil {
		log.Printf("[ERROR] Dialing to %q failed: %v", config.target, err)
		return diagnostics
	}

	client := gnmi.NewGNMIClient(conn)

	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()
	ctx = metadata.AppendToOutgoingContext(ctx, "username", config.username, "password", config.password)

	encodingVal, ok := gnmi.Encoding_value[strings.Replace(strings.ToUpper(config.encoding), "-", "_", -1)]
	if !ok {
		var gnmiEncodingList []string
		for _, name := range gnmi.Encoding_name {
			gnmiEncodingList = append(gnmiEncodingList, name)
		}
		log.Printf("[ERROR] Supported encodings: %s", strings.Join(gnmiEncodingList, ", "))
	}

	req := &gnmi.GetRequest{
		UseModels: make([]*gnmi.ModelData, 0),
		Path:      make([]*gnmi.Path, 0),
		Encoding:  gnmi.Encoding(encodingVal),
	}
	paths := make([]string, 0)
	paths = append(paths, "/system/clock")

	for _, path  := range paths {
		gnmiPath, err := xpath.ToGNMIPath(path)
		if err != nil {
			log.Printf("[ERROR] Error in parsing xpath %q to gnmi path", path)
		}
		req.Path = append(req.Path, gnmiPath)
	}
	
	response, err := client.Get(ctx, req)
	if err != nil {
		log.Printf("[ERROR] : get failed: %v", err)
	}

	log.Printf("[DEBUG] %v: get response", response)

	return nil
}

func resourceAclCpmFilterIpv6FilterUpdate(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	log.Printf("[DEBUG] %s: beginning update", resourceAclCpmFilterIpv6FilterString(d))
	diagnostics := make([]diag.Diagnostic, 0)
	config := meta.(BaseConfig)

	conn, err := createGrpcConn(meta)
	if err != nil {
		log.Printf("[ERROR] Dialing to %q failed: %v", config.target, err)
		return diagnostics
	}

	client := gnmi.NewGNMIClient(conn)

	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()
	ctx = metadata.AppendToOutgoingContext(ctx, "username", config.username, "password", config.password)

	p := fmt.Sprintf("/system/clock/timezone:\"%s\"", d.Get("timezone").(string))
	log.Printf("[DEBUG] %s: path", p)
	path := []string{p}

	updateList, err := buildPbUpdateList(path)

	req := &gnmi.SetRequest{
		Update: updateList,
	}

	log.Printf("[DEBUG] : Req: %v", req)
	response, err := client.Set(ctx, req)
	if err != nil {
		log.Printf("[ERROR] : Set failed: %v", err)
	}

	log.Printf("[DEBUG] %v: set response", response)

	timezone := d.Get("timezone").(string)
	d.SetId(timezone)
	return resourceAclCpmFilterIpv6FilterRead(ctx, d, meta)
}

func resourceAclCpmFilterIpv6FilterDelete(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	log.Printf("[DEBUG] %s: beginning delete", resourceAclCpmFilterIpv6FilterString(d))
	diagnostics := make([]diag.Diagnostic, 0)
	config := meta.(BaseConfig)

	conn, err := createGrpcConn(meta)
	if err != nil {
		log.Printf("[ERROR] Dialing to %q failed: %v", config.target, err)
		return diagnostics
	}

	client := gnmi.NewGNMIClient(conn)

	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()
	ctx = metadata.AppendToOutgoingContext(ctx, "username", config.username, "password", config.password)

	var deleteList []*gnmi.Path

	path := "/system/clock"

	gnmiPath, err := xpath.ToGNMIPath(path)
	if err != nil {
		log.Printf("[ERROR] Error in parsing xpath %q to gnmi path", path)
	}
	deleteList = append(deleteList, gnmiPath)

	req := &gnmi.SetRequest{
		Delete: deleteList,
	}

	log.Printf("[DEBUG] : Delete Req: %v", req)
	response, err := client.Set(ctx, req)
	if err != nil {
		log.Printf("[ERROR] : Delete Set failed: %v", err)
	}

	log.Printf("[DEBUG] %v: delete set response", response)

	d.SetId("")
	return nil
}
