/*
Package tfsrl is a generated package which contains definitions
of structs which represent a Terraform resource. 

This package was generated by ygocodegen
using the following YANG input files:
	- yang/20_06_2/srl/
Imported modules were sourced from:
	- yang/20_06_2/ietf/
*/
package tfsrl

import (
	"context"
	"strings"
	
	"fmt"
	
	
	
	
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	log "github.com/sirupsen/logrus"
)

// dataNetworkInstanceInstanceProtocolsBgpGroupString function
func dataNetworkInstanceInstanceProtocolsBgpGroupString(d resourceIDStringer) string {
	return resourceIDString(d, "network_instance_instance_protocols_bgp_group")
}

// dataNetworkInstanceInstanceProtocolsBgpGroup function
func dataNetworkInstanceInstanceProtocolsBgpGroup() *schema.Resource {
	return &schema.Resource{
		ReadContext:   dataNetworkInstanceInstanceProtocolsBgpGroupRead,

		Importer: &schema.ResourceImporter{
			StateContext: schema.ImportStatePassthroughContext,
		},

		Timeouts: &schema.ResourceTimeout{
			Read:   schema.DefaultTimeout(5 * time.Minute),
		},
		Schema: map[string]*schema.Schema{
        "bgp_id": {
            Type:     schema.TypeString,
            Required: true,
        },
        "group": {
            Type:     schema.TypeList,
            Required: true,
            Elem: &schema.Resource{
            	Schema: map[string]*schema.Schema{
                    "admin_state": {
                        Type:     schema.TypeString,
                        Computed: true,
                    },
                    "as_path_options": {
                        Type:     schema.TypeList,
                        Computed: true,
                        Elem: &schema.Resource{
                        	Schema: map[string]*schema.Schema{
                                "allow_own_as": {
                                    Type:     schema.TypeInt,
                                    Computed: true,
                                },
                                "remove_private_as": {
                                    Type:     schema.TypeList,
                                    Computed: true,
                                    Elem: &schema.Resource{
                                    	Schema: map[string]*schema.Schema{
                                            "ignore_peer_as": {
                                                Type:     schema.TypeBool,
                                                Computed: true,
                                            },
                                            "leading_only": {
                                                Type:     schema.TypeBool,
                                                Computed: true,
                                            },
                                            "mode": {
                                                Type:     schema.TypeString,
                                                Computed: true,
                                            },
                                        },
                                    },
                                },
                                "replace_peer_as": {
                                    Type:     schema.TypeBool,
                                    Computed: true,
                                },
                            },
                        },
                    },
                    "authentication": {
                        Type:     schema.TypeList,
                        Computed: true,
                        Elem: &schema.Resource{
                        	Schema: map[string]*schema.Schema{
                                "keychain": {
                                    Type:     schema.TypeString,
                                    Computed: true,
                                },
                            },
                        },
                    },
                    "description": {
                        Type:     schema.TypeString,
                        Computed: true,
                    },
                    "export_policy": {
                        Type:     schema.TypeString,
                        Computed: true,
                    },
                    "failure_detection": {
                        Type:     schema.TypeList,
                        Computed: true,
                        Elem: &schema.Resource{
                        	Schema: map[string]*schema.Schema{
                                "enable_bfd": {
                                    Type:     schema.TypeBool,
                                    Computed: true,
                                },
                                "fast_failover": {
                                    Type:     schema.TypeBool,
                                    Computed: true,
                                },
                            },
                        },
                    },
                    "graceful_restart": {
                        Type:     schema.TypeList,
                        Computed: true,
                        Elem: &schema.Resource{
                        	Schema: map[string]*schema.Schema{
                                "admin_state": {
                                    Type:     schema.TypeString,
                                    Computed: true,
                                },
                                "stale_routes_time": {
                                    Type:     schema.TypeInt,
                                    Computed: true,
                                },
                            },
                        },
                    },
                    "group_name": {
                        Type:     schema.TypeString,
                        Required: true,
                    },
                    "import_policy": {
                        Type:     schema.TypeString,
                        Computed: true,
                    },
                    "ipv4_unicast": {
                        Type:     schema.TypeList,
                        Computed: true,
                        Elem: &schema.Resource{
                        	Schema: map[string]*schema.Schema{
                                "admin_state": {
                                    Type:     schema.TypeString,
                                    Computed: true,
                                },
                                "advertise_ipv6_next_hops": {
                                    Type:     schema.TypeBool,
                                    Computed: true,
                                },
                                "prefix_limit": {
                                    Type:     schema.TypeList,
                                    Computed: true,
                                    Elem: &schema.Resource{
                                    	Schema: map[string]*schema.Schema{
                                            "max_received_routes": {
                                                Type:     schema.TypeInt,
                                                Computed: true,
                                            },
                                            "warning_threshold_pct": {
                                                Type:     schema.TypeString,
                                                Computed: true,
                                            },
                                        },
                                    },
                                },
                                "receive_ipv6_next_hops": {
                                    Type:     schema.TypeBool,
                                    Computed: true,
                                },
                            },
                        },
                    },
                    "ipv6_unicast": {
                        Type:     schema.TypeList,
                        Computed: true,
                        Elem: &schema.Resource{
                        	Schema: map[string]*schema.Schema{
                                "admin_state": {
                                    Type:     schema.TypeString,
                                    Computed: true,
                                },
                                "prefix_limit": {
                                    Type:     schema.TypeList,
                                    Computed: true,
                                    Elem: &schema.Resource{
                                    	Schema: map[string]*schema.Schema{
                                            "max_received_routes": {
                                                Type:     schema.TypeInt,
                                                Computed: true,
                                            },
                                            "warning_threshold_pct": {
                                                Type:     schema.TypeString,
                                                Computed: true,
                                            },
                                        },
                                    },
                                },
                            },
                        },
                    },
                    "local_as": {
                        Type:     schema.TypeList,
                        Computed: true,
                        Elem: &schema.Resource{
                        	Schema: map[string]*schema.Schema{
                                "as_number": {
                                    Type:     schema.TypeString,
                                    Required: true,
                                },
                                "prepend_global_as": {
                                    Type:     schema.TypeBool,
                                    Computed: true,
                                },
                                "prepend_local_as": {
                                    Type:     schema.TypeBool,
                                    Computed: true,
                                },
                            },
                        },
                    },
                    "local_preference": {
                        Type:     schema.TypeInt,
                        Computed: true,
                    },
                    "next_hop_self": {
                        Type:     schema.TypeBool,
                        Computed: true,
                    },
                    "peer_as": {
                        Type:     schema.TypeString,
                        Computed: true,
                    },
                    "route_reflector": {
                        Type:     schema.TypeList,
                        Computed: true,
                        Elem: &schema.Resource{
                        	Schema: map[string]*schema.Schema{
                                "client": {
                                    Type:     schema.TypeBool,
                                    Computed: true,
                                },
                                "cluster_id": {
                                    Type:     schema.TypeString,
                                    Computed: true,
                                },
                            },
                        },
                    },
                    "send_community": {
                        Type:     schema.TypeList,
                        Computed: true,
                        Elem: &schema.Resource{
                        	Schema: map[string]*schema.Schema{
                                "large": {
                                    Type:     schema.TypeBool,
                                    Computed: true,
                                },
                                "standard": {
                                    Type:     schema.TypeBool,
                                    Computed: true,
                                },
                            },
                        },
                    },
                    "send_default_route": {
                        Type:     schema.TypeList,
                        Computed: true,
                        Elem: &schema.Resource{
                        	Schema: map[string]*schema.Schema{
                                "export_policy": {
                                    Type:     schema.TypeString,
                                    Computed: true,
                                },
                                "ipv4_unicast": {
                                    Type:     schema.TypeBool,
                                    Computed: true,
                                },
                                "ipv6_unicast": {
                                    Type:     schema.TypeBool,
                                    Computed: true,
                                },
                            },
                        },
                    },
                    "timers": {
                        Type:     schema.TypeList,
                        Computed: true,
                        Elem: &schema.Resource{
                        	Schema: map[string]*schema.Schema{
                                "connect_retry": {
                                    Type:     schema.TypeInt,
                                    Computed: true,
                                },
                                "hold_time": {
                                    Type:     schema.TypeInt,
                                    Computed: true,
                                },
                                "keepalive_interval": {
                                    Type:     schema.TypeInt,
                                    Computed: true,
                                },
                                "minimum_advertisement_interval": {
                                    Type:     schema.TypeInt,
                                    Computed: true,
                                },
                            },
                        },
                    },
                    "trace_options": {
                        Type:     schema.TypeList,
                        Computed: true,
                        Elem: &schema.Resource{
                        	Schema: map[string]*schema.Schema{
                                "flag": {
                                    Type:     schema.TypeList,
                                    Computed: true,
                                    Elem: &schema.Resource{
                                    	Schema: map[string]*schema.Schema{
                                            "modifier": {
                                                Type:     schema.TypeString,
                                                Computed: true,
                                            },
                                            "name": {
                                                Type:     schema.TypeString,
                                                Required: true,
                                            },
                                        },
                                    },
                                },
                            },
                        },
                    },
                    "transport": {
                        Type:     schema.TypeList,
                        Computed: true,
                        Elem: &schema.Resource{
                        	Schema: map[string]*schema.Schema{
                                "local_address": {
                                    Type:     schema.TypeString,
                                    Computed: true,
                                },
                                "passive_mode": {
                                    Type:     schema.TypeBool,
                                    Computed: true,
                                },
                                "tcp_mss": {
                                    Type:     schema.TypeInt,
                                    Computed: true,
                                },
                            },
                        },
                    },
                },
            },
        },

        },
    }
}

func dataNetworkInstanceInstanceProtocolsBgpGroupRead(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	log.Infof("Beginning Read: %s", dataNetworkInstanceInstanceProtocolsBgpGroupString(d))
	target := meta.(*Target)

	// Warning or errors can be collected in a slice type
	var diags diag.Diagnostics

	
	
	hkey0 := d.Get("network_instance_id").(string)
    
	//hkey := d.Get("[network_instance_id]").(string)
	

	 
	rn := "group"
	rk := "group-name"
	key, err := getResourceListKey(&rn, &rk, d)

	
	//p := fmt.Sprintf("fmt.Sprintf("/network-instance[name=%s]/protocols/bgp/group[group-name=%s]",hkey0, key)", hkey, key)
	p := fmt.Sprintf("/network-instance[name=%s]/protocols/bgp/group[group-name=%s]",hkey0, key)
	
	

	req, err := target.CreateGetRequest(&p, "CONFIG", d)
	if err != nil {
		return diag.FromErr(err)
	}
	log.Infof("Get Request: %v", req)
	response, err := target.Get(ctx, req)
	if err != nil {
		return diag.FromErr(err)
	}
	log.Debugf("Get Gnmi read response: %v", response)

	u, err := target.HandleGetRespone(response)
	if err != nil {
		return diag.FromErr(err)
	}
	for i, upd := range u {
		// we expect a single response in the get since we target the explicit resource
		log.Debugf("get response: index: %d, update: %v", i, upd)
		if i <= 0 {
			data := make([]map[string]interface{}, 0)
			switch x := upd.Values["group"].(type) {
			case map[string]interface{}:
				for k, v := range x {
					log.Debugf("BEFORE KEY: %s, VALUE: %v", k, v)
					sk := strings.Split(k, ":")[len(strings.Split(k, ":"))-1]

					switch sk {
					
					default:
						if k != sk {
							delete(x, k)
							x[sk] = v
						}
					}					
                }
                for k, v := range x {
                    log.Debugf("AFTER KEY: %s, VALUE: %v", k, v)
				}
				 
				// add key to the get resp data since it is not returned in the gnmi data
				x[rk] = key
				// append the get resp to data
				
				data = append(data, x)
			}
			log.Debugf("get response: index: %d, data: %v", i, data)
			if err := d.Set("group", data); err != nil {
				return diag.FromErr(err)
			}
			// always run
			 
			d.SetId(key)
			
			return diags
		} else {
			diags = append(diags, diag.Diagnostic{
				Severity: diag.Error,
				Summary:  "Unexpected multiple response",
				Detail:   "We only expect a single response from the read/get response",
			})
			return diags
		}
	}
	// when the response is empty no data exists in the system
	log.Debugf("get response: empty set id to nill")
	d.SetId("")
	return diags
}
